Technical Paper submitted to Transactions of the AFS Oct 1996
Automated Visual Inspection of Cracks in Cast and Welded Components
S.K. Sethi, B.Tech. Student Department of Computer Science and Engineering Indian Institute of Technology, Bombay 400076, India
Dr. B. Ravi*, Assistant Professor Department of Mechanical Engineering Indian Institute of Technology, Bombay 400076, India
Dr. B.K. Mohan, Senior Research Engineer Center of Studies in Resources Engineering Indian Institute of Technology, Bombay 400076, India
* Author for Correspondence
Abstract
An automated inspection system for detecting external cracks in complex shaped components has been developed. The components are scanned by a video camera and the digitized images are transferred to a computer for defect identification. Heuristics for crack identification have been developed by studying the chain of reasoning used by human inspectors. These heuristics have been isolated, sorted according to their importance and implemented in a computer program. The program first generates some seed points at various edges and corners in the image and then tests each location to identify the cracks, if any. Compared to other reported investigations, this method can use raw images without any contrast enhancement or noise reduction. It does not depend on `ideal' images for comparison, any training before use or part-specific instructions. The inspection system has been successfully tested by digitizing the images of several castings. In each case, it took one to two seconds to detect and isolate the crack region. The speed of response makes it suitable for application in automated foundries with high rates of production. Other applications being considered include underwater inspection of cast and welded structures.
Keywords: Casting Defects, Digital Image Processing, Machine Vision, Product Inspection, Quality Control, Welding Defects.

1 Introduction
Inspection is an important part of manufacturing activities. It is particularly so in casting production, where the inherent complexity of the product and the process leads to a high percentage of defects as compared to most other manufacturing processes. While many other tasks in casting process, such as sand preparation, furnace charging, molding, core-making, shake-out and cleaning have been automated, inspection continues to be a manual task. The difficulty in inspecting all the parts, particularly in a high production foundry, and the dearth of qualified inspectors has prompted us to explore the feasibility of automating this task.
Machine vision, digital image processing and pattern recognition represent some of the major areas of research in computer science. A typical system for image acquisition and processing mainly comprises a video camera and a computer to store and analyze the images (Fig.1). The camera has a solid state charge coupled device (CCD) matrix to convert incident light into an array of electric charges representing the image. The computer is equipped with hardware to convert the analog signals from the camera into digital data, which are stored in the computer memory or hard disk. Auxiliary equipment include illumination sources and fixtures for positioning and holding the component. The camera is positioned above the component to be inspected. The image captured by the camera is represented by a series of pixels in terms of their x,y coordinates and the brightness level (gray shade) of each pixel. This could be stored in one of the several formats used at present, which include BMP, GIF, TIF, PGM, WMF and others. The image is processed to eliminate noise (stray pixels), enhance the contrast and detect edges to facilitate feature recognition and analysis [1]. A significant proportion of the research work in image processing has found its way into practical applications ranging from the matching of finger prints to weather prediction based on satellite images. Most of the work in automatic inspection of industrial parts has however, been focused on detecting anomalies in printed circuit boards and assembled components.
Castings and welded structures may contain a variety of surface defects. These include cracks, cavities, porosity, misruns, incomplete fusion, fins and others [2,3], which differ in terms of their location, shape, size and other attributes. The component itself may contain a number of features such as curved surfaces, holes, bosses, ribs, slots and pockets, making its image highly complex. The image is further affected by the number, distance, type and intensity of illumination sources in an industrial setup. Automatic inspection of cast and welded components, specially those with intricate geometry, thus appears to be a challenging task.
There has been some work on automatic inspection of engineering parts, mainly in 1980's, which is of interest to casting and welding engineers. The different investigations mainly differ in terms of the algorithms for image processing and defect identification, which influence the shapes of components and the types of defects handled. In one approach, surface defects such as fins were automatically detected in cast pulleys by determining the outermost contour of the pulley image and checking for protrusions (fins) in the contour [4]. This program handles only pulley shapes; a different shape of part or class of defect would require a new program. Another approach is based on matching and comparing two images to isolate regions differing in terms of brightness [5]. One such system creates a model for inspection after being trained on a number of `good' and `bad' parts. It has been demonstrated on a circular shape, and is claimed to be useful for

detecting missing or misplaced components in an assembly. The algorithm needs to be retrained for each new part. A part-independent methodology for detecting surface imperfections has been attempted and tested on hot steel slabs [6]. The image of the slab is processed to detect the edges of cracks and classify them as longitudinal corner crack, transverse face crack, corner tear etc. This method has not been reported for more intricate shapes. An algorithm for detecting cracks from the images of textured surfaces, both regularly and randomly textured, but for simple shapes, has also been proposed [7]. An indirect method for automatic inspection of castings uses dye penetrant to highlight the cracks when viewed under ultraviolet light [8]. Other work in image processing related to castings is mainly in the area of microstructure analysis [9] and automatic analysis of radiographic images to detect internal flaws [10].
The above methods for automatic detection of cracks and other defects rely on the images of `good' components, `training' sessions and part-specific algorithms; all of them have been reported for planar objects or simple shapes. This severely limits the application of existing image-based inspection techniques in casting industry. Ideally, the automatic inspection system should be able to handle any casting shape, should require minimal user intervention, should be fast and reliable and should not depend on an ideal image for comparison purposes.
We have attempted the above task by identifying the heuristics used by human inspectors for detecting casting defects and incorporating these in a computer program for automatic image processing and analysis. In this work, we have focused on identifying cracks in complex shaped castings and welded structures. The algorithm is described here, followed by the results on a few industrial components.
2 Crack Detection Algorithm
The input to the program is the raw image of a casting obtained by a video camera which is converted to digital form and stored in PGM format in a text file. This contains the brightness value in 256 steps - 0 being the darkest and 255 the brightest - corresponding to each pixel in the image. The pixel locations start from the top left corner of the image and move down each line until the bottom right corner. A typical image of a casting may be comprised of 350x300 pixels.
Since the steps in any algorithm for image processing will have to be applied to each pixel in the image (typically 100,000), the response of the program can potentially become very slow, making it useless for practical application. To overcome this, a heuristic approach has been developed to quickly eliminate unwanted pixels from consideration and apply further tests for crack detection only to a select set of remaining pixels.
2.1 Heuristics for Cracks
Cracks in a number of industrial castings were studied to find common characteristics regarding their location, shape, shade, texture, aspect ratio and other visual attributes. Based on the above study, a number of heuristics were evolved to characterize the cracks and were later used for automatic identification (Fig.2): The heuristics are listed below. 1. Cracks contain a number of sharp corners and edges. 2. Pixels belonging to a crack are darker in shade.

3. Adjoining pixels on either side of the crack are lighter in shade. 4. Adjoining pixels on either side of the crack have equal brightness values. 5. Crack dimensions are comparable to the size of sections in the object. 6. Cracks are usually elongated in shape with very small width/length value. 7. The end of the crack is surrounded by lighter shaded pixels. 8. One or both ends of the crack are not connected to any other feature. 9. Pixels in a crack may become gradually lighter and again darker along its length.
A pilot study was carried out by applying the above heuristics on a number of defective castings. This helped in prioritizing the heuristics in terms of their importance, reliability and computational expense. The heuristics were then incorporated in a computer program to automatically process and analyze the casting image. The program first sets the brightness level of the image and then processes it using three sub-modules: seed point generation, `noise' elimination and crack identification. These are described below.
2.2 Seed Point Generation
This sub-module generates some `seed points' or probable locations of cracks. This is based on the heuristic that a crack comprises a number of short edges at sharp angles to each other. Seed points for crack detection are generated using a 37-bit circular mask [11]. A mask can be visualized as an opaque plate with a certain number of holes (37 in this case) arranged in a particular pattern (circular in this case). The mask is placed over a part of the image and the pixels visible through the mask are processed using their location and brightness values. After this, the mask is moved to another part of the image and the procedure is repeated for the next set of pixels visible through the mask. The mask shape and size (number of holes) are selected to suit a particular requirement, say contrast enhancement, noise elimination or corner/edge detection.
In the present work, the 37-bit circular mask is centered around each pixel in the image and the brightness of all pixels visible through the mask is compared with the brightness of the pixel at the mask center (nucleus) using the following equation.

s=

(e - e )100 x i = 1 to 37 - x_nucleus

- x_maskpoint

where x_nucleus is the brightness value of the pixel at mask center and x_maskpoint is the brightness value of a pixel i within the mask, both varying in the range 0-255. If the brightness values of a mask point and the center are the same, then the particular term in the equation reduces to zero. On the other hand, if the difference is large, then the term tends to one. The maximum value of s = 3600 is obtained when a single dark pixel at the center is surrounded by bright pixels. The calculation of s is speeded up by using a look-up table containing all possible differences in the values of brightness of the nucleus and any mask point. The brightness of all pixels within the mask being the same as that of the mask center (s = 0) implies that the region of the image covered by the mask is a flat surface without any features, defects or noise (Fig.3). If the brightness of approximately half the number of pixels in the mask is the same as that of the mask center (say, s = 1500), it means that the mask has been placed on

an edge in the image. If even fewer pixels have brightness the same as that of the mask center (say, s = 2000), it indicates the probability of a sharp curvature with its tip at the mask center.
The threshold value of s to conclude the possibility of a sharp corner influences the number of seed points generated by the program. Increasing the threshold limit will detect only sharper corners, leading to fewer seed points. On the other hand, reducing the threshold limit will detect even straight edges, leading to a large number of seed points and thereby more computation time for administering further tests. Another parameter which influences the sensitivity of the program is the brightness scaling factor applied to the raw image before corner detection. A higher factor increases the brightness difference between pixels, leading to more seed points being generated. A careful selection of the threshold value of s and the scaling factor for brightness will generate a sufficient number of seed points while minimizing the overall computation time.
The above algorithm typically produces a few hundred seed points as the probable sites for cracks, greatly reducing the computational expense for further tests by two to three orders of magnitude when compared to the number of pixels in the raw image. The seed points are marked by small square boxes around them during display.
2.3 `Noise' Elimination
The algorithm for seed point generation works well if the object surface is smooth and proper illumination has been provided. In general, the algorithm generates many seed points, including corners of cracks, which have to be isolated, and several false points, which have to be eliminated. False pixels may be caused by random pixels (noise), blurring between two regions of the image, corners in the component and other defects such as incomplete fusion and pin holes. All the seed points which do not belong to cracks are considered to be noise, and are filtered out to reduce computational expense. This is achieved by using the following five tests. The tests are applied in sequence, that is, a particular test is applied to points remaining after the previous test. The first two tests are based on the 37-bit circular mask; the remaining tests are based on the heuristics listed earlier.
Test 1: This is based on the observation that the centroid of a sharp corner will lie away from the mask center. For this purpose, the centroid of pixels believed to belong to a corner is computed and its distance from mask center is determined. A centroid lying on or adjacent to the nucleus may be caused by a thin line close to real edges indicating blurring. Such pixels are rejected.
Test 2: This is based on the heuristic that all the pixels belonging to a corner will have the same brightness value. This is tested by comparing the brightness of pixels along the direction from the mask center through the centroid. If all these points have the brightness value the same as the centroid, then the possibility of a corner is further strengthened. If not, the points are suspected to be caused by noise and the particular corner point under consideration is dropped.
Test 3: This test is based on the heuristic that the two sides of a crack have comparable brightness. It eliminates pixels belonging to component features, edges and shadows. At each

seed pixel, the brightness of the four pairs of adjoining pixels on opposite sides (horizontal, vertical and two diagonal pairs) is obtained. If none of the pairs have pixels with equal brightness, then the seed point is dropped from further tests. The distance to the adjoining pixels is determined based on the probable width of the crack, which is estimated based on the overall dimensions of the component.
Test 4: This test uses the heuristic that pixels in the crack appear darker than the neighboring points. It removes pixels belonging to other defects such as cold shut and blowholes which have brighter edges. The test is administered by computing the difference in brightness of a seed pixel with all its adjoining pixels. If the maximum difference is below a threshold limit, then the pixel is eliminated from further consideration.
Test 5: This test removes small dark areas surrounded by brighter pixels which may remain after the previous tests and which may belong to randomly scattered noise (picked up during imaging) or other defects such as porosity and pin holes. For this purpose, the brightness of all adjoining points is compared to the brightness of the seed point. If all of them are significantly brighter compared to the seed point, then it is considered as noise and eliminated.
2.4 Crack Identification
The seed pixels remaining after the above tests are considered to belong to cracks. Starting from one of these points, the entire crack is extracted and its shape attributes are determined to facilitate further confirmation, reasoning and analysis. Seed points falling on the cracks already extracted are eliminated and the crack extraction procedure is repeated for the remaining seed points to detect more cracks, if any.
Crack shape determination is based on the brightness levels of pixels adjacent to the seed pixel under consideration (Fig.4). Among the eight neighboring pixels, those having brightness levels the same as that of the seed pixel are selected. Such pixels lie either on or inside the crack. The pixels lying inside the crack are identified by considering the brightness of the eight neighboring pixels of the selected pixel. If all the eight neighbors have the same brightness, then this pixel is considered to lie inside the crack. Other pixels lying along the direction from the seed pixel through the selected pixel inside the crack are identified to obtain the crack width. For this purpose, the brightness values of neighboring pixels in the above direction are considered and those with the same value as that of the seed pixel are selected. A neighboring pixel with a significantly different value of brightness denotes the crossing of crack boundary. The number of adjoining pixels inside the crack indicates the width of the crack in that row.
After identifying a row of pixels lying inside the crack, pixels in other rows are identified to extract the entire crack. For this purpose, the middle pixel of a particular row is taken and the adjacent pixel in a direction perpendicular to the crack width is considered. If it has a brightness value equal to other pixels lying inside the crack, then it is selected. Other pixels lying in the row containing the selected pixel are obtained by the procedure detailed above.
If a particular row has adjacent pixels (in a direction perpendicular to crack width) with significantly different brightness values compared to pixels inside the crack, it denotes the end of

the crack. Pixels in all the rows obtained by the above procedure represent the crack. The maximum of the width of the crack at different locations (rows) is stored. Finally, the bounding box of the crack is determined and displayed; this is given by the minimum and maximum values of x and y coordinates of all pixels belonging to the crack. The width of the crack is compared to the larger dimension of its bounding box; a small ratio further confirms the crack.
3 Results
The algorithm has been implemented using C language and can be easily ported to any platform to suit individual requirements. The program takes a scanned image as its input and writes the location and shape parameters of cracks, if any, in an output file. Intermediate images, representing the output of the program after seed point generation, noise elimination and crack extraction can be written to separate files and can be displayed if necessary.
The program has been tested by scanning the pictures of defective castings available in handbooks [2,3]. The results of the program on three industrial castings containing surface cracks are given here. The scanned images were typically of the size 350x300 pixels with 256 levels of brightness or gray shade. The images were transferred to a computer and analyzed by the program to detect cracks. The user has an option of changing the default values of brightness scaling factor and threshold parameters for corner detection for individual or an entire set of images.
The original images of castings after being scanned are given in figures 5a, 6a and 7a. Seed points detected by the program, indicating potential sites for further testing, are shown by small squares in figures 5b, 6b and 7b. Finally, the cracks detected by the program are indicated in figures 5c, 6c and 7c, highlighted by bounding boxes. For each image, the program took less than two seconds to detect the crack on a Sun workstation with X Windows in a networked environment. Display takes an additional one to two seconds.
In the second example, the program detected a false crack where there was none. This indicates the necessity of optimizing the threshold limits in the algorithm for seed point generation. The program detected a false crack in the third example too; but it succeeded in eliminating this after adjusting the threshold parameters (figure 7c thus shows only the real crack). These can be finetuned to detect all cracks with minimal computational expense, depending on the conditions at a particular inspection setup based on experience. In all our experiments, real cracks were always detected, even for extreme values of the above parameters. The algorithm appears to be robust and capable of performing under a wide range of illumination levels and for any shape of the component.
4 Conclusion
This work has demonstrated the feasibility of automatic detection of manufacturing defects in castings using machine vision and image processing techniques. The system has been able to successfully detect cracks from the images of complex shaped castings in almost real time. Since it does not require any image enhancement, conventional noise reduction, ideal images for comparison, training before use or part-specific instructions, it can be set up quickly and

immediately deployed for any new shape. While it is most suited to a large automated foundry, reduced costs of video cameras and computers make it economically viable for even medium and small foundries. The present work is being extended to detect other external defects, such as coldshuts, blowholes, pinholes, discontinuities and misruns. The system is also expected to be of use in detecting defective components manufactured by other processes, particularly welding and injection molding.
Acknowledgments
This work is part of a project on "Underwater Welding" sponsored by the Ministry of Human Resources Development, Government of India, New Delhi. We also gratefully acknowledge the assistance of Prof. Sharat Chandran, Department of Computer Science and Engineering, for providing facilities for image scanning and computing.
References
1. D. Vermon, Machine Vision: Automated Visual Inspection and Robot Vision, Prentice Hall, Englehood Cliffs, New Jersey, 1991. 2. The American Foundrymen's Society, International Atlas of Casting Defects, AFS, Des Plaines, Illinois, 1974. 3. The Institute of British Foundrymen, Atlas of Defects in Castings, IBF, London, 1961. 4. Y. Okawa, "Automatic Inspection of the Surface Defects of Cast Metals," Computer Vision, Graphics and Image Processing, Vol. 25, 1984, pp. 89-112. 5. W.A. Perkins, "INSPECTOR: A Computer Vision System that Learns to Inspect Parts," IEEE Transactions on Pattern Analysis and Machine Intelligence, Vol. PAMI-5, No. 6, November 1983, pp. 584-592. 6. B.R. Suresh, R.A. Fundakowski, T.S. Levitt and J.E. Overland, "A Real-Time Automated Visual Inspection System for Hot Steel Slabs," IEEE Transactions on Pattern Analysis and Machine Intelligence, Vol. PAMI-5, No. 6, November 1983, pp. 563-572. 7. K.Y. Song, M. Petrou, J. Kittler, "Texture Crack Detection," Machine Vision Applications, Vol. 8, No. 1, 1995, pp. 63-76. 8. S.L. Robinson, R.K. Miller, Automated Inspection and Quality Assurance, Marcel Dekker, New York, 1989, pp. 123-124. 9. W.F. Buckingham, C.S. Ciglar, "Automated Analysis of Graphite in Cast Iron," Modern Castings, Vol. 78, 1988, pp. 27-32. 10. W. Heinrich, M. Purschke, "Methods for Automatic X-Ray Inspection of Castings," IFAC Digital Image Processing in Industrial Applications, Espoo, Finland, 1986, pp. 41-46.
11. S.M. Smith, J.M. Brady, "SUSAN (Smallest Univalue Segment Assimilating Nucleus): A New Approach to Low Level Image Processing," International Journal of Computer Vision, in publication, 1996.

Figure Annotations
Fig. 1 Machine vision and digital image processing. Fig. 2 Attributes of cracks and heuristics for their detection. Fig. 3 Edge and corner detection using a circular mask. Fig. 4 Crack hape, dimensions and bounding box. Fig. 5 Example 1: (a) original image [2], (b) seed points, (c) crack identification. Fig. 6 Example 2: (a) original image [3], (b) seed points, (c) crack identification. Fig. 7 Example 3: (a) original image [3], (b) seed points, (c) crack identification.

