HTN-MAKER: Learning HTNs with Minimal
Additional Knowledge Engineering Required

Chad Hogg 1 Héctor Muñoz-Avila 1 Ugur Kuter 2

1Department of Computer Science & Engineering

Lehigh University

Bethlehem, Pennsylvania 18015, USA

2University of Maryland

Institute for Advanced Computer Studies

College Park, Maryland 20742, USA

23rd International AAAI Conference on Artiﬁcial Intelligence

2008-07-16

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Motivation

Planning systems require some planning knowledge

Simple STRIPS planners need only operators, which
describe how actions change the world
More advanced planners require operators and additional
planning knowledge for problem solving

Problem

Developing additional planning knowledge for complex
planners is a difﬁcult manual process performed by domain
experts

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Motivation

Planning systems require some planning knowledge

Simple STRIPS planners need only operators, which
describe how actions change the world
More advanced planners require operators and additional
planning knowledge for problem solving

Problem

Developing additional planning knowledge for complex
planners is a difﬁcult manual process performed by domain
experts

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Motivation

Planning systems require some planning knowledge

Simple STRIPS planners need only operators, which
describe how actions change the world
More advanced planners require operators and additional
planning knowledge for problem solving

Problem

Developing additional planning knowledge for complex
planners is a difﬁcult manual process performed by domain
experts

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Motivation (2)

Objective

We describe an algorithm for learning such planning
knowledge for a certain class of advanced planners known
as Hierarchical Task Network (HTN) planners

Actually, a speciﬁc form of HTN planning known as Ordered
Task Decomposition (OTD)
OTD planners are useful because of potential for efﬁciency
and expressivity; used in most ﬁelded applications

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Motivation (2)

Objective

We describe an algorithm for learning such planning
knowledge for a certain class of advanced planners known
as Hierarchical Task Network (HTN) planners

Actually, a speciﬁc form of HTN planning known as Ordered
Task Decomposition (OTD)
OTD planners are useful because of potential for efﬁciency
and expressivity; used in most ﬁelded applications

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Motivation (2)

Objective

We describe an algorithm for learning such planning
knowledge for a certain class of advanced planners known
as Hierarchical Task Network (HTN) planners

Actually, a speciﬁc form of HTN planning known as Ordered
Task Decomposition (OTD)
OTD planners are useful because of potential for efﬁciency
and expressivity; used in most ﬁelded applications

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

STRIPS Planning

States are sets of logical
atoms describing the world
Operators describe
actions, when they may be
undertaken, and how they
affect the world
The objective is to ﬁnd a
sequence of actions (a
plan) that, when executed
from a given initial state,
will result in a state that
satisﬁes certain given
goals

Example Operator
:operator
((!load-truck ?pkg
?trk
?loc)

:preconditions
((at ?pkg ?loc)

(at ?trk ?loc))

:add-effects
((at ?pkg ?loc))
:del-effects
((in ?pkg ?trk)))

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

STRIPS Planning

States are sets of logical
atoms describing the world
Operators describe
actions, when they may be
undertaken, and how they
affect the world
The objective is to ﬁnd a
sequence of actions (a
plan) that, when executed
from a given initial state,
will result in a state that
satisﬁes certain given
goals

Example Operator
:operator
((!load-truck ?pkg
?trk
?loc)

:preconditions
((at ?pkg ?loc)

(at ?trk ?loc))

:add-effects
((at ?pkg ?loc))
:del-effects
((in ?pkg ?trk)))

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

STRIPS Planning

States are sets of logical
atoms describing the world
Operators describe
actions, when they may be
undertaken, and how they
affect the world
The objective is to ﬁnd a
sequence of actions (a
plan) that, when executed
from a given initial state,
will result in a state that
satisﬁes certain given
goals

Example Operator
:operator
((!load-truck ?pkg
?trk
?loc)

:preconditions
((at ?pkg ?loc)

(at ?trk ?loc))

:add-effects
((at ?pkg ?loc))
:del-effects
((in ?pkg ?trk)))

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

STRIPS Planning

States are sets of logical
atoms describing the world
Operators describe
actions, when they may be
undertaken, and how they
affect the world
The objective is to ﬁnd a
sequence of actions (a
plan) that, when executed
from a given initial state,
will result in a state that
satisﬁes certain given
goals

Example Operator
:operator
((!load-truck ?pkg
?trk
?loc)

:preconditions
((at ?pkg ?loc)

(at ?trk ?loc))

:add-effects
((at ?pkg ?loc))
:del-effects
((in ?pkg ?trk)))

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

HTN Planning

Tasks are symbolic
representations of
activities that should be
accomplished
Methods describe how to
decompose complex tasks
into sequences of simpler
ones
The objective is to ﬁnd a
hierarchy of
decompositions from a
given sequence of tasks
down to a sequence of
actions that can be
executed from the given
initial state

Example Method
:method
((deliver ?pkg

?loc)
:preconditions
((at ?pkg ?src)
(at ?trk ?src)
(same-city ?src

?loc))

:subtasks
((!load-truck ?pkg
?trk
?src)

(deliver ?pkg

?loc)))

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

HTN Planning

Tasks are symbolic
representations of
activities that should be
accomplished
Methods describe how to
decompose complex tasks
into sequences of simpler
ones
The objective is to ﬁnd a
hierarchy of
decompositions from a
given sequence of tasks
down to a sequence of
actions that can be
executed from the given
initial state

Example Method
:method
((deliver ?pkg

?loc)
:preconditions
((at ?pkg ?src)
(at ?trk ?src)
(same-city ?src

?loc))

:subtasks
((!load-truck ?pkg
?trk
?src)

(deliver ?pkg

?loc)))

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

HTN Planning

Tasks are symbolic
representations of
activities that should be
accomplished
Methods describe how to
decompose complex tasks
into sequences of simpler
ones
The objective is to ﬁnd a
hierarchy of
decompositions from a
given sequence of tasks
down to a sequence of
actions that can be
executed from the given
initial state

Example Method
:method
((deliver ?pkg

?loc)
:preconditions
((at ?pkg ?src)
(at ?trk ?src)
(same-city ?src

?loc))

:subtasks
((!load-truck ?pkg
?trk
?src)

(deliver ?pkg

?loc)))

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

HTN Planning

Tasks are symbolic
representations of
activities that should be
accomplished
Methods describe how to
decompose complex tasks
into sequences of simpler
ones
The objective is to ﬁnd a
hierarchy of
decompositions from a
given sequence of tasks
down to a sequence of
actions that can be
executed from the given
initial state

Example Method
:method
((deliver ?pkg

?loc)
:preconditions
((at ?pkg ?src)
(at ?trk ?src)
(same-city ?src

?loc))

:subtasks
((!load-truck ?pkg
?trk
?src)

(deliver ?pkg

?loc)))

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Learning HTN Methods from STRIPS Plans

Annotated Tasks
We deﬁne the notion of an annotated task as a task with effects
(what it means to accomplish the task) and preconditions
(when it is possible to accomplish the task)

Example: (deliver ?pkg ?loc) has effect (at ?pkg ?loc)

Given
A STRIPS domain D, a collection of annotated tasks T , a
planning problem P in D, and a solution plan S to P,

Find
Method deﬁnitions for the tasks in T whose subtasks are
actions from S or tasks from T

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Learning HTN Methods from STRIPS Plans

Annotated Tasks
We deﬁne the notion of an annotated task as a task with effects
(what it means to accomplish the task) and preconditions
(when it is possible to accomplish the task)

Example: (deliver ?pkg ?loc) has effect (at ?pkg ?loc)

Given
A STRIPS domain D, a collection of annotated tasks T , a
planning problem P in D, and a solution plan S to P,

Find
Method deﬁnitions for the tasks in T whose subtasks are
actions from S or tasks from T

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Learning HTN Methods from STRIPS Plans

Annotated Tasks
We deﬁne the notion of an annotated task as a task with effects
(what it means to accomplish the task) and preconditions
(when it is possible to accomplish the task)

Example: (deliver ?pkg ?loc) has effect (at ?pkg ?loc)

Given
A STRIPS domain D, a collection of annotated tasks T , a
planning problem P in D, and a solution plan S to P,

Find
Method deﬁnitions for the tasks in T whose subtasks are
actions from S or tasks from T

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Main Steps of the HTN-MAKER Algorithm

1 Traverse the actions in the input plan, identifying states in

which the effects of an annotated task have become
satisﬁed

2 Regress annotated task effects backward through plan to
each previous state where preconditions of annotated task
are satisﬁed

3 Create a new method for the annotated task. Operators

that contribute to the accomplishment of the effects
become subtasks of this new method, as may the tasks
associated with previously-learned methods

4 The preconditions of this new method are the union of task

preconditions and preconditions of subtasks that are not
provided by earlier subtasks

5 Learned methods are stored so that their tasks may be
used as subtasks in methods that will be learned later

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Main Steps of the HTN-MAKER Algorithm

1 Traverse the actions in the input plan, identifying states in

which the effects of an annotated task have become
satisﬁed

2 Regress annotated task effects backward through plan to
each previous state where preconditions of annotated task
are satisﬁed

3 Create a new method for the annotated task. Operators

that contribute to the accomplishment of the effects
become subtasks of this new method, as may the tasks
associated with previously-learned methods

4 The preconditions of this new method are the union of task

preconditions and preconditions of subtasks that are not
provided by earlier subtasks

5 Learned methods are stored so that their tasks may be
used as subtasks in methods that will be learned later

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Main Steps of the HTN-MAKER Algorithm

1 Traverse the actions in the input plan, identifying states in

which the effects of an annotated task have become
satisﬁed

2 Regress annotated task effects backward through plan to
each previous state where preconditions of annotated task
are satisﬁed

3 Create a new method for the annotated task. Operators

that contribute to the accomplishment of the effects
become subtasks of this new method, as may the tasks
associated with previously-learned methods

4 The preconditions of this new method are the union of task

preconditions and preconditions of subtasks that are not
provided by earlier subtasks

5 Learned methods are stored so that their tasks may be
used as subtasks in methods that will be learned later

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Main Steps of the HTN-MAKER Algorithm

1 Traverse the actions in the input plan, identifying states in

which the effects of an annotated task have become
satisﬁed

2 Regress annotated task effects backward through plan to
each previous state where preconditions of annotated task
are satisﬁed

3 Create a new method for the annotated task. Operators

that contribute to the accomplishment of the effects
become subtasks of this new method, as may the tasks
associated with previously-learned methods

4 The preconditions of this new method are the union of task

preconditions and preconditions of subtasks that are not
provided by earlier subtasks

5 Learned methods are stored so that their tasks may be
used as subtasks in methods that will be learned later

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Main Steps of the HTN-MAKER Algorithm

1 Traverse the actions in the input plan, identifying states in

which the effects of an annotated task have become
satisﬁed

2 Regress annotated task effects backward through plan to
each previous state where preconditions of annotated task
are satisﬁed

3 Create a new method for the annotated task. Operators

that contribute to the accomplishment of the effects
become subtasks of this new method, as may the tasks
associated with previously-learned methods

4 The preconditions of this new method are the union of task

preconditions and preconditions of subtasks that are not
provided by earlier subtasks

5 Learned methods are stored so that their tasks may be
used as subtasks in methods that will be learned later

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Example

Input is initial state (S0), plan, and annotated tasks

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Example (2)

Use initial state and plan to ﬁll in intermediate states

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Example (3)

The effects of (deliver ?p ?l) become true in S3 with ?p = P,
?l = L2, so learn some methods starting with the previous
Initial method has effects of annotated task as
preconditions, no subtasks

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Example (3)

The effects of (deliver ?p ?l) become true in S3 with ?p = P,
?l = L2, so learn some methods starting with the previous
Initial method has effects of annotated task as
preconditions, no subtasks

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Example (4)

The (!unload P T L2) operator fulﬁlls the outstanding
precondition, so remove it, add the preconditions of the
operator to the method, and make it a subtask
This is now a method describing how to deliver a package
from a certain set of states
C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Example (4)

The (!unload P T L2) operator fulﬁlls the outstanding
precondition, so remove it, add the preconditions of the
operator to the method, and make it a subtask
This is now a method describing how to deliver a package
from a certain set of states
C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Example (5)

Now we go back one step further in the plan, starting again
with an empty method

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Example (6)

The method that we already learned fulﬁlls the outstanding
precondition (through the minimal effects of its annotated
task), so remove it, add preconditions of method, and
make it a subtask

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Example (7)

The (!drive T L1 L2 C) operator fulﬁlls an outstanding
precondition, so remove it, add the preconditions of the
operator to the method, and make it a subtask
This is now a method describing how to deliver a package
from an additional set of states

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Example (7)

The (!drive T L1 L2 C) operator fulﬁlls an outstanding
precondition, so remove it, add the preconditions of the
operator to the method, and make it a subtask
This is now a method describing how to deliver a package
from an additional set of states

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Example (8)

Now we go back to the ﬁrst step in the plan

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Example (9)

The new previously learned method is useful in the same
way

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Example (10)

The (!load P T L1) operator fulﬁlls a precondition, so we
add it as well
This is a third method, allowing us to accomplish the task
from yet another set of states

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Example (10)

The (!load P T L1) operator fulﬁlls a precondition, so we
add it as well
This is a third method, allowing us to accomplish the task
from yet another set of states

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Theoretical Results

We say that a task t can be made equivalent to the goals G
of a classical planning problem by making G the annotated
effects of t
Planning with methods learned by HTN-MAKER is sound,
relative to the goals equivalent to the tasks
There exists a ﬁnite number of input problems in a domain
such that planning with methods learned by HTN-MAKER
on them is complete, relative to the annotated tasks
provided
HTN Planning with a learned domain is more expressive
than STRIPS planning

Classically-partitionable problems, which are sequences of
(state, goal) pairs, are an example of a class of problems
that can be solved using learned methods but cannot be
expressed in classical planning

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Theoretical Results

We say that a task t can be made equivalent to the goals G
of a classical planning problem by making G the annotated
effects of t
Planning with methods learned by HTN-MAKER is sound,
relative to the goals equivalent to the tasks
There exists a ﬁnite number of input problems in a domain
such that planning with methods learned by HTN-MAKER
on them is complete, relative to the annotated tasks
provided
HTN Planning with a learned domain is more expressive
than STRIPS planning

Classically-partitionable problems, which are sequences of
(state, goal) pairs, are an example of a class of problems
that can be solved using learned methods but cannot be
expressed in classical planning

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Theoretical Results

We say that a task t can be made equivalent to the goals G
of a classical planning problem by making G the annotated
effects of t
Planning with methods learned by HTN-MAKER is sound,
relative to the goals equivalent to the tasks
There exists a ﬁnite number of input problems in a domain
such that planning with methods learned by HTN-MAKER
on them is complete, relative to the annotated tasks
provided
HTN Planning with a learned domain is more expressive
than STRIPS planning

Classically-partitionable problems, which are sequences of
(state, goal) pairs, are an example of a class of problems
that can be solved using learned methods but cannot be
expressed in classical planning

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Theoretical Results

We say that a task t can be made equivalent to the goals G
of a classical planning problem by making G the annotated
effects of t
Planning with methods learned by HTN-MAKER is sound,
relative to the goals equivalent to the tasks
There exists a ﬁnite number of input problems in a domain
such that planning with methods learned by HTN-MAKER
on them is complete, relative to the annotated tasks
provided
HTN Planning with a learned domain is more expressive
than STRIPS planning

Classically-partitionable problems, which are sequences of
(state, goal) pairs, are an example of a class of problems
that can be solved using learned methods but cannot be
expressed in classical planning

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Theoretical Results

We say that a task t can be made equivalent to the goals G
of a classical planning problem by making G the annotated
effects of t
Planning with methods learned by HTN-MAKER is sound,
relative to the goals equivalent to the tasks
There exists a ﬁnite number of input problems in a domain
such that planning with methods learned by HTN-MAKER
on them is complete, relative to the annotated tasks
provided
HTN Planning with a learned domain is more expressive
than STRIPS planning

Classically-partitionable problems, which are sequences of
(state, goal) pairs, are an example of a class of problems
that can be solved using learned methods but cannot be
expressed in classical planning

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Evaluation

Experiments measuring coverage in
Logistics-Transportation, Blocks-World, and
Satellite domains

These are common benchmarks from planning
competitions and the planning literature

Begin with HTN domain containing no methods, learn from
solutions to a set of training problems, attempt to solve test
problems with the learned methods
Increase size of training set linearly from 1 to 75 problems
Results averaged over 5 random problem distributions
Logistics-Transportation and Satellite show
rapid convergence to nearly complete domains,
Blocks-World does not

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Evaluation

Experiments measuring coverage in
Logistics-Transportation, Blocks-World, and
Satellite domains

These are common benchmarks from planning
competitions and the planning literature

Begin with HTN domain containing no methods, learn from
solutions to a set of training problems, attempt to solve test
problems with the learned methods
Increase size of training set linearly from 1 to 75 problems
Results averaged over 5 random problem distributions
Logistics-Transportation and Satellite show
rapid convergence to nearly complete domains,
Blocks-World does not

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Evaluation

Experiments measuring coverage in
Logistics-Transportation, Blocks-World, and
Satellite domains

These are common benchmarks from planning
competitions and the planning literature

Begin with HTN domain containing no methods, learn from
solutions to a set of training problems, attempt to solve test
problems with the learned methods
Increase size of training set linearly from 1 to 75 problems
Results averaged over 5 random problem distributions
Logistics-Transportation and Satellite show
rapid convergence to nearly complete domains,
Blocks-World does not

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Evaluation

Experiments measuring coverage in
Logistics-Transportation, Blocks-World, and
Satellite domains

These are common benchmarks from planning
competitions and the planning literature

Begin with HTN domain containing no methods, learn from
solutions to a set of training problems, attempt to solve test
problems with the learned methods
Increase size of training set linearly from 1 to 75 problems
Results averaged over 5 random problem distributions
Logistics-Transportation and Satellite show
rapid convergence to nearly complete domains,
Blocks-World does not

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Evaluation

Experiments measuring coverage in
Logistics-Transportation, Blocks-World, and
Satellite domains

These are common benchmarks from planning
competitions and the planning literature

Begin with HTN domain containing no methods, learn from
solutions to a set of training problems, attempt to solve test
problems with the learned methods
Increase size of training set linearly from 1 to 75 problems
Results averaged over 5 random problem distributions
Logistics-Transportation and Satellite show
rapid convergence to nearly complete domains,
Blocks-World does not

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Evaluation

Experiments measuring coverage in
Logistics-Transportation, Blocks-World, and
Satellite domains

These are common benchmarks from planning
competitions and the planning literature

Begin with HTN domain containing no methods, learn from
solutions to a set of training problems, attempt to solve test
problems with the learned methods
Increase size of training set linearly from 1 to 75 problems
Results averaged over 5 random problem distributions
Logistics-Transportation and Satellite show
rapid convergence to nearly complete domains,
Blocks-World does not

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Results

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Evaluation (2)

Since paper submission we have been working on
planning efﬁciency results
Currently only have results for
Logistics-Transportation
For small problems, FastForward is much faster than HTN
planner with learned domain
For large problems, advantages of HTN planning
overcome lack of focus in domain

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Evaluation (2)

Since paper submission we have been working on
planning efﬁciency results
Currently only have results for
Logistics-Transportation
For small problems, FastForward is much faster than HTN
planner with learned domain
For large problems, advantages of HTN planning
overcome lack of focus in domain

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Evaluation (2)

Since paper submission we have been working on
planning efﬁciency results
Currently only have results for
Logistics-Transportation
For small problems, FastForward is much faster than HTN
planner with learned domain
For large problems, advantages of HTN planning
overcome lack of focus in domain

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Evaluation (2)

Since paper submission we have been working on
planning efﬁciency results
Currently only have results for
Logistics-Transportation
For small problems, FastForward is much faster than HTN
planner with learned domain
For large problems, advantages of HTN planning
overcome lack of focus in domain

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Results (2)

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Conclusions

We have described a new algorithm, HTN-MAKER, for
learning HTN domain knowledge from classical planning
problems and their solutions
We have presented theoretical results showing that:

The methods learned by HTN-MAKER are sound and
complete relative to the set of goals for which annotated
tasks are provided
The learned methods can be used to solve problems that
could not be expressed using the classical planning
knowledge from which they were learned

Our experiments in three well-known planning domains
demonstrated that HTN-MAKER converged to a set of HTN
methods that could solve nearly all problems in the domain

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Conclusions

We have described a new algorithm, HTN-MAKER, for
learning HTN domain knowledge from classical planning
problems and their solutions
We have presented theoretical results showing that:

The methods learned by HTN-MAKER are sound and
complete relative to the set of goals for which annotated
tasks are provided
The learned methods can be used to solve problems that
could not be expressed using the classical planning
knowledge from which they were learned

Our experiments in three well-known planning domains
demonstrated that HTN-MAKER converged to a set of HTN
methods that could solve nearly all problems in the domain

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Conclusions

We have described a new algorithm, HTN-MAKER, for
learning HTN domain knowledge from classical planning
problems and their solutions
We have presented theoretical results showing that:

The methods learned by HTN-MAKER are sound and
complete relative to the set of goals for which annotated
tasks are provided
The learned methods can be used to solve problems that
could not be expressed using the classical planning
knowledge from which they were learned

Our experiments in three well-known planning domains
demonstrated that HTN-MAKER converged to a set of HTN
methods that could solve nearly all problems in the domain

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Conclusions

We have described a new algorithm, HTN-MAKER, for
learning HTN domain knowledge from classical planning
problems and their solutions
We have presented theoretical results showing that:

The methods learned by HTN-MAKER are sound and
complete relative to the set of goals for which annotated
tasks are provided
The learned methods can be used to solve problems that
could not be expressed using the classical planning
knowledge from which they were learned

Our experiments in three well-known planning domains
demonstrated that HTN-MAKER converged to a set of HTN
methods that could solve nearly all problems in the domain

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Conclusions

We have described a new algorithm, HTN-MAKER, for
learning HTN domain knowledge from classical planning
problems and their solutions
We have presented theoretical results showing that:

The methods learned by HTN-MAKER are sound and
complete relative to the set of goals for which annotated
tasks are provided
The learned methods can be used to solve problems that
could not be expressed using the classical planning
knowledge from which they were learned

Our experiments in three well-known planning domains
demonstrated that HTN-MAKER converged to a set of HTN
methods that could solve nearly all problems in the domain

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

Conclusions (2)

Future Work

Reﬁne methods through merging or Reinforcement
Learning-based selection
Study effect of providing more or less information in
annotated tasks

Thank You

Questions?

C. Hogg, H. Muñoz-Avila, U. Kuter

HTN-MAKER

