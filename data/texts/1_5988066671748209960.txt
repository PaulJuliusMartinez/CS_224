VIEW MAINTENANCE

FOR MULTIPLE

UPDATES

Arding Hsu
Siemens Corporate Research, Iw. 755 college Road East
princeton, NJ 08540,.USA

Tomasz Imielinski
. Computer Science Department Rutgers University
New Brunswick, N.J. 08903, USA

s
`,
$3
,,

Abstract
In this paper we generalize methods for incremental view maintenance to deal with multiple updates. This enables us to consider cases when updates are neither restricted to single range(relation) nor to single tuple and could be grouped in. complex transactions.' With a given set of asgumptions, we provide a view simplification algorithm for arbitrary transactions, and a]ao for views expressed in prenex normal form in relational tuple calculus with no restrictions on the number of variables ranging over the same relation. Based on the prefix of a view, our simplification algorithm transforms the view into an UNION-INTERSECTION of simplier views which are cheaper to evaluate. The algorithm doa not require the detail analysis of update transactions and is independent of the database states such that it can be applied at compile-time
Kewwords: View, multiple updates, view simplification.

1. Introduction

As defined in many database systems 141,[I], Ill], 1121,a -view is a set of data values derived from the current database state.

Views can be used to support logical data independence, data

protection, real time queries [5], efficient integrity checking [6],

incremental view maintenance, and multiple design representations

in CAD environments [7], (81. A view may be virtual (i.e., not

physically stored) or concrete (i.e., physically storedmen

a given

original database state is updated, all the views derived from this

database state must be updated to correspond to the updated

database state. A naive appr&ch is to recalculate the view as a

whole with respect to the updated database state. Thii method is

slow and expensive. A better approach is to calculate the updated

view incrementally with respect to the updates and some

assumptions relating to the original view obtained from the original

database state. This is particularly important for maintaining

concrete views. For example, consider a view `HEMP that

contains every employee whose salary is higher than $30,000 on an

employee relation `Em*. When new employees are hired, if we

have the assumption that the instance of "HEMP* derived from the

original database state was stored, then the view calculation of

%EMp* at the updated database state can be reduced to be the

result from the calculation of newly hired employees with salaries

higher than $3O,C00 union the instance of "HEM?`* at the original

permission fo copy wifhouf fee all or part of fhis material is granted provided rhat &he copies are not made or distributed for direct commercial advanfage, the DASfAA copyrighf mice and the fife of the publicafion and ifs date appear, and nofice is given that copying is by permission of the Organizing Commitft?e of tie InterJXItiond
Symposium on Dafabase Systems for Advanced Applications. To
copy ofherwise. or fo republish, requires a fee and /or special permission from the Organizing Committee.

database state.

Several different methads have been proposed to support incremental view maintenanot IO], [3], [lo], and [I]. Most of them only deal with simple (single-tuple, singlerage) atomic deletions and insertions. An interesting practical question is what kind of methods can be used in the caSe of multiple updates which are represented in the form of a complex transaction and affect several relations at the same time. One possibility is df'course to ptiopose a complex method, based on a .deep analysti of the structure of the transaction, but we should not. expect such a method to be very I&,. An alternative is to find a method #ret@ much independent of the structure of the update transaction ,' which is fast enough to efficiently support incremental view maintenance.

In this paper, with respect to a&e given assumptions, we will prop-e a view simplification slgorithm which supports incremental view maintenance for multiple updates. The only information about a transaction which is r&lly considered by our method is whether
the transaction inserts, deletes or both ins~@ and deletes tuples to a particular relation. The algorithm is pre&bassd, which does not need the matrix informatiori of views. Furthermore, the simplification is indenendent of (without accessing) the database state, and can be done at compiie-time (i.e., when a view and its update are defined). After th+.sin@ifieatien, the evaluation of the view at an updated database state is achieved by the evaluation of a LJI'JION-INTERSECTION combination of .simpler" views.

In the following, we provide ba$c notions and definitions in' section 2. In section 3, an overview of the simplification algorithm along with an example is given. The description of the simplification algorithm is presented in section 4. Finally, section 5 gives the conclusions.

2. Notions and Def'initions

Let d := < El' .... k > be a database schema and d :== <

PI' ...t p, > be a -dmatabase state (an instance) of & where &~..+&,, are r&&on schemas and pl$...,p, are their instaM- (relations),

respectively. A view relation sahema Y %dtfined as a relation

schema as l(al, ..7.).,=x

is the name of the view and al, ... J

4 ie a finite set of attributes of v. The iDZtSllCC5 Of 8 view relation

schema are defined by a view derrnition exWss.ion as in [3], which is

m open formula of relaGZ-G&%lculus

in the erenex normal

Corm a9 follows:

x(t) := Q: Er .. Q," Er (P(+, e,,i §{t, t', .... t')) l-1 D-0

where Q' E ( 3, V }, pi is called the ranKt variable of the tuple variable ti and 3 E { E,, -.., e, ) for i - 1, .,., n, t is a free

variable, ti, .... tr, are bound variabies, t' E { tl, ,"., tn } for i = 1,

International Symposium on Database Systems for Advanced Applications

Seoul, Korea; April, 1989

- 233 -

.... k, P is an arbitrary closed f&muls. and S is an onen formula
with a conjunction of. equality atoms. Each atom in S includes exactly one indexed t variable. An indexed variable t.5 appears in S iff 5 E { ar, ..... ak ), and all attributes of _Vappear exactly once in S.
For a database state d = { pr, .... p, }, the closed formula w,,..., t,) is a & membership predicate that selects qualified
tuples from pa, .... p, and the open formula S(t, tr, .... tk) is a v& -s-election formula that defines each view tuple based on the selected
p tuples. An instance, a *, of a view relation schema 1 It"a';;,t%sse state d k { p r, ..,, p, } is obtained by evaluating &he view definition exnression with its range variables instantiated by then corresponding relations in ( pl, .... p, }.
When a given original database state is updated, all the views derived from this database state mnat be updated to correspond to the updated database state. We consider multiple updates which affect several relations at the same time. Our view of a transaction is very general, we only consider whether the transaction inserts or deletes tuples from particular relations. For us, it does not matter what is the order of these operations inside the transaction. For a database state d := < pr, .... p, >, we, use the notation u := < .... Api ,..., Vpj ,.__> to denote an update transaction of d, where Api is the set of tuples inserted into pi and 4pi n pi = 0, and Vpj is the set of tuples deleted from pj and Vpj ,_Cpi.
Since only the prefii information is considered, the notation V(t, Q' : 4, .... Q" : 3 is used to denote a view definition expression x(t). The instantiation of x(t) with respect to an original database state d is denoted as v := V(t, Q' : rl, .... Q" :
r,), which is called the original view expression of `J(t) at the
databsse state d. The instantiation of x(t) with respect to an updated database state d' is denoted as V" := V(t, Q' : sr, .... Q" : s,), which is called the updated view expression of l(t) at the database state d'. To support our prefix-based algorithm,.instead of constructing the updated database d', we can reconstruct the updated view expression by incorporating the update u iato its original view expression. That is, si is now constructed with ri, 4ri, Vri, and two set operators `f'[union) and `-`(difference).

Example 1: Let a database schema be Mana,ger(name,

dept, salary) and -(name,

dept, salary). Suppose

Bbdanager(name, salary) is a view schema which represents

the managers in which everyone's salary is higher than

every employee's salary in his/her department.

The view definition expression of "BManager" is expressed as
HMmaner(t) := 3,r, f Msna ,rVc E w (m.dept = e.dept -> msalary > e.sda7ry9 A (t.name = m.name A tsalary = m.sdary).

Considering a database state d in which:
Manager = f {Adan, Shoe) 30000), (Mike. Toy, 20000) ), and
Emp = I (YIB, Shoe, 35000). (John, Shoe. 25000). (Mary. Toy, 19000) ,

(Don, Toy, 16000) , (Peter, Toy. 18000) I.
By evaluating the view ddnition exjhkon Hmanager(t) at the giving database state, we obtain a view of Hmanager as { (Mike, 2ODOO)}. If an update u :== < AManager >, then the original view exprcszdon Ifmanager of Hmananer(t) is Hmanager(t, 3:Manager, V:Emp) and the updated view expression Hmanagers of Hmanager(t) is Bmanager(t, ZbManager+&Manager, \d:Emp).

By giving an updated view expression Vu, our.simplification algorithm will generate a simplified.view expression Vs which is a set of view expressions (subexpressions) connected by "u' and l n". For a view expression V' := V(t, Q' : s'~, ... , Q" : s's), we use the
symbol Iv'] to denote the evaluation result of V'. A range s'i is

called an e-range if and only if Q' = 3 and a u-range if and only if

Q' = V. If a range s'r is preceding (appears to the left of) a range

slj in V', then s't is followed by s'~ and s'~ is preceded by s'r. An

e-range is called a free m

if and only if it is not preceded by

any universal quantifier, otherwise, it is called a nonfree e-range. A u-range is called a free u-rane if and only if it is not preceded by

any existential quantrfier, otherwise, it is called a nonfree u-range.

A nonfree u-range is called an S'v-range if and onlye

only e-

range that precedes this u-range is a free e-range. That is, a nonfree u-range is not an w-range if it is preceded by 33 or tR. We also

`need to define the substitution operator `I'. Suppose x and y are

two character strings, then "x 1y" means to substitute the string y

for the string x. Furthermore, as indicated in Balustein's thesis,

certain restriction must be put on view definition expressions in

order to generate reasonable views. Unreasonable views are usually

derived from view definition expressions in which u-ranges are involved in S part of view definition expressions. To avoid this situation, we will also restrict ourself to compact views as defined in

[31=

where tj E { tl ,...., tj } for j = I,..., k. That is, only free e-ranges are involved in the S part of view definition expressions.

3. Overview

of Simplification

Strategy

The key problem in view maintenance is how to evaluate the

updated view expression ezently.

Therefore, the goal of view

simplification is to transform an updated view expression Vu into a

view expression Ve which is "equivalent* to Vu and is "simpler' to

evaluate. We say that two view expressions V' and V* are eauivalent, indicated by the symbol `= `, if and only if same evaluation result is obtained from these two view expressions, i.e., [ V' ] = [ V* ). The simplicity of view expressions is measured by their evaluation spaces. The evaluation space of a view expression

V' := V(t, Q1:s'l,...,Q":s',)r denoted as EVAL(V'), is defined as s'~

x...x dn, where `x' is the Cartesian product operator. We say that a

view expression V' is simpler than a view expression Vu iff EVAL(V') c Evqv").

- 234

-

.

;;

.`,<.

`.. ..~. :;,

It turns out that WC do not have to evahrate the updsted view expression as it stands. With some given assumptions, the updated

view expression Vu can be transformed to a simplified view

expression Vs by decomposing V" into a combination of view

subexpressions with set operators "U" and "f3. and then

eliminating some of the view s&expressions.

Therefore, the

simplified view expression V' of the updated view expression Vu is a combination of view subexpressions. The evaluation space of a

combination of view subexpression is defined as the union of the evaluation spaces of these view subexpressions. In the following, we

will give an example to describe the general concept of our

simplification afgorithm. But before that, we have to introduce two important notions: True-subranges and False-subranges.

For a given view expression V' := V(t, Q':s' ,,..:,Qn:Zn), True

subranges and False-subranges-are defined for e-ranges in V' with

respect to its view membership predicate.

Let V'P :=

V(Q1:~`l,...,Qn:s',) denote the view membership predicate

... Qt"n l s'n (F(t,,..., t,)) of V', then we say that a tuple

e-range di contributes to the satisfaction

of

V(3:~`~,...,3:~`~~~,3:w,...,Q":s',,)

(replaee all the quantifiers

(Q: Es, 11
`w' in an
V' iff P
preceding

sli with `3') is `true'. Otherwise, we say that `w' does not contribute

to the satisfaction of VP. A subset xii of s'~ is a Truosubrange of s'.I in V' iff for every tuple `w' in x'~, `w' contributes to the satisfaction

of V'P and I!!!(+] x's is `true'. On the contrary, a subset x'~ of sli

is a False-subrange of s'~ in V' iff for every tuple `w' in x'~, `w' does

not contribute to the satisfaction of Vyp. We use the predicate

Truc(~`~, V') to indicate that xii is a True-subrange of si in V' and

the predicate Fslae(~`~, V') to indicate that x'~ is a False-subrange of

si in V'. We also say that x'~ is the maximal Truesubrange of sli in

V' if x'~ is a True-subrange and it contains &I of the `contribute'

tuples in sli. Note that the complement set of xii in this case is the

maximal False-subrange of s'~ in V' and it contains 2 of the `not

contribute' tuples in s'~.

Now, we are ready to give the following example.

Example 2: Let VP := V(t, 3 : Manager, V : Emp) be an

original view expression and V" := V(t, 3 :

Manager+AManager,

V : Emp+AEmp)

be its updated

view expression.

In addition to know that the original view resulted from the evaluation of the original view expression Ve is stored, resume we have
1. The maximal Truesubrange `IManager of Manager in the original view expression V".

2. The maximal False-subrange FManager of Manager in the original original view expression V".

With `TManager' and `FManager', the updated view

expression can be expressed as V(t, 3 :

TManager+FhIanagerfAManager,

V : Emp+AEmp).

To

simplify the updated view expression, we first decompose

Vu into a UNION-INTERSECTION

combination of

subexpressions as

( V(t, 3 : AManager, `rr : AEmp) n V(t, 3 : AMarmger, V : Emp) ) u V(t, 3 : FM8rmgcr, V : Emp+AEmp) u ( v(t, 3 : TMsnager, V : Emp)) n V(t, 3 : TMan8g6, `d : AEmp) )

g Then, we eliminate those subexpressions which don't affect the result of the final view e8hmlstIon. We will examine these subexpressions one by one. In the third subexpression'V8 := V(t, 3 : F'ManageI, V : EmpfAEmp),
the range `IrManag& is 8 False-subr8nge of the original view expression V" (i.e.,. F @Manager, v") holds). If we can determine thst *2 8nager' is 8 False-subrange in Vs (i.e., FalsefFManager, V,$old& then by the definition
of False-subranges, we can eonelude that V1 is `empty'.
Since V8 is in 8 union, 50 it can be eliminated if it is
`empty'. This determination haj to be done at compiletime. In Vs, if every tupls `w' in FMauager does not
contribute to the satisfaction of V(3 : Ehkknagtr, V : Emp+AEmp), then by the dermition of False-subranges we can conclude that FMansger is 8 False-subrange in Vs.
Since V(3 : w, V : Emp) is `false' (FManager is 8 Falsesubrange in v"), by the,naturt of the universal quantifier, V(3 : w, V : Emp+AEmp) is still `false': Therefore, by examing the relationship between' the ranges of a vitw expression and its original view expression, we can conclude that Falre(Fhj8n8ger,V.J holds.

In the fourth expression, V4 ,:= V(t, 3 : Thkager, V :

Emp), the range `Tk&ger'

is the maximal True-subrange

of the original view expression Vc and `Emp' is not

changed, therefore, [ V4 ] = [ Vs ] and V4 can be replaced

b-IV=`].

With the given assumptions, wt can not eliminate the

other subexpressions, therefore, we have the simplified

expression Vs a.5

;

( V(t, 3 : AM8nager, V : AEmp) n V(t, 3 : AManager, V : Emp) ) U ( [ V' ] II V(t, 3 : TManager, Y : AEmp) )

If we have the database schem8 g ;= < Manager(name, dept, salary), Emp(nama, dept, salary) >, and a view definition expression
x(t) = flm E M,a ,,Ve d Em (m.dept =e.dept -> m.salary -Z&Z 12Wg, n (Lnsme = m.oame)
that defines views in which the managers whose salaries are 92,ooO higher than every employee's salary in their department, then the simplified view expression Vs can be interpreted as the union of the following two sets:
1. The newly hired managers whose salaries 8re $2,000 higher than the salruies of the old employees BSwell as the new employee in their department.
2. The intersection of managers in the original view
and the managersin `ThJanager whose salaries are
$2,000 higher than the newly hired employee's .. salaries in their department.

- 235 -

From the above example, one can SN how simplification
assutiptione can be used ti deeompwc a Iatgt evaluation space into
a collection of smalkr evaluation qmeee and then eliminate some of
them.

EJow much have we saved? Suppose we have the original database state d :== < Manager, Emp > where

Wonoger

= < (Adam, ahoe, 30000),
(Nlke,`%oy, 40000), (f.tsa, autd. 460001, (Roy, food, 35000) 1.

and

Emp = < (Jlu. shoe, 36000,. (John. toy, 34000). (Tom, toy, 30000). (Ken, auto, 420001, (Bob, auto, 44000). (Bark, food, 34000)

I.

An update u := < AManager, AEup >, where
AManager = i (Mary, flower, 44000) I, and Amp = I (Dave, flower, 24000).
(Ellis, flower, 36000), (Paul, toy, 41000) >..
Two subranges

`manager = < &Ike, toy, 40000) ), and FManager = { (Adau, shoe, 30000),
(Lisa, auto, 45000), (Roy, food, 35000) }.
The comparison of the sizes of the evaluation spaces for VU and p is the following:

the size of EVAL(V") = 5 x 9 = 45

thcsireofEVAC(~)=lx3+1xB

+1x3=12

4. View Simplification
In the previous example, we have demonstrated that with respect to a given set of assumptions, our view simplification algorithm consists of two steps, elimination 4 decomposition. The elimination procedure removes the subexpressions which can be dlminated under the assumptions. The decomposition procedure equivalently ( thii will be formally defined later) transforms the given updated view expression into `a- combination of subexpressions connected by set operators `u' and `n'. In the following. we present the elimination procedure,, the decomposition procedure, and the view simplification algorithm S". But first, we will formally define the kind of assumptions which are used in the simplification algorithm.
View simplification assumptions can be the status of the database states, (e.g., whether the view derived by evaluate the original view expression is a concrete view or not, True-subranges, False-subranges, etc.), the structure information from view expressions (e.g., the prefix, the matrix, etc.), the structure of updates (e.g.,insertions, deletions, inserted elements are employees earning more than S3O,OOO, etc.), etc. In general, view simplification depends on the amount of available simplification assumptions. If we know everything that is.relevent to the view maintenance, then no evaluation is necessary. On the contrary, if we know nothing, then the updated view expression must be evaluated as a whole. In between, the ,degree of simplification

depends on tha amount of assumptiona that are given. In the following, we give the arrumptions that will be used in our simplification algorithm.
In addition to view expressions and updates M defined in the previous sections, iusumptians used for view simpliieatian are given a¶ follows.
View Simplitica~ion Assumptions: Let d := < pr,..., p, > be a database state, u :=; < .... Api ,._.., Vpj ,... > be an update, and l(t) := V(t, Q1 : or, ... , Q" : I,) be a view definition expression. Then, a set of view simplification assumptions, denoted as K", which are available to us are the following:
1. The original view(/ V" J), derived from the original view expression Vo := V(t, Q' : rl, _.. , Q" : r") is stored.
2. For a list of e-ranges, rr, .... r"' in the original view expression Vc, where rr, .... r'" E { rr, .... rs 1, we sssume that their True-subranges, denoted ss Tr', .... TrmJ are stored. That is, Truc(Tr', v"), .... and True(Trm, v") hold.
3. For a list of e-ranges, rl, .... rm in the original view expression Vo, where rl, .... rm E { rl, .... rs ), we assume that their False-subranges, denoted as Fr', ...t Fr"`, are stored. That is, FaIue[Fr', Vc'), .... and F&e(Frm, V") hold.
In the example 2, for a given view expression V' we have shown how to determine Falscsubranges and Trubsubranges from the given False-subrangcs and True-subrangcs of the original view expression. This determination procedure must be done at compilctime. That is, by giving a set of wumptions K", with respect to an e-range s'~ in a view expression V', how can we determine Fahec(Fr. , V') (True(Tri , V')) is preserved with respect to the given FalsC subrange Fri (True-subrange Tri) in Vc? In general, this is achieved by examing the relationship between the ranges of a view expression and its original view expression. Formally, this can be stated in the following two theorems.
False-subrauge determination theorem: Let V' := V(Q' : s'~, , Q" : s',) be a view expression, V' := V(Q1 ;y'lL..e' Q" : r',) be 1`t s original view expression, and Fri > Then, the False-aubrange Fri is said to be &served in V' (i.e., False(Fri ` V') holds) if the following conditions are satisfied:
1. For every u-range s'~ which follows s'~, r'i~`~ = 0. 2. For every u-range s'~ which precedes s'~,s'cr'j = 0. 3. For every e-range s; which follows sCjls>di = 0. 4. For every e-range sFjwhich precedes s'~, ~`~-r'~ = 0.

- 236 -

: .".

True-subrange

determination

theorem: `Let V' :=

V(Q' : s'r, , Q" : e',) be a view expression, v := V(Q' :

ryl, , Q" : r'") be its origind view expreseion, and Tr, di = 0. Then, the True-subrange Tri is said to be

preserved in V' (i.e., Trua(Tri , V') holds) if the following

conditions are satisfied:

..

1. For every u-range s'~ which follows s't, s"~- ryj = b. 2. For every u-range syj which precedes s;, r'j - s; = 0. 3. For every e-range slj which follows s'~, if Trj is
available, then Trj-dj = B, otherwise, r'j-s'j = 8. 4. For every e-range sIj which precedes s'~, if Tri is
available, then Trj-s'j = 6, otherwise, rIj-s 'j -73.

With respect to the given set of assumptions, efficient view maintenance can be achieved by reducing the evaluation space of an updated view expression. Since evaluation spaces are defined on ranges of view expressions, the elimination of evaluation spaces can be accomplished by eliminating their corresponding view expressions.
As we demonstrated in the previous example, the elimination of view expressions is achieved by replacing a view expression with the original view [ Vc ] or by removing a view subexpression. In the following, we present rules to identify the view expressions which are replaceable or removable.
Let. V' := v(t, Qi : s' l,..., Q" : 9,) be a view expression and L@ := V(t, Q1 : r'r,..., Q" : r'e) be its original view expression. Then, it is obvious that [ V' ] = [ Ve ] if for every range s;, syi = rli. If this is the case, then V' can be replaced by [ Ve ] and no evaluation of V' at run-time is necessary.
Can we do the same thing` if s'~. # ryi? It is trivial if s; - r'i + 0, then the above statemeut does not hold. How ahout sli - rli = 0? Let us consider the caSe that s; is an e-range. It seems that if Tri is a subset of s'~ and Tri is maximal, then the above statement should still hold. If si is a u-range and r; - sli # 9, then for any free c-range s;, Trj = s'~ and .Tr, is maximal. This is shown in the following rule.
View Elimination Rule 1: Let V' := V(t, Q' : s'~,..., Q" : s',) be a view expression (subcxpreecion) and V' := V(t, Q' : r'r,..., Q" : r',) be its original view expression. Then, V' is replaced by [ Vo ] if one of the foilowing conditions is satisfied:
1. For every u-range B'~,di = r'i, for every e-range B'~, Trj - s'~ = 0 if Trj is available and it is maximal, otherwise, s'~ = r'j.
2. For every u-range s'~' .sli - rli = 6 and there exists a u-range s'i, rli - s'i # 0, for every free e-range s'. s'lj = Trj and Trj is maximal, and for every nonfrji e-range dt, Trk - s'~ - B if Trk is available and it is maximal, otherwise, sit = r'k.

: ._

1 ,>

_ :_

`. _, 1:.

I ;_,.
:. "., ",' .- il

The next step is to idanti$ ~&obs'tietW@?&eions*wbich can be removed. If the result of a view expMsion V' can be determined to be `empty' without run-$Me etiu+%iun:S~~.V' occurs in a union expression, then from the nature of the sgt;operator `U', V' can be removed. From the defiiition of Fals~suhranges, the result of a view expression V' is empty if tbere,exists an e-range s'~ in V' and
Palse(e'i , V') can be derived. Tbiais shown in the following rule.
i, L
View Elimination Rule 2: Let V' := .y(t;`Q' : s'~,".., Q"
: 3,) be a view expression (subexpression) and V" := V(t,
Q' : r'r,..., Q" : r.`J be it+ oiigirnkview expression. Then, V' can be removed if V' occura in a union of view expressions and there exism arj `o-range s'~ in tr' and Faltse(~`~ , V') holds.

We say that a view expression can be eliminated iff it can be

replaced or it can be removed& If a view expression can not be

eliminated, view decomposition is sometimes helpful in generating

view expressions which can be eliminated. Thii caq be shown in the

following example.

i

,:

`_ -.

`,' i

Example 3: Let V' :=- `V&, . 3 .: il, `?f-z` `%,+I&,, r: r2+Ar3) be a v&w ex&seibnpnd Ve & y&7? ;..i,, V : t2,
3 : rJ be its original view e&seion.

From the view. eli&n&& rule l,,$Y. can pot, $.e,replaced. But if we can decpmpoee,V' inap theform $ , ,

Then, from the, False-subr$;~~`determi6a~d~ theorem, we, c& conclude that .Fr2 is"6 i%&e&ubrange.`i`u. the second view expression. Th&%re, %e,,reault & the &cond view expression ia `empty'.' :,S&ce it ik,`in .a ~unionl it can be eliminated.
,, i ,: .' 2
The decomposition of L view axpressien into subecpressions is achieved through m Icoomnositione. . :For `a giuen view expression, the range decompositions. are aehicved~ by decompoeing its ranges into subranges one at a time. By decomposing one range into two subranges, two .~enbexpr~$nrm qw+roduced which are connected by a set operator. `U' or !o$. ,I :. .-
:. .;.
Semantically, we only allow eauivalent ,deMmpoaitions. That is, if V, and Vs are two subexpressions af.8 ~tiew bxpremion V',
which are produced by decompusing'"a -rang+ in V', then, this decomposition is an equivalent decbm@tioli if and only if V' = V, op Vs, where op is a set opiraCor.W' or *n': .' `.
I, i
To achieve equivalent decomposition, certain criteria have to be satisfied by decomposed.ranges. Also, since t&r purpose of view decomposition is to help the generation of view expressions which can be eliminated, we only &compose view expr&ions which cannot be eliminated. This is shownin the Gallowing rules,

- 237 -

Maw DeoompoMon Rules:
F- ree 3Wdecomws ition -rule: Let a'i be a free e-range in a view expression V' which cannot be eliminated, and xi and yi be two subranges of s;, where s'i = xi + yY Then, V' is replaced by V'(n'j 1xi) u V'(s'$ [ yi).
Nonfree 3-Vdecomrms ition .-r.ule* Let s; be a nonfree t range in a view expression V' which cannot be elimiated, and xi and yi be two subranges ol s'~, where s'~ = xi + yi. Then, V' is replaced by V'(S; 1 s'& u V'(s; 1 xi) if F&o(xi ,V') holds or Falao(yi, V') holds.
Nonfree V-Vdecomposition &: Let sli be a nonfree urange in a view expression V' which cannot be eliminated, and xi and yi be two subranges of s'~, where s: = xi + yi. Then, V' is replaced by V'(S'~ ) xi) n V'(sai ) yi) if sli is an 3V-range.
The decomposition of an e-range in a view expression V' will produce two subexpressions connected by a `u' operator = V, u Vz.
From the nature of free crangcs, free e-ranges can always be
quivalently decomposed ss long ss the decomposed subrangea, xi and yi, +re defined in the language syntax and 4 = xi + yi. Can we do the same thing for non-free e-ranges?
The answer is `no'. The decomposition of a nonfree e-range in a view expression V' will produce two subexpressions connected UI VI u VS. From the nature of the operator `u' il the evaluation result of one (aesume to be VJ of the subexpressions is an `empty' set, then the result of the expression V' is eqnivalent to the result of the other subexpreasion. that is, V' = Vr. Since the result of V, dom not a&et the result of V', we can have V' II V, u V, and an equivalent decompoeitioo is aebieved. So, we have to identify some subranges of an e-range of a view expression, which have the above property. From the definition of False-subranges, False-subranges of e-ranges of view expressions satisfy the above property.
The decomposition of a u-range in a view expression V' will produce two subexpreasions connected ae V, fi Vo, No free u-range decomposition has to be considered since there are no free u-ranges in compact views. For nonfree u-ranges, certain conditions must be satisfied for a&i&g equivalent decompositions.
Suppose a nonfree u-range in a view expression is an B-range. The decomposition of this u-range will produce two view expressions connected by a set operator `n'. From the nature of the set operator `f~`, the intersection of the results form two view subexpressions will equal to the result of their decomposing view expression. Can the abovt statement be extended to nonfree uranges which are not 3V-ranges? The enswer is `no. We have a combination problem as shown in the following example with a urange preceded with 33.
ExampIe 4: Let V' := V(t, 3 : Tr,, 3 : Tre, V : r,+Ars)
be a view expression and V" := V(t. 3 : TrI+Fr,, 3 : Tr*+Frr, V : rs) be its original view expression.

Suppose we decompose V' into the form of
V(t, 3 : TrlI 3 : Tr2. V : r.J (V,) n V(t, 3 : Tr,, 3 : Tr2, V : Ar,). (V.J

Thii is net an eq&dent decomposition and it can be shown by giving a datab.bssestate d, an update u, and a matrix m.

Suppose by giving a matrix m, th'e view expression V'(t) := 3tl E Trl 3$ E Tr2 `t3 E r3+Ar3 ( tya + tp # t3.a) A (t.a = t,.a), where the ranges and the view schema are
unary ranges with one attribute `a'.

Suppose d is a databwe state in which

Tr,=(7.3), Tr2={5,g), r3 = { 8 , 16 }, and
u is an update in which

Ars = (12).

At the databese state d and the update u, the above decomposition is not en equivalent one since

IV]=0
IV, I = l 7,3 1,
Iv21=17.31,~nd

"

which is not equivalent to V'.

For a given updated view expression Vu, view decomposition is achieved by recursiveIy applying the above decomposition rules. The decomposition procem can ho be described as the construction of a UNION-INTER (union-intersection) binary tree with the root node denoting the updated view expression and the led nodes denoting the finst subexpressions. We also say that a view expression hss been maximally decomposed if none of the decomposition rules can be applied on any of its leaf-subexpressions.
Having presented the view elimination rules and the view decomposition rules, we now present the simplification algorithm Sv and then demonstrate it with an example.

simpl&c8fion d6O&hm

S": with respect to a given set

of sssumptions K", the simplification algorithm for an

updated view expression Vu is the following:

1. Maximally decompose the view V" by applying the decomposition rules.

2. Eliminate all of the subexpressions which can be eliminated by applying the elimination rules.

3. Return the result from the previous two steps as the simplified view expression V'.

.

-2?8-

The following example demonstrates how to derive a simplified view expression from an updated view expression with respect to a given set of assumptions K' by applying the simplification algorithm S".

Example 6: Let Vu = V(t, 3 : ManagerfAManager, Emp+AEmp) be an updated view expression and V:= 3 : Manager, V : Emp) be the original view expression.

V: V(t,

By applying the decomposition rules, the updated view expression can be maximally decomposed into the form of

( V(t, 3 : AManager, n V(t, 3 : AManager, u V(t, 3 : FManager, IJ ( V(t, 3 : manager, n V(t, 3 : TManager,

V : AEmp) V : Emp) ) V : EmpfAEmp)
V : Emp)) Y : AEmp) )

Let us denote the five subexpressions as V,, V2, V3, V4,

and V,, respectively. The subexpressions V, and V, can

not be eliminated since the *range AManager will

contribute to the evaluation of the updated view. The

subexpressions contains an e-range FManager which is the

False-subrange of the e-range Manager in v". From the

False-subrange determination

theorem introduced in

constraint simplification, we know that FManager is still a

False-subrange in V3. Therefore, it can be eliminated by

applying the view elimination rule 2. From the view elimination rule 1, the subexpression V, is a replaceable

subexpression and can be replaced by [ Vo 1. The subexpression V5 can not be eliminated since the insertion
of some tuples into `Emp' may make some tuples in TManager no longer contribute to the updated view. Therefore, after elimination, we have the simplified expression v in the form of

( V(t, 3 : AManager, V : AEmp)
n V(t, 3 : AManager, V : Emp) ) u ( [ V' ] n V(t, 3 : TManager, V : AEmp)

)

5. Conclusions

We have provided a view simplification algorithm based on

the analysis of the prefixes of view expressions for multiple updates.

The algorithm does not depend on the detail analysis of transactions

and is applied at compile-time.

With respect to a given set of

assumptions, an updated view expression is transformed to a set of

subexpressions eonnected by "U* and `n" through view elimination

and view decomposition.

Another interesting issue which has not been fully addressed in

this paper is the completeness of the simplification algorithm. We

say that a simplification algorithm is complete iff there is no further

simplification is possible after the application of the algorithm. In

general, however, the notion of completeness of simplification
algorithms should be carefully defined. It depends on tbe amount of

assumptions used in simplification.

An algorithm which was

complete may no longer be complete when more mumptions are

available. For example, an algorithm which was complete with

using prefii for simplif&tion

may no longer be complete when

matrix information is considered. Because of lack of space, we will not treat this topic in this paper.

References

PI A&&an, M., et. al.
System R: Relational Approach to Database Management. ACM Transactions on Database 5'ystems l(2), June, 1976.

PI Blakeley, 3., Larson, P., and Tompa, F;
Efficiently Updating Materialised Views. In International Conference On Management of Data.
ACM/SIGMOD, 1986.

Blaustein, B. Enforcing Database Asscrtion~~ Techniques and
Applicationa.
PhD thesis, Aiken Computation Laboratory, Harvard University, 1981.

I41 CODASYL. CODAS%!, Daia Eke Task Group April 71 Report. Technical Report, ACM New York, 1971.

151 Gardarin, G., Simon, E., and Veriaine, L. Querying Real Time Relational Data Bases. In IEEE-ICC International Conference. May, 1984.

ISI Hsu, A. and Imielinski, T.
Integrity Checking for Multiple Updates . In International Conference On Management of Data.
ACM/SIGMOD, 1985.

171 Hsu, A., Hsu, L., and Ulrich, P. A Design Environment that lntegrstas Tools, Database, and

User Interface.

In International

Conference on Co&.wter Design. New

York, 1984.

@I Hsu, A. `&d Hsu, L.
HlLDA: An Integrated System Design Environment. in international Conference on Computer Design , 1987.

PI Koenig, S., Paige, R.
A Transformational Framework for the Automatic Control of Virtual Data.

WI Shmueli, 0. and It& A. Maintenance of Views. In Intcrtlational Conference On Management of Data. ACM/SIGMOD, 1984.
IllI Stonebraker, M.
The Design and Implementation of INGRFS. ACM Transactions on Databaac Syatcms l(3), Stpt., 1976.
WI Zloof, M.
Query-by-Example: a data base language. IBM Systems J 16(4), 1977.

- 239 `-

