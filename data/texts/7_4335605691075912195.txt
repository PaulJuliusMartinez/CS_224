Submitted for review for the ACM SIGGRAPH conference proceedings

Exact Evaluation of Piecewise Smooth Catmull-Clark Surfaces

Using Jordan Blocks

Jordan Smith
UC Berkeley

Doug Epps

Carlo S´equin
Tippett Studio UC Berkeley

(cid:3)

Abstract

Catmull-Clark subdivision surfaces with sharp and semi-sharp edge
and vertex tags are an industry standard for representing smooth
surfaces of arbitrary topology with sharp features. An algorithm
for constant-time exact evaluation of smooth portions of Catmull-
Clark surfaces exists. We introduce a new technique for constant-
time exact evaluation of near inﬁnitely sharp edges and vertices,
using a Jordan decomposition of the subdivision matrix.
Keywords:
smooth, exact evaluation, Jordan decomposition

Catmull-Clark subdivision surfaces, piecewise

1 Introduction

Constant-time evaluation [Stam 1998] of Catmull-Clark sur-
faces [Catmull and Clark 1978] near smooth extraordinary vertices
greatly increased the ease of use of this free form surface primitive
in graphics and CAD. The per quadrilateral (u; v) parameteriza-
tion has made subdivision surfaces compatible with standard CAD
primitives such as NURBS. Sharp and semi-sharp edge and vertex
averaging rules [Hoppe et al. 1994; DeRose et al. 1998; Biermann
et al. 2000] make Catmull-Clark surfaces an even more powerful
and descriptive modeling primitive for CAD, allowing for inten-
tional breaks in continuity to deﬁne sharp features. Current meth-
ods for evaluating surfaces near these features rely on performing
repeated subdivisions until the control structure approximates the
limit surface within some tolerance. It is then possible to push the
control points to their limit positions and bilinearly interpolate val-
ues across an inexact surface patch. In some applications, the exact
solution near these sharp features is critical, e.g. mechanical mod-
eling where these features may correspond to areas of particularly
tight tolerances. We present a new approach for the sharp edge and
vertex rules [DeRose et al. 1998] supported in the RenderMan in-
terface [Pixar 2000] that enables the constant-time exact evaluation
of patches adjacent to corner, crease, dart, and spike vertices (Fig-
ure 1) by employing the Jordan decomposition [G. Strang 1988] of
the local neighborhood subdivision matrices.

2 Basic Approach

In order to perform constant-time exact evaluation, a subdivision
scheme must have the following two properties. First, the subdi-
vision operator must at each iteration introduce new regions that
can be described by known parameteric functions, and in the limit,
the union of these regions must converge to cover the entire surface
area. Second, it must be possible to perform an arbitrary number
of applications of the subdivision operator in a constant amount of
time. A previous method [Stam 1998] has shown that these prop-
erties hold for the smooth Catmull-Clark subdivision scheme. We

(cid:3)e-mail: (jordansjsequin)@cs.berkeley.edujdoug@tippett.com
This work has been submitted for publication. Copyright may be
transferred without further notice and the accepted version may then
be posted by the publisher. Unauthorized viewing, duplication, and/or
distribution are prohibited.

3

2

4

(a) Smooth

(b) Dart

1

2

2

1

5

1

1

1

2

2

1

3

(c) Crease

3

2

4

1

5

(d) Spike

(e) Corner

(f) Corner

Figure 1: Examples of the ﬁve different extraordinary vertex types
for piecewise smooth Catmull-Clark surfaces. Black thick lines and
squares denote sharp edges and vertices. Red thin lines and cir-
cles represent smooth edges and vertices. The numbers indicate
the quad number q within each wedge; the maximum number is the
valence n of the wedge.

now show how to extend this work to handle the remaining cases of
patches near inﬁnitely sharp features.

2.1 Review of Smooth Vertex Method

In the smooth evaluation method [Stam 1998], the Catmull-Clark
subdivision rules generalize uniform bi-cubic B-spline surfaces to
meshes with vertices of arbitrary valence. In the regular regions of
the mesh where the vertices are all valence n = 4, the surface is
a uniform bi-cubic B-spline. Smooth extraordinary vertices have
valence n 6= 4 (Figure 1(a)), and they are averaged by a valence-
speciﬁc smoothing rule. The subdivision operator near one of these
vertices creates ever shrinking rings of regular B-spline patches that
converge to the limit position of that vertex [Reif 1995]. The local
averaging rules can be expressed by the extended subdivision ma-
trix (cid:22)A, and each application of it generates the control points for
three regular B-spline patches fU; U V; V g and a fourth patch (cid:8) that
is a contracted topological copy of its parent, similar to Figure 3(a).
Any parametric location (u; v) 2 ([0; 1] ; [0; 1]) within the patch,
other than the origin, can be evaluated by repeatedly subdividing a
number of generations g = dmin ((cid:0) log2 u; (cid:0) log2 v)e, at which
time the parametric point is contained in one of the three regular B-
spline subpatches. Then the transformed parametric values ((cid:22)u; (cid:22)v)
can be substituted into the B-spline polynomial to compute the re-
sult. For a stationary scheme such as this, performing g subdivi-
sions is equivalent to raising the constant 1-patch-ring subdivision
matrix A to the power g, which can be achieved in constant-time by
diagonalizing A into its eigen decomposition.

For the smooth Catmull-Clark subdivision rules, the A matrix

1

Submitted for review for the ACM SIGGRAPH conference proceedings

is stationary for the regular neighborhood of a quad patch with a
single extraordinary valence vertex and all the surrounding facets
also being quads. After at most two complete subdivisions of a
closed, smooth Catmull-Clark mesh, all of the quads have such
a regular neighborhood, so this technique can be applied. The
same technique with the same A matrix can be used to perform
exact evaluation of Catmull-Clark surfaces with semi-sharp edge
tags [DeRose et al. 1998]. Semi-sharp edges make the subdivision
scheme non-stationary, but only for a ﬁnite number of generations,
after which the entire mesh becomes a smooth Catmull-Clark sur-
face. Inﬁnitely sharp edges and vertices are present throughout the
subdivision generations so a new method must be introduced.

2.2 Behavior Near Sharp Features

We extend the smooth method to the case of piecewise smooth
Catmull-Clark subdivision. Vertices along chains of sharp tagged
edges are averaged by the uniform cubic B-spline curve rules rather
than the surface averaging rules. The averaging of these crease ver-
tices is only dependent on vertices along the curve, and this curve
creates a sharp boundary across which no surface smoothing in-
formation is passed. These modiﬁed averaging rules lead to four
additional extraordinary vertex cases, and we will address the eval-
uation of patches near vertices of these types.

A dart vertex (Figure 1(b)) has one sharp edge incident on it, but
it is still averaged by the smooth Catmull-Clark vertex rule, form-
ing a transition from the feature curve to the smooth surface. A
crease vertex (Figure 1(c)) has two sharp edges incident on it, and
it is smoothed by the B-spline subdivision curve rule. A spike ver-
tex (Figure 1(d)) is tagged not to move, while the rest of the surface
around it follows the standard Catmull-Clark rules, leading to ge-
ometry resembling the tip of a cone. A corner vertex is deﬁned to be
a vertex with 3 or more sharp edges incident on it (Figure 1(e)), or a
vertex with 1 or more sharp edges where the vertex is also tagged to
not move (Figure 1(f)). Similar to the smooth extraordinary vertex
case, the behavior of the surface near these extraordinary vertices
is a shrinking ribbon of B-spline patches (Figure 3), (details in Sec-
tion 4.1).

For any quad patch q next to an extraordinary vertex, the be-
havior of the ribbon of B-spline patches as they converge to the
extraordinary vertex is deﬁned by the subdivision rules of the lo-
cal neighborhood, which can be written in a subdivision matrix A
(Figure 3). For a patch adjacent to a smooth or spike vertex, A is
dependent on the valence n of the vertex, but it is the same for any
adjacent quad q, due to the structural symmetry around these types
of vertices. Sharp edges prevent smoothing across them, so the be-
havior of the surface adjacent to dart, crease, or corner vertices is
broken into isolated wedges. A wedge is a radially consecutive set
of quads starting and ending at a sharp edge. The number of quads
in a wedge is its valence n, and each quad is identiﬁed by a number
q counting counterclockwise around the extraordinary vertex. The
subdivision matrix A is different for each quad q of a wedge and
also depends on the valence n of the wedge. There is mirror sym-
metry about the central quad or edge, so for example A for quad
q = 1 is the mirror of quad q = n (Figure 1(f)). This symmetry
reduces the number of cases.

For some valences, A is defective and cannot be diagonalized,
so it is not possible to use the eigen decomposition to apply Ag. In
these cases, we utilize the Jordan decomposition of A which always
exists and is only slightly more expensive to raise to a power g,
(details in Section 4.2).

After we have shown that the subdivision rules near sharp fea-
tures produce B-spline patches and can be applied for an arbitrary
number of generations, we will outline our new evaluation algo-
rithm in Section 5, give derivations for the necessary matrices in
Section 6, and discuss our run time implementation in Section 7.

3 Related Work

Our method is a generalization of the exact evaluation of smooth
Catmull-Clark surfaces [Stam 1998].
Inﬁnitely sharp edge and
vertex rules [Hoppe et al. 1994; DeRose et al. 1998] change the
subdivision matrix A, and for some cases these matrices cannot
be diagonalized. Parameterized expanded tagging rules with more
control have also been deﬁned [Biermann et al. 2000], and follow
up work [Zorin and Kristjansson 2002] has shown how to evalu-
ate Loop subdivision surfaces with these extended rules. Some of
these subdivision matrices are defective, and the authors chose to
use a novel matrix decomposition rather than the Jordan decompo-
sitions which correspond to singularities and are hard to parameter-
ize over a family of matrices. In addition to the work on sharp Loop
surfaces, the authors of [Zorin and Kristjansson 2002] mention ad-
ditional unpublished work about piecewise smooth Catmull-Clark
surfaces as well as unpublished results by J. Stam that have been
implemented in AliasjWavefront’s Maya [AliasjWavefront 2000].

4 Mathematical Foundation

We will show that Catmull-Clark surfaces with inﬁnitely sharp
edges and vertices can be exactly evaluated in constant-time. First,
we show that the subdivision operator produces uniform bi-cubic
B-spline patches. Then we show that the subdivision matrix A can
be raised to a power g in constant time by using its Jordan decom-
position (which always exists).

12

13

8

4

0

9

5

1

14

10

6

2

15

11

7

3

12

13

8

4

0

9

         

         

         

         

         

         

         

         

         

         


5

1

14

10

6

2

15

11

7

3

12

13

8

4

0

9






















5

1

14

10

6

2

15

11

7

3

(a) Smooth

(b) Crease

(c) Corner

Figure 2: Catmull-Clark patches that are uniform bi-cubic B-spline
patches. Black thick lines and boxes are sharp edges and vertices.
Red solid lines and circles are smooth edges and vertices. Red
dashed lines and hollow circles are phantom edges and vertices.

4.1 Regular B-spline Cases

We have seen that subdividing a quad near a smooth extraordinary
vertex creates shrinking rings of uniform bi-cubic B-spline patches,
which are known polynomial functions, enabling exact evaluation.
For many patches near sharp features, the same kind of B-spline
patches are generated during the subdivision process (Figure 3(a)).
For patches adjacent to sharp edges, on the other hand, some of
the subpatches will then be adjacent to sharp edges with an incom-
plete neighborhood of control points to deﬁne a B-spline patch, e.g.
subpatches U and V in Figure 3(b).

Fortunately, these subpatches are also uniform bi-cubic B-spline
patches, and a set of phantom vertices can be easily constructed
based on the existing control points to complete the control struc-
ture [Zorin 2003]. Further investigation has shown that there are
three local cases of Catmull-Clark patches that reduce to uniform
B-splines if appropriate phantom vertices are introduced (Figure 2).
Figure 2(a) shows a uniform bi-cubic B-spline control structure.

Figure 2(b) illustrates the case of a patch adjacent to a regular
crease edge. The necessary location for phantom vertices 0 ! 3

2

Submitted for review for the ACM SIGGRAPH conference proceedings

2n+8

2n+7

2n+6

2n+5

2n+6

2n+5

2n+4

2n+17

2n+16

2n+15

2n+14

2n+13

9

2n

2n+1
2n+1

1

2n+7

2n+6

2n+8
8

9

V

8

7

6

UV

U

6

2n

0

0

1

2

2

3

3

2n+13 2n+12 2n+11 2n+10

2n+5

2n+6
     

     

     

     

1
     

     


V UV
2n+1












U

2n

2n+9

2n+3

2n+8

2n+7

2n+2

2n+4
2n+1
2n+3

2n+2
2n

2n+5
7
2n+4

2n+12

2n+4

2n+11

2n+3

2n+10

2n+3

1

4

5

2n+2

2n+9

0

0

4

5

2n+2

(a)

(b)

Figure 3: Application of the (cid:22)A matrix to a quad patch next to an extraordinary vertex produces a ribbon of three subpatches fU; U V; V g that
are regular B-spline patches and a fourth patch (cid:8) which is analogous to its parent. Patches not adjacent to any sharp edges (a) generate
B-spline subpatches with a full set of 16 control points, while patches adjacent to sharp edges generate B-spline subpatches, e.g. fU; V g in
(b), that must calculate phantom vertices. Red vertices and edges represent the current generation, while black ones represent its child mesh.

are computed by mirroring their respective neighbor vertex across
the sharp crease edge. For the example of vertex V1, we must set:

(1)

(2)

V1 = 2V5 (cid:0) V9

Equation 1 is derived by equating the v = 0 isoparameter curve
of the phantom patch to the sharp boundary B-spline curve of the
patch.

Figure 2(c) shows a patch adjacent to a corner vertex and two
regular crease edges. Identical to the single crease case, locations
for phantom vertices f1; 2; 3; 4; 8; 12g are computed by mirroring
their associated neighbor vertex across the sharp crease edges. The
location for the corner phantom vertex V0 is computed by:

V0 = 4V5 + V10 (cid:0) 2 (V6 + V9)

Equation 2 is derived by equating the u = 0 and v = 0 isoparame-
ter curves of the phantom patch to the sharp boundary curves of the
patch. But ﬁrst, sharp boundary curves must have a fourth phantom
curve control point calculated for them in the same way.

These are the basic elements that build all uniform B-spline
patches, but combinations of the regular crease and corner situa-
tions are also uniform B-spline patches. A quad with two parallel
regular crease edges and a quad with all four corner vertices are
both uniform bi-cubic B-splines; the latter actually reduces to a bi-
linear patch. We have found that treating the regular corner case
specially can greatly reduce the amount of subdivision that is nec-
essary. For example, if a model is generated that texture maps each
quad with its own f[0; 1] ; [0; 1]g texture space, then each texture
domain is a bilinear patch and no subdivision is necessary. In prin-
ciple though, only the smooth and regular crease cases are neces-
sary to perform exact evaluation.

4.2 Jordan Blocks
Exact evaluation of stationary subdivision schemes depends on the
ability to raise the stationary subdivision matrix A to an arbitrary

3

power g in constant-time. The subdivision matrices for smooth
extraordinary patches [Stam 1998] are all diagonalizable by their
eigen decomposition, so raising them to a power simpliﬁes to rais-
ing the scalar diagonal eigenvalues to that power and then perform-
ing a constant number of matrix operations.

A = V (cid:3)V (cid:0)1
Ag = V (cid:3)gV (cid:0)1

(3)

(4)

On the other hand, the subdivision matrices for patches near crease
and corner vertices of certain valences are defective, i.e. the alge-
braic multiplicity of certain eigenvalues is higher than the geometric
multiplicity, so it is impossible to ﬁnd a full rank set of eigenvec-
tors. In the case of a defective matrix, it is still always possible to
ﬁnd its Jordan decomposition, which is block diagonal and easy to
raise to an arbitrary power g in constant-time.

A = V J V (cid:0)1

(5)

A Jordan block Jb of J will be of size nb equal to the number of
missing eigenvectors plus one for an associated eigenvalue (cid:21)b with
algebraic multiplicity (cid:21) nb. Jb has (cid:21)b along the diagonal, and
under our deﬁnition, ones below the diagonal. Jb can be thought of
as a diagonal matrix (cid:3)b plus a nilpotent subdiagonal matrix Lb.

Jb = (cid:3)b + Lb

0
(cid:21)b
0
0

0
0
(cid:21)b
0

0
(cid:21)b
1
0

0
0
(cid:21)b
1

0
0
0
(cid:21)b

(cid:21)b
1
0
0

(cid:21)b
0
0
0

3
75

=2
64

2
3
64
75(6)
The vectors fvi : i = 1 ! nb (cid:0) 1g of V associated with a Jordan
block Jb satisfy the equation Avi = (cid:21)bvi + vi+1, while the ﬁnal
vector vnb satisﬁes the eigenvector equation Avnb = (cid:21)bvnb .

+2
64

3
75

0
1
0
0

0
0
1
0

0
0
0
1

0
0
0
0

0
0
0
(cid:21)b

F
F
Submitted for review for the ACM SIGGRAPH conference proceedings

We can then express J g
b

((cid:3)b + Lb)g.

as the binomial expansion of

g

J g
b = ((cid:3)b + Lb)g =

Xi=0 (cid:18)g

i(cid:19) (cid:3)g(cid:0)i
b Li

b

(7)

b is deﬁned to be the identity matrix Ib of size nb. (cid:3)g(cid:0)i

L0
a uniform scaling matrix, so it can be replaced by the scalar (cid:21)g(cid:0)i
g < i, then(cid:18)g
line of ones diagonally down to the left, so if i (cid:21) nb then Li
This truncates the sum to the ﬁrst nb terms.

i(cid:19) (cid:17) 0. Each multiplication of Lb to itself moves the
b (cid:17) 0.

is simply
. If

b

b

J g
b =

nb(cid:0)1

b

i(cid:19) (cid:21)g(cid:0)i
Xi=0 (cid:18)g
b Li
0(cid:19) (cid:21)g
(cid:18)g
=2
1(cid:19) (cid:21)g(cid:0)1
(cid:18)g
6664
2(cid:19) (cid:21)g(cid:0)2
(cid:18)g

nb (cid:0) 1(cid:19) (cid:21)g(cid:0)(nb(cid:0)1)
(cid:18) g

b

b

(8)

0
0
0
0(cid:19) (cid:21)g
(cid:18)g

b

3
7775(9)

0
0
0(cid:19) (cid:21)g
(cid:18)g
1(cid:19) (cid:21)g(cid:0)1
(cid:18)g

b

b

b

0
0(cid:19) (cid:21)g
(cid:18)g
1(cid:19) (cid:21)g(cid:0)1
(cid:18)g
2(cid:19) (cid:21)g(cid:0)2
(cid:18)g

b

b

b

b

The necessary set of binomial coefﬁcients (cid:18)g
O (nb) time by starting with (cid:18)g

i(cid:19) can be computed in
0(cid:19) (cid:17) 1 and iteratively applying the

formula:

(cid:18) g
i + 1(cid:19) = (cid:18)g

i(cid:19) g (cid:0) i

i + 1

(10)

Left multiplying J g
duces to the sum:

b by a row vector x = fx0; x1; (cid:1) (cid:1) (cid:1) xnb(cid:0)1g re-

i 2 [0; nb (cid:0) 1] : yi =

min(nb (cid:0)1(cid:0)i;g)

Xj=0

(cid:18)g
j(cid:19) (cid:21)g(cid:0)j xi+j

(11)

The Jordan decomposition is easy and robust to use, once it has
been derived. For the subdivision matrices that we are consider-
ing, J will have at most one Jordan block of size nb = 2, and all
other blocks will be eigen blocks of size 1. Unfortunately numer-
ical methods to ﬁnd the Jordan decomposition, such as in Mathe-
matica [Wolfram, S. 1999], are not stable and are likely to return
a diagonal matrix where some of the eigenvectors differ by (cid:15). The
eigenvector matrix V is then noninvertible, so the decomposition is
invalid. Fortunately, for the subdivision matrices we are interested
in, higher-level user information can steer the numerical method to
generate a valid Jordan decomposition.

5 Exact Evaluation

The matrix formulation of the exact evaluation is very similar
for all the cases we will consider: smooth, corner, crease, spike,
and dart patches. The function s (u; v) evaluates a Catmull-Clark
patch at a parametric location (u; v) 2 f[0; 1] ; [0; 1]g other than
the origin. The origin of the patch is the extraordinary vertex
(Figure 1), either a smooth vertex of valence n 6= 4 or a cor-
ner, crease, spike, or dart vertex of any valence. Conceptually,
g = dmin ((cid:0) log2 u; (cid:0) log2 v)e subdivisions are applied such that
the parametric point falls in one of the three uniform bi-cubic B-
spline patches fU; U V; V g (Figures 3(a) and 3(b)). In matrix form,
this is equivalent to applying A, the 1-patch-ring subdivision ma-
trix, g (cid:0) 1 times, followed by one application of the extended sub-
division matrix (cid:22)A to the set of control points C to generate all con-
trol points necessary for any of the regular B-spline subpatches. A

picking matrix Pk for k 2 fU; U V; V g then chooses the correct
set of 16 B-spline control points for the given parameter location.
Note that for a patch adjacent to a sharp edge, the picking matrix
will include rules for generating the appropriate phantom vertices
as discussed in Section 4.1. Once the 16 B-spline control points
have been generated and picked, they are weighted by a row vec-
tor containing the 16 uniform bi-cubic B-spline blending functions
B3 ((cid:22)u; (cid:22)v) (Appendix E) evaluated at the correctly transformed sub-
patch parameters ((cid:22)u; (cid:22)v), as shown in the following equation:

s (u; v) = B3 ((cid:22)u; (cid:22)v) Pk (cid:22)AAg(cid:0)1C

(12)

For constant-time evaluation, the term Ag(cid:0)1 must be reduced to a
constant number of matrix multiplications, which we accomplish
using the Jordan decomposition. Note that in the case of a diago-
nalizable matrix, the Jordan decomposition is the same as the eigen
decomposition. We also substitute the bi-cubic power basis vector
puv ((cid:22)u; (cid:22)v) multiplied by a B-spline coefﬁcient matrix Buv for the
B-spline blending function vector B3 ((cid:22)u; (cid:22)v). The vector puv ((cid:22)u; (cid:22)v)
is very quick and easy to build and differentiate. Note that differen-
tiating the patch reduces to differentiating puv ((cid:22)u; (cid:22)v). The expanded
matrix formula is:

s (u; v) = puv ((cid:22)u; (cid:22)v) BuvPk (cid:22)AV J g(cid:0)1V (cid:0)1C

(13)

To reduce the constant number of matrix multiplications neces-
sary at evaluation time, we introduce the three matrices Qk =
BuvPk (cid:22)AV dependent on the subpatch k, and also store the pro-
jected control points ^C = V (cid:0)1C for each patch in advance. This
results in the simpliﬁed equation:

s (u; v) = puv ((cid:22)u; (cid:22)v) QkJ g(cid:0)1 ^C

(14)

Our algorithm is table driven, where we generate the matrices Qk,
J, and V (cid:0)1 off-line for each patch type, valence n, and quad q in
the case of the wedge based types of corners, creases, and darts.

6 Jordan Decomposition of A

The major hurdle we faced in implementing our algorithm was gen-
erating the Jordan decomposition of the 1-patch-ring subdivision
matrix A for certain patch types. For all patch types, A is depen-
dent on the valence n of the extraordinary vertex or wedge. For
the corner, crease, and dart cases, A also depends on which quad
q within the wedge is being evaluated, while for the smooth and
spike cases q can be ignored. In all cases, An;q is a block lower
triangular matrix. The extended subdivision matrix (cid:22)An;q is simply
An;q extended to generate one additional layer of control points.

0

An;q =(cid:20) S0;n
(cid:22)An;q =2
4

S11;n;q S12;n;q(cid:21)
3
5

S11;n;q S12;n;q
S21;n;q S22;n;q

S0;n

0

(15)

(16)

The Jordan decomposition of A can be solved by combining the
Jordan decompositions of S0;n (the 1-ring subdivision matrix) and
the eigen decomposition of S12;n;q:

S0V0 = V0J0
S12V12 = V12(cid:3)12

(17)
(18)

4

Submitted for review for the ACM SIGGRAPH conference proceedings

We know the block form of the generalized eigenvector matrix V
of A:

AV = V J

(19)

0

0

V11 V12(cid:21) =(cid:20) V0
S11 S12(cid:21)(cid:20) V0
(cid:20) S0
S11V0 + S12V11 S12V12(cid:21) =(cid:20) V0J0

V11 V12(cid:21)(cid:20)J0
V11J0 V12(cid:3)12(cid:21)

S0V0

0

0

0

0

0 (cid:3)12(cid:21) (20)

(21)

(cid:20)

The bottom left blocks of the matrices in Equation 21 deﬁnes V11.
We move V11 to the left side of the equation:

The Jordan decomposition of S0;n can then be derived by com-
bining the eigen decompositions of T and T12;n. Note that any
eigenvector of T12;n can be prepended with zeros, and it will then
also be an eigenvector of S0;n. T is a 3 (cid:2) 3 matrix, and one of its
eigenvalues will always be (cid:21) = 1 with the corresponding eigenvec-
1(cid:3)t for S0;n. This only leaves two general-
tor v = (cid:2)1

ized eigenvectors to be resolved, and in all the cases we consider, at
most one of these is dependent on one of the eigenvectors of T12;n.
Through our analysis we were able to determine which eigenvalues
of T match with eigenvalues of T12;n. The eigenvalues of T12;n
are:

(cid:1) (cid:1) (cid:1)

1

S11V0 + S12V11 = V11J0
V11J0 (cid:0) S12V11 = S11V0

(22)
(23)

(cid:21)0 = f =

1
4

J0 is mainly diagonal with some 1’s (but in our cases at most one)
on the subdiagonal. The vectors v11;c, which is column c of V11,
can be solved for from right to left, as a subdiagonal 1 can place a
dependence on v11;c+1. J0 [c + 1; c] is the entry of J0 below the
diagonal element (cid:21)c, and it is either 1 or 0.

((cid:21)cI (cid:0) S12) v11;c = S11v0;c (cid:0) J0 [c + 1; c] v11;c+1
v11;c = ((cid:21)cI (cid:0) S12)(cid:0)1 (S11v0;c (cid:0) J0 [c + 1; c] v11;c+1)
There are four different forms of S12;n;q which are at most of
size 7 (cid:2) 7, and the eigen decompositions are trivial to calculate.
So, if we can derive the Jordan decomposition of S0;n then we will
have the decomposition for An;q.

(25)

(24)

6.1 Jordan Decomposition of S0
The eigen decomposition of S0;n for the smooth vertex case has
been fully treated in [Stam 1998], so we do not go into detail here,
except to say that the spike vertex case is also handled by exactly
the same analysis (Appendix C). For the dart case, we were able to
rely on numerical methods provided by Mathematica [Wolfram, S.
1999] to generate the eigen decomposition (Appendix D).

The difﬁcult cases are the corner and crease patch cases, where
for certain valences, S0;n is defective, and a non-diagonal Jordan
form must be used. Our experience using Mathematica was that
for small valences n < 5, it was able to produce the correct Jor-
dan decompositions analytically, but as the valence increased, the
computation became intractable. Mathematica’s numerical solver
gave quick results for all valences, but it returned a diagonal matrix
J = (cid:3) with multiple eigenvectors that differed by (cid:15), making the
eigenvector matrix V0;n noninvertible and thus the decomposition
invalid. Fortunately in these cases, the ordering of control vertices
chosen in Figure 3 makes S0;n become a block lower triangular
matrix:

S0;n =(cid:20) T

T11;n T12;n(cid:21)

0

(26)

For both the corner and crease cases, the subblocks T11;n and T12;n
have the form:

f =

1
4

; e =

1
16

S0;n =

T

0
0
0
0
0
.
.
.
e
f

f
6e
f
6e
f

6e
f

f
e
0
0
0

0
0

2

6666666666666664

f
e
0
0
0

f
6e
f
e
0

0
e
f
e
0

0
e
f
6e
f

0

0

0
0
0
e
f

e
0

0
0
0
e
f

e
0

. . .

0

6e
f

e
f

3

7777777777777775(27)

5

( i 2 [1; n (cid:0) 1] :

(6+2 cos i(cid:25)

(cid:21)i =

n )e+f (cid:6)q((6+2 cos i(cid:25)

2

n )e+f)2

(28)

) (29)

(cid:0)16ef

All of the eigenvalues of T12;n are unique, and the eigenvectors
are based on sine and cosine series. In the case where n is even,
particular attention should be paid to (cid:21)i= n
(cid:21) = 1
2 is also an eigenvalue of T in the corner and crease patch
cases and causes the subdivision matrix to be defective. For the
crease case only, the eigenvalue (cid:21)0 = 1
4 also causes the subdivision
matrices to be defective.

8(cid:9), because

= (cid:8) 1

2 ; 1

2

Once the candidate defective eigenvalue has been determined,
we sort the eigenvalues and eigenvectors of T and T12;n such that
the matching pair is consecutive. We then are given the eigenvector
v2 of S0;n, which was zero extended from the eigenvector v2 of
T12;n:

S0;nv2 = (cid:21)v2

(30)

We also know the top three elements v1 of v1 taken from the cor-
responding eigenvector from T . We can solve for the remaining
elements v1 of the Jordan vector using the generalized eigenvector
equation where (cid:12) is 0 for an eigenvector or 1 for a Jordan vector:

S0;nv1 = (cid:21)v1 + (cid:12)v2

(S0;n (cid:0) (cid:21)I) v1 = (cid:12)v2

(T (cid:0) (cid:21)I) v1 = 0

T11;nv1 + (T12;n (cid:0) (cid:21)I) v1 = (cid:12)v2

(T12;n (cid:0) (cid:21)I) v1 = (cid:12)v2 (cid:0) T11;nv1

(31)
(32)
(33)
(34)
(35)

Solving for v1 requires the inverse of (T12;n (cid:0) (cid:21)I):

(T12;n (cid:0) (cid:21)I)(cid:0)1 = V12;n ((cid:3)12;n (cid:0) (cid:21)I)(cid:0)1 V (cid:0)1

12;n

(36)

If the eigenvalue (cid:21) of T is not an eigenvalue of T12;n then
(T12;n (cid:0) (cid:21)I) is invertible. In this case, the generalized eigenvec-
tor equation is not valid because an eigenvector v2 of T12;n corre-
sponding to the eigenvalue (cid:21) does not exist. Instead, the normal
eigenvector equation is used, which can be accomplished by letting
(cid:12) = 0.

v1 = (cid:0) (T12;n (cid:0) (cid:21)I)(cid:0)1 T11;nv1
v1 = (cid:0)V12;n ((cid:3)12;n (cid:0) (cid:21)I)(cid:0)1 V (cid:0)1

12;nT11;nv1

(37)
(38)

Equation 38 deﬁnes the lower elements of the eigenvectors corre-
sponding to (cid:21) in T if S0;n is not defective.

It is only possible to need a generalized Jordan vector when the
eigenvalue (cid:21) of T is also an eigenvalue of T12;n. For the cases
we are considering, the multiplicity of (cid:21) in T12;n is at most 1, so
v2 is the eigenvector of T12;n corresponding to (cid:21).
In this case,

Submitted for review for the ACM SIGGRAPH conference proceedings

(T12;n (cid:0) (cid:21)I) is a noninvertible matrix, so we use its pseudoinverse
(T12;n (cid:0) (cid:21)I)y instead to solve for v1.

v1 = (T12;n (cid:0) (cid:21)I)y(cid:0)(cid:12)v2 (cid:0) T11;nv1(cid:1)
v1 = V12;n ((cid:3)12;n (cid:0) (cid:21)I)y V (cid:0)1

12;n(cid:0)(cid:12)v2 (cid:0) T11;nv1(cid:1)

(39)

(40)

v2 is one of the columns of V12;n, so V (cid:0)1
12;nv2 is a column vector
with a single entry of 1 and the rest 0. This row with the 1 corre-
sponds to the diagonal entry of ((cid:3)12;n (cid:0) (cid:21)I) that is 0, hence:

((cid:3)12;n (cid:0) (cid:21)I)y V (cid:0)1

12;nv2 = 0

So the equation for v1 reduces to:

v1 = (cid:0)V12;n ((cid:3)12;n (cid:0) (cid:21)I)y V (cid:0)1

12;nT11;nv1

(41)

(42)

This only a partial solution, so it is necessary to substitute v1 back
into Equation 35. This creates a term which is (T12;n (cid:0) (cid:21)I) right
multiplied by its pseudoinverse, Equation 44. Looking at this term
in its eigen-decomposition, we ﬁnd ((cid:3)12;n (cid:0) (cid:21)I) right multiplied
by its pseudoinverse which is the identity matrix with the diagonal
element corresponding to v2 set to zero. This near identity matrix
zeroes out v2 from V12;n. The right multiplication by V (cid:0)1
12;n results
in the identity matrix minus the outer product of v2 and its corre-
12;n. Subtracting that quantity from
sponding row vector v2

(cid:0)1 in V (cid:0)1

(cid:0)1(cid:1)t.
the identity matrix simply yields the outer product v2(cid:0)v2
(T12;n (cid:0) (cid:21)I) v1 = (cid:12)v2 (cid:0) T11;nv1

(43)

12;n(cid:17)(cid:17) T11;nv1 = (cid:12)v2
(cid:16)I (cid:0)(cid:16)V12;n ((cid:3)12;n (cid:0) (cid:21)I) ((cid:3)12;n (cid:0) (cid:21)I)y V (cid:0)1
(cid:0)1(cid:1)t
v2(cid:0)v2
(cid:0)1(cid:1)t
(cid:0)v2

T11;nv1 = (cid:12)v2
(45)

(44)

T11;nv1 = (cid:12)

(46)

Equation 46 is a scalar equation that is the ﬁnal constraint. If m,
the multiplicity of (cid:21) in T , linearly independent eigenvectors of T
represented by v1 can be constructed to satisfy the condition (cid:12) = 0,
then S0;n is not defective. Otherwise for the ﬁrst generalized Jordan
vector v1 must be constructed such that (cid:12) = 1. For the cases we
are considering, there is at most one generalized eigenvector neces-
sary, so the largest Jordan block will be a single 2 (cid:2) 2 block. The
resulting generalized eigenvectors for the corner and crease cases
are in Appendices A and B, respectively.

7 Implementation

We try to minimize the number of patches that we need to construct
in order to reduce the number of eigen-projected control points
that must be stored. We apply an adaptive subdivision hierarchy
that only subdivides near a patch until the neighborhood is regular
enough to apply our evaluation technique.

A quad q adjacent to an extraordinary vertex can be evaluated if
its opposite corner vertex is a regular smooth vertex (n = 4), and its
other two vertices are either regular smooth vertices (Figure 3(a)) or
crease vertices with regular wedges (Figure 3(b)). In addition, the
1-ring of patches must all be quads. If a patch does not meet this
criteria, then we perform a local subdivision to each of its vertices
to generate their 1-ring neighborhoods at the next generation and
hang the new mesh pieces from the parent mesh forming a quad
tree of patches over the generations.

6

The adaptive subdivision must locally subdivide near semi-sharp
features until they revert to the smooth rules, and it must subdi-
vide near inﬁnitely sharp extraordinary features until they are suf-
ﬁciently separated, which takes at most two subdivisions. To sim-
plify our parameter mappings per patch, we uniformly subdivide
the top-level mesh if it has any non-quadrilateral patches.

We thus deﬁne that the top-level mesh be all quads. We
present an interface that each top-level quad has its own continu-
ous f[0; 1] ; [0; 1]g parameter space, although for some patches the
adaptive hierarchy must be descended and the parameters scaled
and rotated until a leaf patch that can be evaluated is reached. Fig-
ures 5(a), 5(b), and 5(c) illustrate our adaptive hierarchy. The size
of each quad shows at which generation of subdivision it was able
to be evaluated. The color of the patches correspond to the type of
extraordinary vertex to which they are adjacent. The red edges and
vertices correspond to inﬁnitely sharp features, while the yellow
edges and vertices correspond to semi-sharp features.

8 Results and Conclusion

We have implemented a new exact evaluation algorithm for piece-
wise smooth Catmull-Clark subdivision surfaces. We have devel-
oped new techniques for dart, crease, corner, and spike patches.
Figure 4 shows examples of the 1-ring neighborhoods around ver-
tices of these four types. The right hand image of each of these
pairs shows the absolute magnitude Gaussian curvature map which
was calculated by using our algorithm to evaluate the derivatives of
the surface. Our adaptive subdivision structure allows us to evalu-
ate arbitrarily complicated control meshes with a minimal number
of evaluation patches (Figure 5(b)) and makes no approximations,
even near inﬁnitely sharp features.

9 Acknowledgements

Thanks to Tippett Studio for funding this work. Thanks to Okan
Arikan for posing this problem.

References
ALIASjWAVEFRONT, 2000. Maya 3.0.
BIERMANN, H., LEVIN, A., AND ZORIN, D. 2000. Piecewise Smooth Subdivision
Surfaces with Normal Control. Proceedings of SIGGRAPH 2000 (August), 113–
120.

CATMULL, E., AND CLARK, J. 1978. Recursively generated B-spline surfaces on

arbitrary topological meshes. Computer-Aided Design 10, 6 (July), 350–355.

DEROSE, T., KASS, M., AND TROUNG, T. 1998. Subdivision Surfaces in Character

Animation. Proceedings of SIGGRAPH 1998 (July), 85–94.

G. STRANG. 1988. Linear Algebra and its Applications, Appendix B, third ed. Thomas

Learning, United States of America.

HOPPE, H., DEROSE, T., DUCHAMP, T., HALSTEAD, M., JIN, H., MCDONALD, J.,
SCHWEITZER, J., AND STUETZLE, W. 1994. Piecewise Smooth Suface Recon-
struction. Proceedings of SIGGRAPH 1994 (July), 295–302.

PIXAR. 2000. The RenderMan Interface Version 3.2. https://renderman.pixar.com,

July.

REIF, U. 1995. A uniﬁed approach to subdivision algorithms near extraordinary

vertices. Computer-Aided Geometric Desing 12, 2 (March), 153–174.

STAM, J. 1998. Exact Evaluation Of Catmull-Clark Subdivision Surfaces At Arbitrary

Parameter Values. Proceedings of SIGGRAPH 1998 (July), 395–404.

WOLFRAM, S. 1999. The Mathematica Book, fourth ed. Wolfram Media, Champaign,

IL.

ZORIN, D., AND KRISTJANSSON, D. 2002. Evaluation of Piecewise Smooth Subdi-

vision Surfaces. The Visual Computer, 18, 299–315.

ZORIN, D., 2003. Personal correspondence, December.

Submitted for review for the ACM SIGGRAPH conference proceedings

(a) Dart

(b) Spike

(c) Crease

(d) Corner

Figure 4: 1-ring vertex wedge for each of the four different sharp extraordinary vertex types for piecewise smooth Catmull-Clark surfaces.
The left image of each pair is a shaded rendering of the surface with a color coding for patch type. The right image is a map of absolute
Gaussian curvature. The surface position and derivatives were evaluated using our technique. Sharp edges and vertices are drawn in red.

(a) 2D adaptive subdivision hierarchy

(b) Alien head

(c) Mechanical part

Figure 5: Adaptive subdivision hierarchies. Size of the quads indicates the subdivision generation. The color speciﬁes the patch type: blue
is a regular B-spline, medium blue is a regular B-spline crease patch, dark blue is a regular B-spline corner patch, purple is a smooth
extraordinary vertex, cyan is a spike, green is a dart, yellow is a crease, and orange is a corner. Sharp edges and vertices are drawn in red,
while semi-sharp ones are drawn in yellow. The yellow semi-sharp edge has sharpnes 3, while the semi-sharp vertex has sharpness 2.

7

Submitted for review for the ACM SIGGRAPH conference proceedings

A Corners

For the corner patch case, the submatrix T of S0;n (Equation 26)
contains the averaging rules for the vertices 0 ! 2 from Figure 3.
Note that in the case of a corner vertex with one sharp edge, vertices
1 and 2 are the same point:

1
1
2
1
2

T = 2
4
T has the eigenvalues (cid:21) =(cid:8)1; 1

2 when the wedge valence n is even, so the associated eigenvec-

of 1
tors of S0;n fall into odd and even valence cases.

2(cid:9). T12;n also has an eigenvalue

2 ; 1

0
1
2
0

0
0
1
2

3
5

(A-1)

1
1
1
1
1
1
1
1
.
.
.
1
1

2

66666666666666666664

;

3

77777777777777777775

2

666666666666666666664

n
2

0
((cid:0)1)
1
1
0

((cid:0)1)i
((cid:0)1)i
((cid:0)1)i

.
.
.
0
((cid:0)1)

n
2

;

3

777777777777777777775

2

6666666666666666666666664

+1

n
2

0
((cid:0)1)
1
1

((cid:0)1)i(cid:16) (cid:0)8e
n(2e+f )(cid:17)
((cid:0)1)i(cid:16) n(cid:0)4i
n (cid:17)
((cid:0)1)i(cid:16) n(cid:0)4i
n (cid:17)
n (cid:17)
((cid:0)1)i(cid:16) n(cid:0)4i
2 (cid:16) (cid:0)8e
n(2e+f )(cid:17)

((cid:0)1)

+1

n
2

.
.
.

n

((cid:0)1)

3

7777777777777777777777775

;

2

666666666666666666664

0
0
0

(cid:0) ((cid:0)1)i (cid:11)
(cid:0) ((cid:0)1)i (cid:11)
(cid:0) ((cid:0)1)i (cid:11)

0
.
.
.

(cid:0) ((cid:0)1)
(cid:0) ((cid:0)1)
(cid:0) ((cid:0)1)

n
2 (cid:11)
n
2 (cid:11)
n
2 (cid:11)

3

777777777777777777775

(A-8)

The following functions produce patterns that are found in the

generalized eigenvectors for the crease and corner cases:

B Creases

(cid:12) (i) = sin (i (cid:25)
(cid:13) (i) = p2 sin (i (cid:25)

2 ) = f0; 1; 0; (cid:0)1; : : :g

2 + (cid:25)

4 ) = f1; 1; (cid:0)1; (cid:0)1; : : :g

(A-2)

(A-3)

A.1 Corner with Odd n

When n is odd, S0;n is diagonalizable, so there is a full set of eigen-
vectors.

1
0
0

0
1
2
0

0
0
1
2

(cid:3) = 2
66664

3
77775

. . .

(A-4)

Equation A-5 shows the ﬁrst three eigenvectors fv1; v2; v3g where
i 2 [1; n (cid:0) 1] and (cid:12) () and (cid:13) () are taken from Equations A-2 and
A-3.

1
1
1
1
1
1
.
.
.

2

666666666664

3

777777777775

;

2

666666666664

0
n(cid:0)1

2

((cid:0)1)
1

2(cid:12) (0 + 1)
(cid:13) (i + 1)
2(cid:12) (i + 1)

.
.
.

0
n+1

2

((cid:0)1)
1

2(cid:12) (0 + 2)
(cid:13) (i + 2)
2(cid:12) (i + 2)

.
.
.

3

777777777775

;

2

666666666664

(A-5)

3

777777777775

A.2 Corner with Even n

When n is even, S0;n is defective due to the eigenvalue (cid:21) = 1
2
which has algebraic multiplicity three but only two linearly inde-
pendent eigenvectors.

1
0
0
0

0
1
2
0
0

0
0
1
2
1

0
0
0
1
2

J =

2

6666664

3

7777775

. . .

(A-6)

Equation A-8 shows the ﬁrst

four generalized eigenvectors

fv1; v2; v3; v4g where i 2 (cid:2)1; n

vectors in a Jordan block are dependent on each other, so we also
solve for the factor (cid:11) (Equation A-7) to scale the eigenvector v4 of
T12;n.

2 (cid:0) 1(cid:3). Note that the scale of all

(cid:11) =

8ef

n (2e + f )

(A-7)

8

For the crease patch case, the submatrix T of S0;n (Equation 26)
contains the averaging rules for the vertices 0 ! 2 from Figure 3:

T = 2
4
T has the eigenvalues (cid:21) = (cid:8)1; 1

6
8
1
2
1
2

4 and it has an eigenvalue of 1

value of 1
2 when the wedge valence n
is even. The associated eigenvectors of S0;n fall into odd, divisible
by four, and even valence cases.

4(cid:9). T12;n always has an eigen-

2 ; 1

1
8
1
2
0

1
8
0
1
2

3
5

(A-9)

B.1 Crease with Odd n
When n is odd the eigenvalue (cid:21) = 1
multiplicity two but only one linearly independent eigenvector.

4 is defective having algebraic

J =

1
0
0
0

0
1
2
0
0

0
0
1
4
1

0
0
0
1
4

. . .

2

6666664

3

7777775

n+1

2

(A-10)

Equation A-12 shows the ﬁrst four generalized eigenvectors

fv1; v2; v3; v4g where i 2 [1; n (cid:0) 1].

(cid:11) =

3f
2n

;

2

k (i) =(cid:18)i (cid:0) 1+((cid:0)1)
3

2

(cid:0) 1
2
1
1
1

n+((cid:0)1)i3(n(cid:0)2i)

4n
1
.
.
.

(cid:19)
2
3

777777777775

;

666666666664

(A-11)

0
0
0
(cid:11)
0

.
.
.

3

777777777775(A-12)

((cid:0)1)i (cid:11)

2

666666666664

1
1
1
1
1
1
.
.
.

3

777777777775

;

2

666666666664

0
(cid:0)1
1

2(cid:12) (k (0) + 2)
(cid:13) (k (i) + 1)
2(cid:12) (k (i) + 2)

.
.
.

777777777775

;

666666666664

B.2 Crease with n Divisible by Four

When n is divisible by four, S0;n is defective due to the eigenvalue
(cid:21) = 1
2 which has algebraic multiplicity two but only one linearly
independent eigenvector.

1
0
0
0

0
1
4
0
0

0
0
1
2
1

0
0
0
1
2

J =

2

6666664

3

7777775

. . .

(A-13)

Submitted for review for the ACM SIGGRAPH conference proceedings

Equation A-15 shows the ﬁrst four generalized eigenvectors

D Darts

fv1; v2; v3; v4g where i 2(cid:2)1; n

2 (cid:0) 1(cid:3).

8ef

(cid:11) =

n (2e + f )

(A-14)

The real subdivison matrix An;q is numerically diagonalizable for
dart patches, but it has two complementary imaginary eigenvalues
for valences n (cid:21) 6, which also causes the V and V (cid:0)1 matrices
to have imaginary values. Handling imaginary values increases the
cost of doing a surface evaluation by a constant factor of 4. Note
that the value of s (u; v) is real, so the zero coefﬁcient imaginary
term in the ﬁnal multiply does not need to be calculated. Raising an
imaginary eigenvalue (cid:21) = a + ib to an integer power g is accom-
plished in O (g) scalar operations with the sum:

(A-15)

(cid:21)g = (a + ib)g =

g

Xj=0

ij(cid:18)g

j(cid:19) ag(cid:0)j bj

(A-21)

E Uniform Bi-Cubic B-splines

The 16 uniform bi-cubic B-splines basis functions can be expressed
as B3 (u; v) = puv (u; v) Buv, where puv (u; v) is the bi-cubic
power basis vector:

pu (u) =(cid:2)1 u u2
puv (u; v) =(cid:2)pu (u)

u3(cid:3)

vpu (u)

v2pu (u)

(A-22)

v3pu (u)(cid:3) (A-23)

Buv is the coefﬁcient matrix on the power basis that constructs the
uniform bi-cubic B-splines:

Bu =

Buv =

1
6

1
6

2
664
2
664

1
(cid:0)3
3
(cid:0)1

4
0
(cid:0)6
3

1
3
3
(cid:0)3

0
0
0
1

3
775

Bu

(cid:0)3Bu
3Bu
(cid:0)Bu

4Bu

0

(cid:0)6Bu
3Bu

0
Bu
0
3Bu
3Bu
0
(cid:0)3Bu Bu

(A-24)

(A-25)

3
775

2

66666666666666666664

1
1
1
1
1
1
1
1
.
.
.
1
1

3

77777777777777777775

;

2

66666666666666666664

(cid:0) 1
2
1
1
1
(cid:0) 1
2
1
1
1
.
.
.
(cid:0) 1
2
1

;

3

77777777777777777775

2

666666666666666666666664

0
(cid:0)1
1
1

((cid:0)1)i(cid:16) (cid:0)8e
n(2e+f )(cid:17)
((cid:0)1)i(cid:16) n(cid:0)4i
n (cid:17)
((cid:0)1)i(cid:16) n(cid:0)4i
n (cid:17)
n (cid:17)
((cid:0)1)i(cid:16) n(cid:0)4i

.
.
.

(cid:0)8e

n(2e+f )

(cid:0)1

3

777777777777777777777775

;

2

66666666666666666664

0
0
0

(cid:0) ((cid:0)1)i (cid:11)
(cid:0) ((cid:0)1)i (cid:11)
(cid:0) ((cid:0)1)i (cid:11)

0
.
.
.

(cid:0)(cid:11)
(cid:0)(cid:11)
(cid:0)(cid:11)

3

77777777777777777775

B.3 Crease with Even n

When n is even, S0;n is diagonalizable.

1
0
0

0
1
2
0

0
0
1
4

(cid:3) = 2
66664

3
77775

. . .

(A-16)

Equation A-17 shows the ﬁrst three eigenvectors fv1; v2; v3g where
i 2 [1; n (cid:0) 1].
2

2

2

3

1
1
1
1
1
1
.
.
.

3

777777777775

;

666666666664

666666666664

0
(cid:0)1
1

(cid:13) (0 + 1)
2(cid:12) (i + 1)
(cid:13) (i + 1)

.
.
.

777777777775

;

666666666664

(cid:0) 1
2
1
1
1

1+((cid:0)1)i 3

4
1
.
.
.

3

777777777775

(A-17)

C Spikes

The spike vertex case always diagonalizes, and it only requires a
small modiﬁcation to the analysis presented in [Stam 1998]. Only
the 3 (cid:2) 3 matrix ^S0 changes due the new central vertex smoothing
rule.

^S0 = 2
4

1
6e
f

0
8e
2f

0
2e
f

3
5

(A-18)

The ﬁrst three eigenvalues then become

(cid:22)1 = 1; (cid:22)2; (cid:22)3 =

8e + f (cid:6)p64e2 + f 2

2

3 (cid:6) p5

8

=

(A-19)

Accordingly, The second and third eigenvectors then change to

16(cid:22)2

2 (cid:0) 12(cid:22)2 + 1
6(cid:22)2 (cid:0) 1
4(cid:22)2 + 1

.
.
.

6(cid:22)2 (cid:0) 1
4(cid:22)2 + 1

1
1
1
.
.
.
1
1

2

666666664

3

777777775

;

2

666666664

3

777777775

;

2

666666664

16(cid:22)2

3 (cid:0) 12(cid:22)3 + 1
6(cid:22)3 (cid:0) 1
4(cid:22)3 + 1

.
.
.

6(cid:22)3 (cid:0) 1
4(cid:22)3 + 1

3

777777775

(A-20)

9

