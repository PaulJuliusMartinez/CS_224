Note on quantum counting classes
Yaoyun Shi  Shengyu Zhang
Abstract
We define counting classes #BPP and #BQP as natural extensions of the classical well-studied one #P to the randomized and quantum cases. It is then shown that P#P = P#BQP.
1 Introduction
One important type of computational tasks are counting problems, and a particularly interesting class of such problems are for counting the number of the certificates. These counting problems naturally arise in a plethora of fields ranging from enumerative combinatorics, to statistical physics and economics; see [AB09] (Chapter 17) for a number of specific examples. Counting certificates is in general harder than the corresponding NP problems, which merely requires to decide for an input instance whether at least one certificate exists.
In [Val79b] Valiant initialized the study of counting problems from a complexity perspective by defining a counting class called #P. Precisely, the class contains the
functions f : {0, 1}  N which have a polynomial-time nondeterministic Turing ma-
chine M with the number of accepting paths on an input x equal to f (x). In another paper [Val79a] of Valiant, it was showed that computing Perm, the permanent of {0,1}matrices, is #P-complete. That is to say, Perm is in #P and any other function in #P can be computed in polynomial time given Perm as an oracle. This implies the computational hardness of computing Perm, in a strong contrast to the existence of efficient algorithms for computing the determinant, a quantity closely related to permanent, of a matrix. More properties of the class #P were later discovered, including Toda's discovery that the polynomial hierarchy PH is in P#P.
In this paper, we consider counting classes in the randomized and quantum computational modes. When the probability is involved, one issue needs to be handled properly. For a predicate P (x, y) decided by a probabilistic or quantum Turing machine (PTM or QTM), a (candidate) certificate y is usually not perfectly good or perfectly bad as in the deterministic Turing machine case, but has an accepting probability, and the probabilities for different y's can be quite densely distributed in [0, 1]. As in bounded-error classes, we assume a gap between the good and bad certificates by requiring that each certificate has acceptance probability at least 2/3 or at most 1/3. Then f (x) is equal
This work is supported by Hong Kong grants RGC-419309 and RGC-418710. Yaoyun: 1. Please add your grant information. 2. I'm not sure this is the most suitable title; please feel free to suggest something else.
Yaoyun: Please add your mailing address. Department of Computer Science and Engineering, The Chinese University of Hong Kong. Email: syzhang@cse.cuhk.edu.hk
1

to the number of the certificates with large acceptance probability; see the next section for precise definition of #BPP.
When it comes to the quantum counting, more issues arise. Since the certificate space is a continuous Hilbert space, there are infinitely many good certificates in general, and thus counting may not be meaningful. The continuity also makes the gap between acceptance probabilities impossible: If certificates states |y1 and |y2 have acceptance probabilities, say, and 1 - , respectively, then the acceptance probability for a superposition of |y1 and |y2 can be any real number between and 1 - . A natural measure to use is the dimension of subspace of good certificates. However, how can we guarantee that the set of good certificates form a subspace?
All these issues shall be settled by a spectral result in [MW05]. Basically, what was shown there is a useful fact that if the verifier is a uniform family of quantum circuit, then there is a natural spectral decomposition of the witness space V = pVp, such that in each eigenspace Vp, the corresponding eigenvalue p is the acceptance probability of a witness |p  Vp. In addition, a general witness | = p p|p , where |p  Vp, has acceptance probability p |p|2p. Based on this, we define the counting class #BQP as those functions f with a uniform family of quantum circuit of polynomial size such that all these eigenvalues are either at least 2/3 or at most 1/3, and f (x) is equal to the number of eigenvalues at least 2/3.
One important question in quantum computing is to understand the ultimate power of quantum computers in various computational modes. Since counting problems form an important class of computational tasks, it is desirable to understand the power of quantum counting classes. In this paper, we shall show the following relation of #BQP and #P.
Theorem 1.1 P#BQP = P#P.
Another way to look at the result is from a central question of where BQP sits in classical complexity classes. While it has been known for more than a decade that BQP  PP  P#P, pursuing a better upper bound turns out to be much harder. One way to improve the containment is to see how much we can boost the power of BQP so that it is still upper bounded by a classical complexity class such as PP. Observing that the proof that BQP  PP does not use the bounded-error assumption of BQP, Watrous [Wat09] improved the relation to PQP = PP, where PQP is the same as BQP but only requiring the acceptance probability to be strictly larger than 1/2 for Yes instances and at most 1/2 for No instances. The result of this note can be viewed in the same spirit as an improvement of BQP  P#P by pushing up the BQP to P#BQP.
Related work
One classical result about the number of witness and its implication on hardness is the UniqueNP problem studied by Valiant and Vazirani [VV86], who showed that an NP problem with the promise of at most one certificate exists is no easier than the problem without the promise. Recently the result was extended to the randomized [ABOBS08] and quantum [JKK+10] cases, where a gap is also assumed between the "good" and "bad" certificates.
2

2 Preliminaries and notation

In the model for #BQP, there is a uniform family of quantum circuits of polynomial size. We can equivalently think of the circuits as depending on input, so the verifier for input x is Vx. Suppose that Vx has an input space W  S, where W is the space for an m-qubit potential witness |  W , and S is a k-qubit working space, initialized as |0k . On a particular witness | , the circuit operates on |  |0k and, at the end of the output, measures the first qubit in the {|0 , |1 } basis and output the result. Overloading the notation, we also use Vx to denote the unitary operation that the circuit applies. Define two projections
1. acc = VxaccVx: projection onto the subspace corresponding to the first qubit being 1 if the computation Vx if performed.
2. init = Im  |0k S 0k|S: projection onto the subspace of S containing |0k .
A simple but important property for analysis of QMA feasible is to consider the eigensystem of initaccinit. Since it is a positive operator, it enjoys a spectral decomposition. There are 2m eigenvectors |i of initaccinit, all in the form of |i  |0k . The eigenvalue for |i turns out to be the accept probability pi of the witness |i :
i(initaccinit) = i0k|initaccinit|i0k = accinit|i0k 2 = acc|i0k 2 (1)
Now the acceptance probability for a general witness state i i|i can also be computed easily:

acc i|i 2 =

ii|acc| ii = ij i|acc|j = |i|2pi

i i i ij

i

(2)

where the last equality uses the fact that the eigenvectors are orthogonal. With all

these setup, we can define the quantum counting class. First recall that #P is defined

as follows.

Definition 2.1

f  #P if  a polynomial-time Turing machine V s.t. f (x) = |{w : V (x, w) = 1}|. (3)

The counting classes #BPP and #BQP are defined as follows.
Definition 2.2 f  #BPP if  a polynomial-time probabilistic Turing machine V s.t. 1. w, V (x, w) = 1 with probability either at least 2/3 or at most 1/3, 2. f (x) = |{w : V (x, w) = 1 with probability at least 2/3}|.
Definition 2.3 f  #BQP if  a uniform family of quantum circuits {Vx} of size polynomial in |x| s.t.
1. The eigenvalues of initaccinit are all either at least 2/3 or at most 1/3, 2. f (x) = the number of eigenvalues of initaccinit that are at least 2/3.

3

3 On the limitation of the quantum counting class

In this section we shall show that #BQP and #P, when working as oracles for P, give the same class. The idea is to first amplify the correct probability, and then use the double-counting on trace. The same idea was used in [MW05] to prove that QMA  PP. Let us first recall the following amplification result for QMA.
Lemma 3.1 (Strong Amplification of QMA, [MW05]) For any problem in PromiseQMA, and any polynomials m(n) and r(n), there is a universal family of polynomial-size verifiers {Vx : |x| = n} with m(n)-qubit witness space and O(r(n))-qubit working space s.t. the eigenvalues of initaccinit are either more than 1 - 2-r(n) or less than 2-r(n).
Proof (of Theorem 1.1) We shall simulate each query to a #BQP oracle by a #P oracle with some further polynomial-time post-processing. For a query to a function f  #BQP, there exists a quantum verifier Vx with m-qubit witness space. The strong amplification in Lemma 3.1 gives both the soundness error and completeness error smaller than 2-r. Actually, denote by init and acc the corresponding projections for the new verifier, then the eigenvectors of Q = initaccinit are the same as those of Q = initaccinit, but the corresponding eigenvalues change to either more than 1 - 2-r or less than 2-r.
By the definition of #BQP, f (x) is equal to the number of eigenvalues of Q that are at least 2/3, which is in turn equal to the the number of eigenvalues of Q that are at least 1 - 2-r. Now consider the trace of Q . On the one hand, we have

tr(Q ) = i(Q )  f (x)(1 - 2-r).
i

(4)

On the other hand, since all the "small" eigenvalues are less than 2-r(n), we have

tr(Q ) = i(Q )  (2m - f (x)) · 2-r + f (x) · 1 = f (x)(1 - 2-r) + 2m-r.
i

(5)

Note that one desirable property of strong amplification is the flexibility of choice of r to be any polynomial of n, independent of m. Let r = m + 2, then

f (x) - 1/4  f (x)(1 - 2-(m+2))  tr(Q )  f (x)(1 - 2-(m+2)) + 1/4  f (x) + 1/4. (6)

where the first inequality is because f (x)  2m due to the assumption that the verifier for f has m-qubit witness space.
Without loss of generality, we can assume that the quantum circuit is made of Toffoli, Hadamard and i-shift gates. Each entry (i, j) of the whole matrix Q equals to h(i, j)/2g where h is an #P function and g = poly(n) is the number of Hadamard gates in the circuit. Since the trace also equals to the summation of the diagonal entries, and #P is closed under exponential sum, we get

tr(Q ) = h/2g

(7)

for some GapP function h. Suppose h = h1 - h2 for some #P functions h1 and h2. Now we use our #P oracle to get h1 and h2, and then compute [(h1 - h2)/2g] in deterministic polynomial time, where the bracket is to round the number to the closest
integer. By Eq. (6), this is equal to f (x). This completes the simulation of the query
to the #BQP oracle.

4

References

[AB09]

Sanjeev Arora and Boaz Barak. Computational Complexity: A Modern Approach. Cambridge University Press, Cambridge, UK, 2009.

[ABOBS08] Dorit Aharonov, Michael Ben-Or, Fernando Brandao, and Or Sattath. The pursuit for uniqueness: Extending valiant-vazirani theorem to the probabilistic and quantum settings. arXiv:0906.4425, 2008.

[JKK+10]

Rahul Jain, Iordanis Kerenidis, Greg Kuperberg, Miklos Santha, Or Sattath, and Shengyu Zhang. On the power of a unique quantum witness. In Proceedings of the First Symposium on Innovations in Computer Science, pages 470­481, 2010.

[MW05]

Chris Marriott and John Watrous. Quantum arthur-merlin games. Computational Complexity, 14(2):122­152, 2005.

[Val79a]

Leslie Valiant. The complexity of computing the permanent. Theoretical Computer Science, 8(2):189201, 1979.

[Val79b]

Leslie Valiant. The complexity of enumeration and reliability problems. SIAM Journal on Computing, 8(3):410­421, 1979.

[VV86]

Leslie Valiant and Vijay Vazirani. NP is as easy as detecting unique solutions. Theoretical Computer Science, 47(1):85­93, 1986.

[Wat09]

John Watrous. Quantum computational complexity. Encyclopedia of Complexity and System Science, 2009.

5

