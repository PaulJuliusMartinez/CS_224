An Experiment in Using Inductive Logic Programming to

Uncover Pointcuts

Kris Gybels∗ and Andy Kellens†
Programming Technology Lab

Vrije Universiteit Brussel

Pleinlaan 2

{kris.gybels, andy.kellens}@vub.ac.be

Belgium

July 9, 2004

Abstract

The subject of this paper is the transformation
from pre-AOP legacy software to aspect-oriented
software. To factor out crosscutting concerns from
such software we propose the use of techniques to
automate the task of uncovering pointcuts. We dis-
cuss problems inherent in this task and propose the
use of inductive reasoning techniques for the au-
tomation. We apply such a technique to one kind
of aspects: unique methods which can be found in
a standard Smalltalk image.

1 Introduction

Now that AOP has reached a certain level of ma-
turity, there is a growing interest in applying it
not only to new projects but to existing systems as
well. Existing systems have been modularized us-
ing only classical techniques like procedures, func-
tions, classes etc. which we know to be insuﬃcient
for modularizing certain concerns [5]. This com-
plicates the job of the maintainer who is often not
even one of the original developers. With the ad-
vent of AOP such concerns can now be properly
modularized which further postpones the system’s
expiration date by improving its maintainability.

Flanders, Belgium (F.W.O.)

∗Research assistant of the Fund for Scientiﬁc Research -
†Author funded by a doctoral scholarship of the “Insti-
tute for the Promotion of Innovation through Science and
Technology in Flanders (IWT Vlaanderen)”

1

To apply AOP to existing systems and transform
its crosscutting concerns to proper aspects, a main-
tainer needs to perform two tasks: one is the identi-
ﬁcation of crosscutting concerns in the system also
known as aspect mining, the other is the actual
refactoring of such concerns to a localized aspect.
Because a maintainer is often not that familiar with
all the details of the system, it is desirable to au-
tomate these tasks as much as possible.
In this
paper we focus on the second task and consider
the case where one refactors the concerns to an as-
pect in an AspectJ-like language. One then must
uncover suitable pointcuts that capture the points
where the crosscutting concern originally occurred.
To support this uncovering process we propose the
use of inductive reasoning techniques.

In the remainder of this paper we ﬁrst discuss
in more detail the goal of modularizing crosscut-
ting concerns in legacy code and the technique of
inductive logic programming which we propose for
the uncovering of pointcuts. We discuss a number
of problems which are inherent in any attempt to
use automatic techniques for uncovering pointcuts.
We present an experiment in which ILP is used to
uncover pointcuts for one speciﬁc kind of aspects
which are implemented in legacy code as unique
methods. The ﬁnal sections of the paper discuss
our experiment in more detail and the conclusions
we draw from it.

2 Goal

Pre-AOP legacy code is bound to contain badly
modularized aspects which a maintainer of the sys-
tem would like to factor out. In order to aid the
maintainer in performing such a refactoring, tool
support is required. The basic requirement on such
a tool is that it allows one to identify code to fac-
tor out into an aspect and turn it into an advice
and pointcut while preserving the behavior of the
application. An additional requirement is of course
that the resulting advices and pointcuts actually
enhance the structure of the application by improv-
ing the -ilities [1]. Another consideration to take
into account is that the maintainer of the system
often lacks a profound knowledge of the implemen-
tation, thus such a tool would have to be largely
automated. The most important and challenging
part of this process, which is the focus of this paper,
is the automatic generation of suitable pointcuts.
Essentially our goal is to undo the manual weav-
ing process originally performed for certain con-
cerns in legacy code and turn these into actual as-
pects. In pre-AOP days adding, for example, log-
ging to the software was done by manually inserting
calls to the logging facilities at the necessary places
in the code. Nowadays, however this kind of behav-
ior can be implemented by using aspect technology.
While adding the concern, the original developer of
the software had a certain intention. While one can
ignore this intention and use a pointcut that sim-
ply enumerates the locations in the code where the
refactored concern originally occurred, the result-
ing pointcut does not at all improve the -ilities of
the code. A better solution is to try and uncover
the intention and encode it in the pointcut. Due to
the improved comprehensibility of this pointcut, it
is easier to maintain and evolve the software. How-
ever, as the maintainer of the code has limited un-
derstanding of the code, this process of extracting
a pointcut has to be automated.

3 Inductive Logic Program-

ming

We do not want to simply use a pointcut that enu-
merates all these points, but rather one that better
reﬂects the intent of the original developer by un-
covering a certain pattern that all these points have
in common. Stated this way this is in fact a data
mining problem, and we have looked into this ﬁeld
and the related ﬁeld of machine learning [6] for po-
tential solutions.

Inductive logic programming (ILP) [7] was cho-
sen as a particularly apt technique, as we are using
our previously developed AspectJ-like crosscut lan-
guage based on logic meta programming [3]. Cross-
cut expressions are formulated in this Prolog-like
language as logic queries over all the joinpoints oc-
curring in a program. The core of the language con-
sists of a number of logic predicates which can be
used to express conditions on the joinpoints, simi-
larly to AspectJ’s pointcut designators.

ILP is an inductive reasoning technique that is
situated at the intersection of logic programming
and machine learning. The goal of the technique is
to derive a logic query for a desired set of solutions,
based on a background theory that provides infor-
mation about these solutions. The technique also
requires a set of negative examples which should
not be solutions of the query.
ILP will general-
ize over the solutions using the information from
the background theory while using the negative ex-
amples to prevent over-generalization. The way in
which these generalizations are performed is depen-
dent on the chosen ILP algorithm.

We have so far successfully applied ILP to the
problem of uncovering intensional descriptions of
software views [9]. Software views in this work
are logic queries deﬁning a set of software entities
that belong to a particular view over the software.
ILP was used in an experiment where a set of state
changing methods on a Buffer class were given as
the desired set of solutions. We were able to suc-
cessfully derive rules stating that all these methods
belonged to the set because they did assignments
to instance variables or recursively called a method
which changed the state of the buﬀer.

The ILP technique maps well to the task of un-
covering pointcut deﬁnitions. The desired solutions

A ﬁrst question is what basic technique can be used
in the ﬁrst place to uncover intensional1 pointcuts.

1Notice that there is a distinction between ”intentional”
and ”intensional”. The word ”intentional” reﬂects the in-

tention as meant by a developer, while ”intensional” has a
set-theoretic meaning which indicates a concise description
of the elements of a set. We make this distinction as we can
not assert that the intention of the developer is reﬂected in
the automatically derived intension of the pointcut.

2

for the ILP algorithm consists of the joinpoints on
which we want to weave. The background the-
ory contains information on these joinpoints, which
consists of the solutions of the basic crosscut predi-
cates. We should also include information about
the method in which the joinpoints are deﬁned
like naming conventions, messages which are sent,
. . . The negative examples are implicitly deﬁned as
all the other joinpoints in the system.

The basic principle of ILP is generalization by
introducing variables in conditions over the back-
ground information. Note that variables and uni-
ﬁcation in logic programming are fairly equivalent
with the notion of wildcards in AspectJ [3], and
that this construct is largely responsible for allow-
ing pointcuts to be more concise [2]. As an example
take the situation where the desired joinpoints both
occur in the same class, though not in the same
method. This means the background theory con-
tains the facts within(jp1, ClassA, selectorA)
and within(jp2, ClassA, selectorB). The ILP
algorithm will generalize these two facts into
a single condition stating within(?jp, ClassA,
?selector), where ?jp and ?selector are vari-
ables, thus having uncovered a pattern in these
joinpoints.

4 Aspect Mining

We have identiﬁed interesting code to factor out
into an aspect using a comparatively simple tech-
nique. Some existing aspect mining techniques [4]
have taken a clue from the observation that scat-
tered code duplication is often a symptom of tan-
gled concerns [5], and have hence used pattern
matching techniques to ﬁnd similar code fragments
across a system. We have based ourselves on a
somewhat more limited observation: when one im-
plements the kind of aspects that are well handled
by an AspectJ-like language without actually us-
ing such a language, one winds up implementing
an ”advice” as a uniquely named method invoked
from several places in the system.

We applied the search for unique methods on a
standard VisualWorks Smalltalk image, which con-
tained about 3400 classes implementing a total of
about 66000 methods. The results were sorted by
the number of messages invoking each method and
the list was then scanned manually for methods

3

Class
Parcel
ParagraphEditor
UIPainterController

CodeRegenerator
AbstractChangeList
PundleModel

Selector
#markAsDirty
#resetTypein
#broadcastPending-
SelectionChange

#pushPC
#updateSelection:
#updateAfterDo:

Table 1: Classes and selectors of identiﬁed aspects.

that could be factored out as aspects. The man-
ual scan was necessary to ﬁlter out unique methods
that are used to perform side-eﬀects that are part
of the basic functionality of the code and would not
be interesting to factor out. The methods poten-
tially implementing aspects were mostly identiﬁed
on the basis of certain keywords in their name, and
by looking at the messages that invoke them.

Table 1 shows the implementing classes and
names of a few unique methods which we identi-
ﬁed as potential aspects. All of these turned out to
be examples of ”update notiﬁcation” aspects, apart
from the markAsDirty method which is an example
of a ”cache invalidation” aspect.

To our surprise another well-known example of
an ”update notiﬁcation” aspect in Smalltalk, the
dependency mechanism involving the changed:
method, did not turn up in our unique methods
list. The changed: method is provided by the
Object class and can be used by any object to
notify its dependents of it having changed. Two
other classes override this method however to add
logging and screen updating respectively. This
shows the limitation of the simple mining technique
used. Also cases where for example two methods
logToServer: exist because there are two variants
of the logging aspect will have been missed by this
technique.

The limitations of the aspect mining technique
are however not that important, as our focus in this
paper is on the uncovering of intensional pointcuts.
By limiting ourselves to factoring out single state-
ments invoking unique methods we can focus on
the problem of automatically uncovering pointcuts
to weave such statements back into the code. The
problems discussed later on are independent of the
mining technique used.

methodA

self methodB.
self log: variable.
self methodC.

methodB

variable := ’abc’.
variable2 := ’def’.

methodC

variable2 := ’ghi’.

Figure 1: Smalltalk source for the example join-
point representation.

reception jp methodA
message jp methodB

reception jp methodB

assignment jp variable
assignment jp variable2

access jp variable
message jp log:

reception jp log:

...

message jp methodC

reception jp methodC

assignment jp variable2

Figure 2: Example representation of joinpoints.

(1) reception jp methodA
(2)
message jp methodB
(3)
(4)
(5)

assignment jp variable
assignment jp variable2

reception jp methodB

*
message jp methodC

reception jp methodC

assignment jp variable2

(6)
(7)
(8)

Figure 3: Joinpoint graph after deleting the logging
code.

5 General Issues

We have identiﬁed several issues which are inherent
in any attempts to uncover an intensional descrip-
tion for a pointcut. In discussing these issues we

will show a few example joinpoint graphs using the
textual representation exempliﬁed in ﬁgure 2. The
ﬁgure shows the joinpoints occurring when method
methodA shown in ﬁgure 1 is executed. The join-
points are listed one after another as they occur in
time, while indentation is used to show that a join-
point occurs in the cﬂow of another. The ellipses
shows where the joinpoints of whatever method in-
voked by the message log: ﬁt in.

When deleting a code snippet from a method, as
the ﬁrst step in the refactoring to an advice, the
joinpoints that result as the consequence of that
snippet are removed from the joinpoint graph of
every execution of the program. For example when
we remove the logging statement from ﬁgure 1, the
joinpoint graph of the execution of method methodA
becomes the one shown in ﬁgure 3. The asterisk
indicates the point at which an advice should re-
insert the joinpoints of the removed snippet.

When refactoring all calls to a unique method
there will be several such ”asterisks”. Our goal is
to uncover a pointcut for all of them, but in the
following sections we will focus on one such point
that causes problems which render it diﬃcult to
uncover an intensional pointcut for the set of all of
those points.

5.1 Joinpoint Choice Problem
A ﬁrst problem in determining a pointcut to in-
ject joinpoints back into the joinpoint graph at a
certain position is that either the joinpoint right
before or the one right after that position can be
intercepted. That is, the refactored advice could be
either a before- or an after-advice. For either choice
of advice there are often even other joinpoints be-
sides the one right before or after the position that
could be intercepted.

Taking ﬁgure 3 as an example again, there are
several advices with diﬀerent pointcuts possible to
inject logging at the point denoted by the aster-
isk. The advice could specify that logging should
occur after the joinpoint labeled (2) or before the
joinpoint labeled (6).
In the after case, the ad-
vice could in fact also intercept either joinpoint (5)
and in the before case also the joinpoint (7) or (8).
While weaving the logging code on either of these
three joinpoints does not result in the exact same
joinpoint graph as the original in ﬁgure 2, the eﬀect
of the refactored code would in fact be the same.

4

self log: ’About to execute

methodD:with: now.’.

self methodD: self computedValue

with: self anotherComputedValue

...

self cacheTimedOut

ifTrue:[self invalidateCache]

...

Figure 4: Example source code for ﬂattened expres-
sions problem.

Figure 6: Example of the Dynamic Conditions &
Properties Problem.

*
message jp computedValue

...

message jp anotherComputedValue

...

message jp methodD:with:

...

Figure 5: Example joinpoint graph for ﬂattened
expressions problem.

The refactoring should not only preserve the be-
havior of the application, but the generated point-
cut also should improve the -ilities of the software.
This has an impact on which of the possible join-
points the generated pointcut should be based on.
As in the example, when the intent was for logging
to occur in certain methods such as methodA after
the message methodB was sent, the pointcut should
deﬁnitely be based on joinpoint (2), while on the
other hand if the intent was for logging to occur
before sends of the message methodC, the joinpoint
(6) should be used. Choosing the wrong joinpoint
would result in an incorrect pointcut that aggra-
vates the maintainer’s problems.

5.2 Flattened Expressions Problem
A second problem in determining pointcuts is
caused by the fact that the subexpressions of an
expression result in a ﬂattened list of joinpoints pre-
ceding the joinpoint of the expression itself. Take
the code of ﬁgure 4, the joinpoint graphs result-
ing from executing that code will have the struc-
ture shown in ﬁgure 5.
It is clear from read-
ing the source that the intention of the original
developer was for logging to occur because the
methodD:with: method is called. When the devel-
oper had used aspect-oriented programming, she
would have speciﬁed a pointcut intercepting this

after ?jp matching {

...,
inObject(?jp,?obj),
[?obj cacheTimedOut] }

Figure 7: A possible pointcut for the example
above.

call to methodD:with:. However this is not ex-
actly reﬂected in the manually woven implementa-
tion as can be seen in the joinpoint graph: the log-
ging actually precedes the computedValue message
joinpoint. This is not an error of the original de-
veloper but a compromise between having the log-
ging happen at the exact correct moment and the
clarity of the code: while the developer could have
used temporary variables to store the arguments of
methodD:with:, send the logging and then call the
method using the temporaries as arguments, this
would have cluttered the code and is therefore not
common coding practice. This unfortunately com-
plicates the automated uncovering of a pointcut
and advice, as the tool can not always determine
whether weaving on the methodD:with: message
joinpoint instead of the computedValue message
joinpoint would not alter the desired behavior of
the application. The only option for the tool is then
to use a pointcut weaving on the computedValue
message joinpoint. There may be several other oc-
currences of logging before a methodD:with: mes-
sage where the tool has to actually weave on the
joinpoint deﬁning the value of the with: argument.
This unfortunately does not reﬂect the original in-
tent of the developer and will probably result in a
less-than ideal pointcut.

5.3 Dynamic Conditions Problem
While less a fundamental problem than the pre-
vious two issues, a third issue that needs to be
taken into account is that there are sometimes dy-

5

namic conditions attached to the manually woven
concerns. Figure 6 shows an example where the
method invalidateCache is only invoked when
the cache has timed out. It would not clarify the
code to only refactor the invalidateCache mes-
sage send while leaving the cacheTimedOut condi-
tion in place. The test should in fact be part of the
pointcut itself.

Figure 7 depicts the structure of a possible point-
cut. Note that the condition cacheTimedOut is
part of the pointcut which will only weave if the
receiving object’s cache is timed out. This condi-
tion is speciﬁed using a boolean Smalltalk expres-
sion enclosed in square brackets, this is equivalent
to AspectJ’s if mechanism.

Unlike the previous two issues, this issue is prob-
ably straightforward to solve. When identifying
snippets of code as implementing an aspect, one
needs to check whether this code occurs in a condi-
tion and is the only consequent of that condition.
Putting the condition in the pointcut itself requires
transforming variable references such as the one to
self in the example to variables in the pointcut
such as the ?o variable which captures the value of
self in the original context of the joinpoint using
the inObject predicate.

6 Applying ILP

Before discussing an experiment we performed, we
will ﬁrst give a brief overview of how the input for
the ILP algorithm is determined and what speciﬁc
ILP algorithm we have used in our experiments.
To determine the joinpoints on which to weave to
refactor calls to unique methods, we ﬁrst construct
a skeleton joinpoint graph similar to the one shown
in ﬁgure 2 of the program. This joinpoint graph
covers the possible joinpoint graphs that can ac-
tually occur when executing the code. The prop-
erties of the joinpoints in this graph are limited
to information that can be statically determined
from the program’s source. From the graph we de-
termine the joinpoints following and preceding the
call that will be refactored, these joinpoints can
be used to respectively weave before or after. For
all these joinpoints, the facts of the predicates in
the crosscut language are determined and used as
the background information for the ILP algorithm.
The joinpoints themselves form the desired solution

6

set of the algorithm.

The speciﬁc ILP algorithm we used is based on
relative least general generalization [8]. The algo-
rithm creates queries by anti-unifying each input
fact with all the other input facts. Anti-uniﬁcation
is simply the process of introducing variables into
facts where they diﬀer. The algorithm boils down
to recognizing similarities in the background knowl-
edge and using this information to create queries
that describe the desired solutions.

7 Example in Smalltalk

In this section we take a closer look at one of
the potential aspectual methods we identiﬁed in
Smalltalk. This method is representative for some
of the diﬃculties we encountered in applying ILP
to uncover intensional pointcuts.

The method broadcastPendingSelectionChange

is implemented on the class UIPainterController,
a class in the VisualWorks UI Framework. There
are 18 calls to this method from within several
other classes of the framework, some of these calls
are shown in ﬁgure 8 in the context in which they
occur.

While our goal is to automatically uncover point-
cuts describing these calls with as little input from
the maintainer as possible, for this experiment we
did ﬁrst investigate what the intent of the method
is. From the method’s name we can guess it imple-
ments a notiﬁcation aspect which notiﬁes certain
other objects that the current selection is about to
change.

We ﬁrst applied the ILP algorithm to the set of
direct before and also the set of direct after join-
points of the broadcastPendingSelectionChange
calls. The ILP algorithm failed to uncover a
logic query which covered all the desired join-
points while not covering any negative exam-
ples. This means there is no better solution than
to simply enumerate the joinpoints. The likely
cause is that the direct before and after join-
points are in fact not related to the intent of
calling broadcastPendingSelectionChange. For
example many of the direct after joinpoints are
calls of spec occurring in the code in calls of
replaceElement:basedOnSpec: as shown in ﬁg-
ure 8. There are in fact many calls of spec in the
Smalltalk image before which there is no call to

(controller replaceElement:

controller broadcastPendingSelectionChange.
controller select:
controller broadcastPendingSelectionChange.
controller removeSelection:
controller broadcastPendingSelectionChange.
controller appendSelections:
controller broadcastPendingSelectionChange.
currentState := self extractFullSpec.
doEmbed

selections

selection

sels first basedOnSpec:self spec)

self broadcastPendingSelectionChange.
(selectedComponents := self selectedComponents) size > 0 ...
...
self removeSelections.

Figure 8: Examples of snippets in the code where broadcastPendingSelectionChange is used.

if

send(?joinpoint,?message),
within(?joinpoint,[SelectModeTracker],?selector),
inProtocol([UIPainterController],?message,[#’selection manipulation’])

Figure 9: The induced pointcut

broadcastPendingSelectionChange. Our earlier
investigation suggests that the call actually occurs
because of the call to select: that follows it, a
method that changes the selection. This again il-
lustrates the ﬂattened expressions problem.

A more severe variant of the ﬂattened expres-
sion problem also occurs in practice. The last ex-
ample in ﬁgure 8 shows a method doEmbed where
broadcastPendingSelectionChange occurs at the
beginning of the method, while an actual change of
the selection doesn’t happen until a few lines fur-
ther down. We do not know whether this call has
to occur at this location or whether it was imple-
mented like this for aesthetical reasons.

the

intent of

related to the

In a second experiment, we ignored the ﬂat-
tened expressions problem and manually se-
lected the after joinpoints which we presumed
are
to
calls
broadcastPendingSelectionChange.
Figure 9
shows the intension which is derived by the
ILP algorithm.
This logic query states that
broadcastPendingSelectionChange should occur
before every send joinpoint to a method imple-
mented in the protocol selection manipulation.
Although this query describes the intent of the
pointcut fairly well, it also covers a small number

of joinpoints which should not be woven on. This
is due to our limited implementation of the ILP
algorithm which does not add these joinpoints as
exceptions or negated clauses to the induced query.

8 Discussion

Based on our experiments we can conclude that au-
tomatically uncovering pointcuts from legacy code
using machine learning techniques is a promising
approach, although the three problems we have dis-
cussed above need to be solved. A potential solu-
tion for the ﬂattened expression problem is to ex-
tend dynamic joinpoint models with a new con-
struct:
the ”statement joinpoint”. A statement
joinpoint would consider the execution of a state-
ment as a single joinpoint, with all the joinpoints
of the subexpressions of the statement occurring
in its cﬂow. This bridges the mismatch between
the dynamic joinpoint models used in AOP and the
static weaving model used when manually weaving.
This is exactly what we did in our second experi-
ment where we ignored the ﬂattened expressions
and used the top-level message joinpoints of state-
ments where select: etc. where sent. Using a

7

pointcut language supporting statement joinpoints
would allow us to simply weave on executions of
statements where the messages select: etc. are
sent.

As for the dynamic conditions problem, a so-
lution was already discussed when discussing the
problem. While this problem is one to take into ac-
count, its solution seems straightforward by trans-
forming the conditions to be part of the pointcut.
The joinpoint choice problem is more diﬃcult
to tackle. A potential solution we have in mind
would be to apply ILP to all possible combinations
of joinpoints and to compare the resulting point-
cuts. We expect that when any of these combina-
tions are related to the intent of why the aspect
needs to be woven there, this will result in a more
intensional pointcut than for the other combina-
tions. This of course necessitates a way of com-
paring pointcuts based on their relative intension-
ality. Of course considering all possible combina-
tions leads to a combinatoric explosion, but many
combinations can be disregarded: it is uncommon
to have an advice that needs to occur before some
points and after others, to occur after the reception
of some messages and after the last statement of a
method, . . .

9 Future Work

One of the obstacles we encountered in our experi-
ment was due to the limited implementation of our
ILP system and the particular algorithm used. The
algorithm used never adds negative conditions to
queries to ensure no negative examples are covered.
In cases where the induced pointcut is too general
and covers just a few negative examples, it might
be better to explicitly add the negative examples as
exceptions, rather than resort to an enumeration of
the desired joinpoint solutions. Furthermore, there
exist numerous diﬀerent ILP algorithms.
In our
experiment we used one of these algorithms: rela-
tive least general generalization. Using other algo-
rithms, or other machine learning techniques alto-
gether, can lead to the induction of better pointcuts
and may also prove to be more eﬃcient.

In this paper we limited ourselves to aspects
which are implemented as a unique method. As
mentioned before, this approach is too restrictive to
cover all possible aspects. Part of our future work

consists of generalizing our approach and conduct-
ing experiments with other kinds of aspects.

It might also be interesting to try our approach
on Java programs. Due to the static typing in
Java, more information is available to the ILP al-
gorithm which may lead to better pointcuts. On
the other hand, we could also obtain this informa-
tion in Smalltalk using a type inferencer. However
then we would have to take into account that the
inferred types are not necessarily correct.

10 Conclusions

We have demonstrated the refactoring of aspects
implemented as unique methods using one particu-
lar technique to uncover intensional pointcuts: in-
ductive logic programming. We ﬁrst discussed a
number of elementary problems that face any au-
tomatic uncovering technique: the joinpoint choice
problem, the ﬂattened expressions problem and the
dynamic conditions problem. These problems pre-
vented us from uncovering a suitable pointcut in
the ﬁrst of our experiments.
In a second experi-
ment we manually circumvented the problems and
were able to uncover a pointcut that both described
the correct joinpoints, and exhibited the desired
-ilities because of its intensional description. In the
discussion we proposed for future work automatic
ways of circumventing the problems. Although sev-
eral problems still need addressing, the automated
uncovering of intensional pointcuts to support the
aspectualization of legacy code seems to be a pos-
sibility.

Acknowledgments

We would like to thank Johan Brichau for proof-
reading this paper and his insightful comments.

References

[1] R. E. Filman. Injecting ilities. In Proceedings
of the Aspect-Oriented Programming workshop
at ICSE’98, 1998.

[2] R. E. Filman. Aspect-oriented programming
is quantiﬁcation and obliviousness. In P. Tarr,
L. Bergmans, M. Griss, and H. Ossher, editors,

8

Proceedings of the Workshop on Advanced Sep-
aration of Concerns at OOPSLA 2000, 2000.

[3] K. Gybels and J. Brichau. Arranging language
features for more robust pattern-based cross-
cuts. In Proceedings of the Second International
Conference of Aspect-Oriented Software Devel-
opment, 2003.

[4] J. Hannemann. Overcoming the prevalent de-
composition of legacy code.
In Workshop on
Advanced Separation of Concerns at the Inter-
national Conference on Software Engineering
2001, 2001.

[5] G. Kiczales, J. Lamping, A. Mendhekar,
C. Maeda, C. V. Lopes, J.-M. Loingtier, and
J. Irwin. Aspect-oriented programming. In Pro-
ceedings of the European conference on Object-
Oriented Programming. Springer-Verlag,
jun
1997.

[6] T. Mitchell. Machine Learning. McGraw-Hill

International Editions, 1997.

[7] S. Muggleton.

Inductive logic programming.

London: Academic Press, 1992.

[8] G. Plotkin. A note on inductive generalization.
In B. Meltzer and D. Michie, editors, Machine
Intelligence, volume 5, pages 153–163. Edin-
burgh University Press, 1970.

[9] T. Tourw´e, J. Brichau, A. Kellens, and K. Gy-
bels. Induced intentional software views. Sub-
mitted to European Smalltalk Users Group con-
ference 2003.

9

