Differential Equation Basics
Andrew Witkin
Pixar Animation Studios

SIGGRAPH '99 COURSE NOTES

SB1

PHYSICALLY BASED MODELING

x1
x

A Canonical Differential Equation

f(x,t)
x2

x = f(x,t)
· x(t): a moving point. · f(x,t): x's velocity.

SIGGRAPH '99 COURSE NOTES

SB2

PHYSICALLY BASED MODELING

Vector Field
The differential equation
x = f (x,t) defines a vector field over x.

SIGGRAPH '99 COURSE NOTES

SB3

PHYSICALLY BASED MODELING

Integral Curves
Start Here
Pick any starting point, and follow the vectors.

SIGGRAPH '99 COURSE NOTES

SB4

PHYSICALLY BASED MODELING

Initial Value Problems
Given the starting point, follow the integral curve.

SIGGRAPH '99 COURSE NOTES

SB5

PHYSICALLY BASED MODELING

Euler's Method
· Simplest numerical solution method
· Discrete time steps · Bigger steps, bigger
errors.
x(t + t) = x(t) + t f(x,t)

SIGGRAPH '99 COURSE NOTES

SB6

PHYSICALLY BASED MODELING

Problem I: Inaccuracy
Error turns x(t) from a circle into the spiral of your choice.

SIGGRAPH '99 COURSE NOTES

SB7

PHYSICALLY BASED MODELING

Problem II: Instability
to Neptune!

SIGGRAPH '99 COURSE NOTES

SB8

PHYSICALLY BASED MODELING

The Midpoint Method

a. Compute an Euler step a x = t f (x,t)

b b. Evaluate f at the midpoint

( )c

f mid = f

x + x, t + t 22

c. Take a step using the midpoint value

x(t + t) = x(t) + t f mid

SIGGRAPH '99 COURSE NOTES

SB9

PHYSICALLY BASED MODELING

More methods...
· Euler's method is 1st Order.
· The midpoint method is 2nd Order.
· Just the tip of the iceberg. See Numerical Recipes for more.
· Helpful hints:
­ Don't use Euler's method (you will anyway.)
­ Do Use adaptive step size.

SIGGRAPH '99 COURSE NOTES

SB10

PHYSICALLY BASED MODELING

Modular Implementation
· Generic operations: ­ Get dim(x) ­ Get/set x and t ­ Deriv Eval at current (x,t)
· Write solvers in terms of these. ­ Re-usable solver code. ­ Simplifies model implementation.

SIGGRAPH '99 COURSE NOTES

SB11

PHYSICALLY BASED MODELING

Solver Interface

System

Dim(state)

Solver

Get/Set State

Deriv Eval

SIGGRAPH '99 COURSE NOTES

SB12

PHYSICALLY BASED MODELING

A Code Fragment
void euler_step(sys,h){ float time; get_state(sys,temp1, &time); deriv_eval(sys,temp2); vtimes(h,temp2); vadd(temp2,temp1);*/ set_state(sys,temp1,time + h); }

SIGGRAPH '99 COURSE NOTES

SB13

PHYSICALLY BASED MODELING

Particle Dynamics
Andrew Witkin
Pixar Animation Studios

SIGGRAPH '99 COURSE NOTES

SC1

PHYSICALLY BASED MODELING

Overview
· One Lousy Particle · Particle Systems · Forces: gravity, springs ... · Implementation and Interaction · Simple collisions

SIGGRAPH '99 COURSE NOTES

SC2

PHYSICALLY BASED MODELING

A Newtonian Particle
· Differential equation: f = ma · Forces can depend on:
­ Position, Velocity, Time

x

=

f (x, x,t) m

SIGGRAPH '99 COURSE NOTES

SC3

PHYSICALLY BASED MODELING

Second Order Equations

x

=

f (x, x,t) m

Not in our standard form because it has 2nd derivatives

{x = v v =fm

Add a new variable, v, to get a pair of coupled 1st order equations.

SIGGRAPH '99 COURSE NOTES

SC4

PHYSICALLY BASED MODELING

Phase Space

x v
x v x= v v fm

Concatenate x and v to make a 6-vector: Position in Phase Space.
Velocity in Phase Space: another 6-vector.
A vanilla 1st-order differential equation.

SIGGRAPH '99 COURSE NOTES

SC5

PHYSICALLY BASED MODELING

Particle Structure

x Position

Position in

v Velocity

Phase Space

f Force Accumulator

m mass

SIGGRAPH '99 COURSE NOTES

SC6

PHYSICALLY BASED MODELING

Solver Interface

x Dim(state)

6

vx

f Get/Set State v

mv
Deriv Eval f m

SIGGRAPH '99 COURSE NOTES

SC7

PHYSICALLY BASED MODELING

Particle Systems

particles n time

xxxxx

x

...v v v v v
fffff

v f

mmmmm

m

SIGGRAPH '99 COURSE NOTES

SC8

PHYSICALLY BASED MODELING

Particle System
particles n time

Solver Interface

Dim(State)

Get/Set State

Diffeq Solver

Deriv Eval

6n

x1 v1 x2 v2

v1

f1 m1

v2

f2 m2

xn vn

vn

fn mn

SIGGRAPH '99 COURSE NOTES

SC9

PHYSICALLY BASED MODELING

Deriv Eval Loop
· Clear forces
­ Loop over particles, zero force accumulators.
· Calculate forces
­ Sum all forces into accumulators.
· Gather
­ Loop over particles, copying v and f/m into destination array.

SIGGRAPH '99 COURSE NOTES

SC10

PHYSICALLY BASED MODELING

Forces

· Constant · Position/time dependent · Velocity-Dependent · n-ary

gravity force fields
drag springs

SIGGRAPH '99 COURSE NOTES

SC11

PHYSICALLY BASED MODELING

Force Structures
· Unlike particles, forces are heterogeneous.
· Force Objects:
­ black boxes ­ point to the particles they influence
­ add in their own forces (type dependent)
· Global force calculation:
­ loop, invoking force objects

SIGGRAPH '99 COURSE NOTES

SC12

PHYSICALLY BASED MODELING

Particle Systems, with forces
particles n time forces nforces

xx x

...v v v
ff f

mm

m

F F F ...F
A list of force objects to invoke

SIGGRAPH '99 COURSE NOTES

SC13

PHYSICALLY BASED MODELING

Force Law:
fgrav = mG
x v f
m

Gravity
Particle system
GF
sys p apply_fun
p->f += p->m * F->G

SIGGRAPH '99 COURSE NOTES

SC14

PHYSICALLY BASED MODELING

Force Law:
fdrag = -kdragv
x v f
m

Viscous Drag
Particle system
kF
sys p apply_fun
p->f -= F->k * p->v

SIGGRAPH '99 COURSE NOTES

SC15

PHYSICALLY BASED MODELING

Damped

Force Law:

Spring

f

1

=

-

ks( x

-

r)

+

kd

 v x x

 

x x

Particle system

f 2 = -f 1

x vx fv mf
m

p1 kd

sys F

p2 ks apply_fun

SIGGRAPH '99 COURSE NOTES

SC16

PHYSICALLY BASED MODELING

...x x
vv

x v

1

ff f

mm

m

Clear Force Accumulators

Deriv Eval Loop
2 F F F ...F
Invoke apply_force functions

xx x

...v v v
ff f

mm

m

3
Return [v, f/m,...] to solver.

SIGGRAPH '99 COURSE NOTES

SC17

PHYSICALLY BASED MODELING

Solver Interface

System

Dim(state)

You are Here

Get/Set State
Deriv Eval

Solver

SIGGRAPH '99 COURSE NOTES

SC18

PHYSICALLY BASED MODELING

Bouncing off the Walls
· Later: rigid body collision and contact.
· For now, just simple point-plane collisions.
· Add-ons for a particle simulator.

SIGGRAPH '99 COURSE NOTES

SC19

PHYSICALLY BASED MODELING

Normal and Tangential Components
VN
N V VT VN = (NV)N VT = V - VN

SIGGRAPH '99 COURSE NOTES

SC20

PHYSICALLY BASED MODELING

Collision Detection

X V

(X - P) N < 
NV < 0

PN

· Within  of the wall. · Heading in.

SIGGRAPH '99 COURSE NOTES

SC21

PHYSICALLY BASED MODELING

Collision Response VN -krVN

V

VT VT

V

Before

After

V = VT - krVN

SIGGRAPH '99 COURSE NOTES

SC22

PHYSICALLY BASED MODELING

XF V
PN

Conditions for Contact
(X - P) N < 
NV < 
· On the wall · Moving along the wall · Pushing against the wall

SIGGRAPH '99 COURSE NOTES

SC23

PHYSICALLY BASED MODELING

FN F F
N

Contact Force
F = FT
The wall pushes back, cancelling the normal component of F.
(An example of a constraint force.)

SIGGRAPH '99 COURSE NOTES

SC24

PHYSICALLY BASED MODELING

Cursor
X

Basic 2-D Interaction

Mouse Spring

Operations:
Nail
­ Create ­ Attach ­ Drag ­ Nail

SIGGRAPH '99 COURSE NOTES

SC25

PHYSICALLY BASED MODELING

Try this at home!
The notes give you everything you need to build a basic interactive mass/spring simulator--try it.

SIGGRAPH '99 COURSE NOTES

SC26

PHYSICALLY BASED MODELING

Rigid Body Simulation
David Baraff
PPiixxaarr AAnniimmaattiioonn SSttuuddiiooss

SIGGRAPH '99 COURSE NOTES

SD1

PHYSICALLY BASED MODELING

Particle Motion
x(t) v(t)

SIGGRAPH '99 COURSE NOTES

SD2

PHYSICALLY BASED MODELING

Particle State
Y =  vx((tt)) 644x7(t)448 644v7(t)448 Y=

SIGGRAPH '99 COURSE NOTES

SD3

PHYSICALLY BASED MODELING

Particle Dynamics
x(t) v(t)

SIGGRAPH '99 COURSE NOTES

F(t)

SD4

PHYSICALLY BASED MODELING

State Derivative

d dt

Y

=

d dt

 xv((tt))

=

 F(vt()t/)m

d Y= dt

644v7(t)448 64F4(7t) /4m48

SIGGRAPH '99 COURSE NOTES

SD5

PHYSICALLY BASED MODELING

Multiple Particles

SIGGRAPH '99 COURSE NOTES

SD6

PHYSICALLY BASED MODELING

State Derivative

 x1(t)  v1(t) 

d dt

Y

=

d dt

    

v1(t) M

  

xn vn

(t) (t)

=

  

F1(t) M

/

m1

  

 

vn (t) Fn (t) / mn

 

d Y= dt

... 6n elements ...

SIGGRAPH '99 COURSE NOTES

SD7

PHYSICALLY BASED MODELING

ODE solution

...

d dt

Y(t0

+

t)

d dt Y(t0 )

Y(t0 + t)

Y(t0)

Y(t1)

SIGGRAPH '99 COURSE NOTES

SD8

PHYSICALLY BASED MODELING

Y(t0) len
t0 t1 dydt

ODE solver

Y(t1)

void dydt(double t, double y[], double ydot[])

SIGGRAPH '99 COURSE NOTES

SD9

PHYSICALLY BASED MODELING

x1(t) v1(t) Y(t) = xn(t) vn(t)

dydt

v1(t)

d Y(t) = dt

F1(t)/ m1

vn(t)

Fn(t)/ mn

SIGGRAPH '99 COURSE NOTES

SD10

PHYSICALLY BASED MODELING

Rigid Body State

x(t) v(t)

 x(t)

 ?

Y

=

 

v?(t)

SIGGRAPH '99 COURSE NOTES

SD11

PHYSICALLY BASED MODELING

Rigid Body Equation of Motion

 x(t)   v(t)

dY dt

=

d dt

  

? M?v(t)

=

 ?

 

F?(t)

SIGGRAPH '99 COURSE NOTES

SD12

PHYSICALLY BASED MODELING

Net Force f1
x(t)
F(t) =  fi
v(t) f2
f3

SIGGRAPH '99 COURSE NOTES

SD13

PHYSICALLY BASED MODELING

Orientation We represent orientation as a rotation matrix R(t). Points are transformed from body-space to world-space as:
p(t) = R(t)p0 + x(t)

He's lying. Actually, we use quaternions.

SIGGRAPH '99 COURSE NOTES

SD14

PHYSICALLY BASED MODELING

p0 0

x(t) p(t)

body space
SIGGRAPH '99 COURSE NOTES

world space

SD15

PHYSICALLY BASED MODELING

Angular Velocity
We represent angular velocity as a vector (t), which encodes both the axis of the spin and the speed of the spin.

SIGGRAPH '99 COURSE NOTES

SD16

PHYSICALLY BASED MODELING

Angular Velocity Definition (t)

x(t)
How are R(t) and (t) related?

SIGGRAPH '99 COURSE NOTES

SD17

PHYSICALLY BASED MODELING

Angular Velocity

·
R(t)

and

(t)

are

related

by

0

d dt

R(t)

=

 

z - y

(t) (t)

-z (t) 0
 x (t)

 y (t)

- x 0

(t)

R(t

)

((t)* is a shorthand for the above matrix)

SIGGRAPH '99 COURSE NOTES

SD18

PHYSICALLY BASED MODELING

Rigid Body Equation of Motion

 x(t)   v(t) 

d Y
dt

=

d dt

 R(t)   <Mv(t(t))>

=

(t)* R(t)

 

F(t) ?

 

Need to relate ·(t) and mass distribution to F(t).

SIGGRAPH '99 COURSE NOTES

SD19

PHYSICALLY BASED MODELING

Inertia Tensor

 Ixx

I(t)

=

 

Iy Iz

x x

diagonal terms

Ixy Ixz

Iy y Iz y

Iy Iz

z z

 

off-diagonal terms

Ixx = M (y2 + z2 ) dV V
Integrals are precomputed.

Ixy = - M xydV V

SIGGRAPH '99 COURSE NOTES

SD20

PHYSICALLY BASED MODELING

Net Torque p1
p2 x(t) f2 p3

f1 f3

SIGGRAPH '99 COURSE NOTES

 (t) =  (pi - x(t)) × fi

SD21

PHYSICALLY BASED MODELING

Rigid Body Equation of Motion

 x(t)   v(t) 

d dt

Y

=

d dt

 R(t) 

 

I (Mt )v(t()t )

=

(t)* R(t)

 

F(t)  (t)

 

P(t) ­ linear momentum L(t) ­ angular momentum

SIGGRAPH '99 COURSE NOTES

SD22

PHYSICALLY BASED MODELING

What's in the Course Notes
1. Implementation of dydt for rigid bodies (bookkeeping, data structures, computations)
2. Quaternions ­ derivations and code 3. Miscellaneous formulas and examples 4. Derivations for force and torque equations,
center of mass, inertia tensor, rotation equations, velocity/acceleration of points

SIGGRAPH '99 COURSE NOTES

SD23

PHYSICALLY BASED MODELING

Constraints
We want rigid bodies to behave as solid objects, and not inter-penetrate. By applying constraint forces between contacting bodies, we prevent interpenetration from occurring. We need to:
a) Detect interpenetration b) Determine contact points c) Compute constraint forces

SIGGRAPH '99 COURSE NOTES

SD24

PHYSICALLY BASED MODELING

Simulations with Collisions

Y(t0)
SIGGRAPH '99 COURSE NOTES

SD25

PHYSICALLY BASED MODELING

Simulations with Collisions

Y(t0 + t) Y(t0)

SIGGRAPH '99 COURSE NOTES

SD26

PHYSICALLY BASED MODELING

Simulations with Collisions

Y(t0 +2t) Y(t0 + t) Y(t0)

SIGGRAPH '99 COURSE NOTES

SD27

PHYSICALLY BASED MODELING

An Illegal State Y

Y(t0 +2t) Y(t0 + t) Y(t0)

Y(t0 +3t)
illegal state

SIGGRAPH '99 COURSE NOTES

SD28

PHYSICALLY BASED MODELING

Backing up to the Collision Time Y(tc)

SIGGRAPH '99 COURSE NOTES

SD29

PHYSICALLY BASED MODELING

Colliding Contact

n pa

A

pa

B

n · pa < 0

SIGGRAPH '99 COURSE NOTES

SD30

PHYSICALLY BASED MODELING

Resting Contact

nA

pa B

pa

n · pa = 0

SIGGRAPH '99 COURSE NOTES

SD31

PHYSICALLY BASED MODELING

Collision Process t

no force

no force

SIGGRAPH '99 COURSE NOTES

SD32

PHYSICALLY BASED MODELING

A Soft Collision

force

velocity

t
SIGGRAPH '99 COURSE NOTES

SD33

PHYSICALLY BASED MODELING

A Harder Collision

force

velocity

t
SIGGRAPH '99 COURSE NOTES

SD34

PHYSICALLY BASED MODELING

A Very Hard Collision

force

velocity

t
SIGGRAPH '99 COURSE NOTES

SD35

PHYSICALLY BASED MODELING

A Rigid Body Collision

impulsive force

velocity

fimp =  t = 0

SIGGRAPH '99 COURSE NOTES

SD36

PHYSICALLY BASED MODELING

Colliding Contact

n pa

A

pa

B

impulse (alters velocity)

SIGGRAPH '99 COURSE NOTES

SD37

PHYSICALLY BASED MODELING

Resting Contact

n
pa B

A pa

force (alters acceleration)

external forces

SIGGRAPH '99 COURSE NOTES

SD38

PHYSICALLY BASED MODELING

Y(t), t
Update current state

dydt for Solid Objects d Y(t) dt

Exceptions
Penetration detected Discontinuity Estimate: tc

Constraint/ friction force determination

Collision detection

Contact point determination

SIGGRAPH '99 COURSE NOTES

SD39

Collision response
PHYSICALLY BASED MODELING

In the Course Notes ­ Collision Detection
Bounding box check between n objects: yes, you can avoid O(n2) work. Don't even settle for O(n log n) ­ insist on an O(n) algorithm!
A coherence based collision detection strategy for convex polyhedra: it's simple, efficient and (relatively) easy to program.

SIGGRAPH '99 COURSE NOTES

SD40

PHYSICALLY BASED MODELING

Computing Impulses

n pa­

A
?pa+ =

B jn

SIGGRAPH '99 COURSE NOTES

SD41

PHYSICALLY BASED MODELING

Coefficient of Restitution
n · pa+ = ­ (n · pa­)

n pa­ B

A jn

=1



=

1 2

=0

SIGGRAPH '99 COURSE NOTES

SD42

PHYSICALLY BASED MODELING

Computing j

n · pa+ = ­ (n · pa­)

cj + b = d

n B

A pa
jn

SIGGRAPH '99 COURSE NOTES

SD43

PHYSICALLY BASED MODELING

Computing j
( )n · (pa+ ­ pb+) = ­  n · (pa­ ­ pb­)

A

n pa
B pb

jn

SIGGRAPH '99 COURSE NOTES

SD44

PHYSICALLY BASED MODELING

Computing j
( )n · (pa+ ­ pb+) = ­  n · (pa­ ­ pb­)

cj + b = d

A

n pa
B pb

jn

SIGGRAPH '99 COURSE NOTES

SD45

PHYSICALLY BASED MODELING

In the Course Notes ­ Collision Response
Data structures to represent contacts (found by the collision detection phase).
Derivations and code for computing the impulse between two colliding frictionless bodies for a particular coefficient of .
Code to detect collisions and apply impulses.

SIGGRAPH '99 COURSE NOTES

SD46

PHYSICALLY BASED MODELING

Resting Contact Forces external forces
nA
pa
B
fn

SIGGRAPH '99 COURSE NOTES

SD47

PHYSICALLY BASED MODELING

Conditions on the Constraint Force
To avoid inter-penetration, the force strength f must prevent the vertex pa from accelerating downwards. If B is fixed, this is written as
n · pa  0

SIGGRAPH '99 COURSE NOTES

SD48

PHYSICALLY BASED MODELING

Computing f

n · pa  0

af +b 0

n B

A pa
fn

SIGGRAPH '99 COURSE NOTES

SD49

PHYSICALLY BASED MODELING

Conditions on the Constraint Force

To prevent the constraint force from holding bodies together, the force must be repulsive:
f 0

Does the above, along with

n · pa  0

af +b 0

sufficiently constrain f ?

SIGGRAPH '99 COURSE NOTES

SD50

PHYSICALLY BASED MODELING

Workless Constraint Force

nA pa
B fn

Either
af +b= 0 f0
or af +b> 0 f=0

SIGGRAPH '99 COURSE NOTES

SD51

PHYSICALLY BASED MODELING

Conditions on the Constraint Force
To make f be workless, we use the condition f  (a f + b) = 0
The full set of conditions is af +b 0 f0
f  (a f + b) = 0

SIGGRAPH '99 COURSE NOTES

SD52

PHYSICALLY BASED MODELING

Multiple Contact Points C

B
SIGGRAPH '99 COURSE NOTES

A f2 n2

f1 n1

SD53

PHYSICALLY BASED MODELING

Conditions on f11

Non-penetration: a11 f1 + a12 f2 + b1  0

Repulsive: f1  0

Workless: f1  (a11 f1 + a12 f2 + b1) = 0

SIGGRAPH '99 COURSE NOTES

SD54

PHYSICALLY BASED MODELING

Quadratic Program for f11 and f22

Non-penetration: a11 f1 + a12 f2 + b1  0 a21 f1 + a22 f2 + b2  0

Repulsive: f1  0 f2  0

Workless: f1  (a11 f1 + a12 f2 + b1) = 0 f2  (a21 f1 + a22 f2 + b2) = 0

SIGGRAPH '99 COURSE NOTES

SD55

PHYSICALLY BASED MODELING

In the Course Notes ­ Constraint Forces
Derivations of the non-penetration constraints for contacting polyhedra.
Derivations and code for computing the aij and bi coefficients.
Code for computing and applying the constraint forces fi ni .

SIGGRAPH '99 COURSE NOTES

SD56

PHYSICALLY BASED MODELING

Quadratic Programs with Equality Constraints

Non-penetration: a11 f1 + a12 f2 + b1 = 0 a21 f1 + a22 f2 + b2  0

Repulsive: f1  0 f2  0

Workless: f1  (a11 f1 + a12 f2 + b1) = 0 f2  (a21 f1 + a22 f2 + b2) = 0

(free)

SIGGRAPH '99 COURSE NOTES

SD57

PHYSICALLY BASED MODELING

Implicit Methods: how to not blow up
David Baraff Andrew Witkin
Pixar Animation Studios

SIGGRAPH '99 COURSE NOTES

SE1

PHYSICALLY BASED MODELING

"Give me Stability or
Give me Death"
-- Baraff's other motto

SIGGRAPH '99 COURSE NOTES

SE2

PHYSICALLY BASED MODELING

stability is all stability is all stability is all
· If your step size is too big, your simulation
blows up. It isn't pretty.
· Sometimes you have to make the step size so
small that you never get anyplace.
· Nasty cases: cloth, constrained systems. · Solutions:
­Now: use explosion-resistant methods. ­Later: reformulate the problem.

SIGGRAPH '99 COURSE NOTES

SE3

PHYSICALLY BASED MODELING

A very simple equation
A 1 - D particle governed by x· = -kx where k is a stiffness constant.
E = 1 kx2 2
x = -kx
x

SIGGRAPH '99 COURSE NOTES

SE4

PHYSICALLY BASED MODELING

Euler's method has a speed limit

x = -kx

x=0 0

x=0

x = -hkx
x=0 x=0

x=0

h

2h

3h

4h

5h

6h
h

=

.5(1

k)

h = 1(1 k) h = 1.5(1 k) h = 2(1 k)

h = 3(1 k)

h > 1/k: oscillate. h > 2/k: explode!

SIGGRAPH '99 COURSE NOTES

SE5

PHYSICALLY BASED MODELING

Stiff Equations
· In more complex systems, step size is
limited by the largest k. One stiff spring can screw it up for everyone else.
· Systems that have some big k's mixed in
are called stiff systems.

SIGGRAPH '99 COURSE NOTES

SE6

PHYSICALLY BASED MODELING

A stiff energy landscape

SIGGRAPH '99 COURSE NOTES

SE7

PHYSICALLY BASED MODELING

Example: particle-on-line

· A particle P in the
plane.
· Interactive "dragging"
force [fx, fy].
· A penalty force [0,­ky]
tries to keep P on the x-axis.

[ fx , fy] P
[0, ­ky]

SIGGRAPH '99 COURSE NOTES

SE8

PHYSICALLY BASED MODELING

Example: particle-on-line

· A particle P in the
plane.
· Interactive "dragging"
force [fx, fy].
· A penalty force [0,­ky]
tries to keep P on the x-axis.

[ fx , fy] P
[0, ­ky]

· Suppose you want P to stay within a miniscule  of the x-axis when you try to pull it off with a huge force fmax.
· How big does k have to be? How small must h be?

SIGGRAPH '99 COURSE NOTES

SE9

PHYSICALLY BASED MODELING

Really big k. Really small h.

P

k

=

fmax 

h<  fmax

 Pmax = hfmax < 

Answer: h has to be so small that P will never move more than  per step.
Result: Your simulation grinds to a halt.

SIGGRAPH '99 COURSE NOTES

SE10

PHYSICALLY BASED MODELING

Implicit Methods
· Explicit Euler: x(t + h) = x(t) + h x·(t) ­This is the version we already know about.

SIGGRAPH '99 COURSE NOTES

SE11

PHYSICALLY BASED MODELING

Implicit Methods
· Explicit Euler: x(t + h) = x(t) + h x·(t) ­This is the version we already know about.
· Implicit Euler: x(t + h) = x(t) + h x·(t + h) ­Evaluate the derivative at the end of the
step instead of the beginning.

SIGGRAPH '99 COURSE NOTES

SE12

PHYSICALLY BASED MODELING

Implicit Methods
· Explicit Euler: x(t + h) = x(t) + h x·(t) ­This is the version we already know about.
· Implicit Euler: x(t + h) = x(t) + h x·(t + h) ­Evaluate the derivative at the end of the
step instead of the beginning.
­Solve for x(t+h). ­More work per step, but much bigger steps. ­A magic bullet for many stiff systems.

SIGGRAPH '99 COURSE NOTES

SE13

PHYSICALLY BASED MODELING

Implicit Euler for x· = -kx
x(t + h) = x(t) + h x·(t + h)

= x(t) - h kx(t + h)

=

x(t) 1 + hk

SIGGRAPH '99 COURSE NOTES

SE14

PHYSICALLY BASED MODELING

Implicit Euler for x· = -kx
x(t + h) = x(t) + h x·(t + h)
= x(t) - h kx(t + h)
= x(t) 1 + hk
· Nonlinear: Approximate as linear, using x· / x. · Multidimensional: (sparse) matrix equation.

SIGGRAPH '99 COURSE NOTES

SE15

PHYSICALLY BASED MODELING

One Step: Implicit vs. Explicit
x
x = -x, x(0) = 1

Correct Solution: Implicit Euler Step: Explicit Euler Step:

x(h) = e-hk
x(h) = 1 1 +hk
x(h) = 1 - hk

h

SIGGRAPH '99 COURSE NOTES

SE16

PHYSICALLY BASED MODELING

Why does it work?
· The real solution to x· = ­kx is an inverse exponential. · Implicit Euler is a decent approximation, approaching
zero as h becomes large, and never overshooting. Hence, rock stable.
· Most problems aren't linear, but the approximation using x· / x --one derivative more than an explicit
method--is good enough to let us take vastly bigger time steps than explicit methods allow.

SIGGRAPH '99 COURSE NOTES

SE17

PHYSICALLY BASED MODELING

Constrained Dynamics
Andrew Witkin
Pixar Animation Studios

SIGGRAPH '98 COURSE NOTES

SF1

PHYSICALLY BASED MODELING

Beyond Points and Springs
· You can make just about anything out of point masses and springs, in principle.
· In practice, you can make anything you want as long as it's jello.
· Constraints will buy us:
­ Rigid links instead of goopy springs. ­ Ways to make interesting contraptions.

SIGGRAPH '98 COURSE NOTES

SF2

PHYSICALLY BASED MODELING

A bead on a wire
· Desired Behavior:
­ The bead can slide freely along the circle.
­ It can never come off, however hard we pull.
· Question:
­ How does the bead move under applied forces?

SIGGRAPH '98 COURSE NOTES

SF3

PHYSICALLY BASED MODELING

Penalty Constraints
· Why not use a spring to hold the bead on the wire?
· Problem:
­ Weak springs  goopy constraints
­ Strong springs  neptune express!
· A classic stiff system.

SIGGRAPH '98 COURSE NOTES

SF4

PHYSICALLY BASED MODELING

The basic trick (f = mv version)

N f · 1st order world. fc · Legal velocity: tangent to f' circle (N·v = 0). · Project applied force f onto tangent: f' = f + fc
· Added normal-direction force fc: constraint force.
· No tug-of-war, no stiffness.

fc =

-

f N NN

N

f = f + fc

SIGGRAPH '98 COURSE NOTES

SF5

PHYSICALLY BASED MODELING

f = ma
Nf v
f' fc 

· Same idea, but...
· Curvature () has to match. ·  depends on both a and v:
­ the faster you're going, the faster you have to turn.
· Calculate fc to yield a legal combination of a and v.
· Blechh!

SIGGRAPH '98 COURSE NOTES

SF6

PHYSICALLY BASED MODELING

Now for the Algebra ...
· Fortunately, there's a general recipe for calculating the constraint force.
· First, a single constrained particle. · Then, generalize to constrained
particle systems.

SIGGRAPH '98 COURSE NOTES

SF7

PHYSICALLY BASED MODELING

Representing Constraints

I. Implicit:
C(x) = x - r = 0

Point-on-circle

II. Parametric:
x = r cos ,sin 

SIGGRAPH '98 COURSE NOTES

SF8

PHYSICALLY BASED MODELING

Maintaining Constraints Differentially

C=0

C=0

· Start with legal position and velocity.
· Use constraint forces to ensure legal curvature.

C=0

C = 0 legal position C = 0 legal velocity C = 0 legal curvature

SIGGRAPH '98 COURSE NOTES

SF9

PHYSICALLY BASED MODELING

N

=

C x

Constraint Gradient
Implicit:
C(x) = x - r = 0

Point-on-circle

Differentiating C gives a normal vector.
This is the direction our constraint force will point in.

SIGGRAPH '98 COURSE NOTES

SF10

PHYSICALLY BASED MODELING

Constraint Forces

fc = N
Point-on-circle

Constraint force: gradient vector times a scalar, .
Just one unknown to solve for.
Assumption: constraint is passive--no energy gain or loss.

SIGGRAPH '98 COURSE NOTES

SF11

PHYSICALLY BASED MODELING

C(x(t))

Constraint Force Derivation
fc = N

C=Nx

C

=

 t

Nx

=Nx+Nx

x

=

f

+ fc m

Set C¨ = 0, solve for :



=

-mNNNx

-

Nf NN

Notation:

N = Cx ,

N

=

2C xt

Constraint force is N.

SIGGRAPH '98 COURSE NOTES

SF12

PHYSICALLY BASED MODELING

Example: Point-on-circle

C= x -r

N

=

C x

=

x x

N

=

2C xt

=

1 x

x - xxxxx

Write down the constraint equation.
Take the derivatives.
Substitute into generic template, simplify.

 = -mNNNx

-

Nf NN

=

m(xxxx)2

- m(xx)

- xf

1 x

SIGGRAPH '98 COURSE NOTES

SF13

PHYSICALLY BASED MODELING

Drift and Feedback

· In principle, clamping C at zero is enough. · Two problems:
­ Constraints might not be met initially. ­ Numerical errors can accumulate.
· A feedback term handles both problems:

C = - C - C, instead of

C=0

 and  are magic constants.

SIGGRAPH '98 COURSE NOTES

SF14

PHYSICALLY BASED MODELING

Tinkertoys
· Now we know how to simulate a bead on a wire.
· Next: a constrained particle system.
­ E.g. constrain particle/particle distance to make rigid links.
· Same idea, but...

SIGGRAPH '98 COURSE NOTES

SF15

PHYSICALLY BASED MODELING

Constrained particle systems
· Particle system: a point in state space. · Multiple constraints:
­ each is a function Ci(x1,x2,...)
­ Legal state: Ci= 0,  i. ­ Simultaneous projection. ­ Constraint force: linear combination of
constraint gradients.
· Matrix equation.

SIGGRAPH '98 COURSE NOTES

SF16

PHYSICALLY BASED MODELING

Compact Particle System Notation

q = WQ
q: 3n-long state vector. Q: 3n-long force vector. M: 3n x 3n diagonal mass
matrix. W: M-inverse (element-
wise reciprocal)

q = x1,x2, ,xn

Q = f 1,f 2, ,f n

M=

m1 m1 m1

mn mn mn

W = M-1

SIGGRAPH '98 COURSE NOTES

SF17

PHYSICALLY BASED MODELING

Particle System Constraint Equations

Matrix equation for 
JWJT  = -Jq - JW Q
Constrained Acceleration
q = W Q + JT
Derivation: just like bead-on-wire.

More Notation

C = C1,C2,

 = 1,2,

J

=

C q

J = 2C qt

,Cm ,m

SIGGRAPH '98 COURSE NOTES

SF18

PHYSICALLY BASED MODELING

How do you implement all this?
· We have a global matrix equation. · We want to build models on the fly, just like
masses and springs. · Approach:
­ Each constraint adds its own piece to the equation.

SIGGRAPH '98 COURSE NOTES

SF19

PHYSICALLY BASED MODELING

Matrix Block Structure

C
C x i
C x j

xi xj

J

· Each constraint contributes one or more blocks to the matrix.
· Sparsity: many empty blocks.
· Modularity: let each constraint compute its own blocks.
· Constraint and particle indices determine block locations.

SIGGRAPH '98 COURSE NOTES

SF20

PHYSICALLY BASED MODELING

J
C
C Global Stuff

J

Global and Local

fc x

v f
m

x v

f

m

Constraint

SIGGRAPH '98 COURSE NOTES

SF21

PHYSICALLY BASED MODELING

Constraint Structure

Each constraint must know how to compute these C

C

C x 1

,

C x 2

2C , 2C x1t x2t

x vx fv mf
m

p1 Distance Constraint
p2 C = x1 - x2 - r

SIGGRAPH '98 COURSE NOTES

SF22

PHYSICALLY BASED MODELING

Constrained Particle Systems
particles n time forces nforces consts nconsts

xx x

...v v v
ff f

mm

m

F F F ...F CCC ... C
Added Stuff

SIGGRAPH '98 COURSE NOTES

SF23

PHYSICALLY BASED MODELING

...x x
vv

x v

1

ff f

mm

m

Clear Force

Accumulators

xx x

...v v v
ff f

mm

m

4

Return to solver

Modified Deriv Eval Loop
2 F F F ...F
Apply forces
Added Step
CCC ... C
3
Compute and apply Constraint Forces

SIGGRAPH '98 COURSE NOTES

SF24

PHYSICALLY BASED MODELING

Constraint Force Eval
· After computing ordinary forces:
­ Loop over constraints, assemble global matrices and vectors.
­ Call matrix solver to get , multiply by JT to get constraint force.
­ Add constraint force to particle force accumulators.

SIGGRAPH '98 COURSE NOTES

SF25

PHYSICALLY BASED MODELING

Impress your Friends
· The requirement that constraints not add or remove energy is called the Principle of Virtual Work.
· The 's are called Lagrange Multipliers. · The derivative matrix, J, is called the
Jacobian Matrix.

SIGGRAPH '98 COURSE NOTES

SF26

PHYSICALLY BASED MODELING

A whole other way to do it.

x 
Point-on-circle

I. Implicit:
C(x) = x - r = 0
II. Parametric:
x = r cos ,sin 

SIGGRAPH '98 COURSE NOTES

SF27

PHYSICALLY BASED MODELING

Parametric Constraints

x 
Point-on-circle

Parametric:
x = r cos ,sin 
· Constraint is always met exactly.
· One DOF: . · Solve for .

SIGGRAPH '98 COURSE NOTES

SF28

PHYSICALLY BASED MODELING

Parametric bead-on-wire (f = mv)

Nf

x is not an independent variable.

T

fc

T

=

x 

First step--get rid of it:

x

=

f

+ fc m

f = mv (constrained)

x = T

chain rule

T

=

f

+ fc m

combine

SIGGRAPH '98 COURSE NOTES

SF29

PHYSICALLY BASED MODELING

For our next trick...

Nf T
fc

T

=

x 

As before, assume fc points in the normal direction, so
Tfc = 0
We can nuke fc by dotting T into both sides:

T

=

f

+ fc m

from last slide

TT

=

Tf

+Tfc m

blam!



=

1 m

Tf TT

rearrange.

SIGGRAPH '98 COURSE NOTES

SF30

PHYSICALLY BASED MODELING

Parametric Constraints: Summary
· Generalizations: f = ma, particle systems
­ Like implicit case (see notes.)
· Big advantages:
­ Fewer DOF's. ­ Constraints are always met.
· Big disadvantages:
­ Hard to formulate constraints. ­ No easy way to combine constraints.
· Offical name: Lagrangian dynamics.

SIGGRAPH '98 COURSE NOTES

SF31

PHYSICALLY BASED MODELING

Things to try at home:
· A bead on a wire (implicit, parametric) · A double pendulum. · A triple pendulum. · Simple interactive tinkertoys.

SIGGRAPH '98 COURSE NOTES

SF32

PHYSICALLY BASED MODELING

Collision Detection
David Baraff Michael Kass
PPiixxaarr AAnniimmaattiioonn SSttuuddiiooss

SIGGRAPH '99 COURSE NOTES

SG1

PHYSICALLY BASED MODELING

Philosophy/Overview
· Theory is a good thing to understand · Most implementations don't work all that well · Many codes don't solve your problem

SIGGRAPH '99 COURSE NOTES

SG2

PHYSICALLY BASED MODELING

Philosophy/Overview
· Theory is a good thing to understand · Most implementations don't work all that well · Many codes don't solve your problem · Code needs to be as simple as possible--know
what is important and what isn't · Two real-life (commercial) solutions · Geri's Game

SIGGRAPH '99 COURSE NOTES

SG3

PHYSICALLY BASED MODELING

What My Rigid Body Simulator Needs
· Does polyhedron A overlap polyhedron B? · If so, by how much? · If not, then where are the contacts?

SIGGRAPH '99 COURSE NOTES

SG4

PHYSICALLY BASED MODELING

What My Rigid Body Simulator Needs
· Does polyhedron A overlap polyhedron B? · If so, by how much? · If not, then where are the contacts? · What are the contact normals?

SIGGRAPH '99 COURSE NOTES

SG5

PHYSICALLY BASED MODELING

Some Available Codes
· http://www.cs.unc.edu/~geom/collide.html
­ RAPID ­ V-COLLIDE ­ I-COLLIDE
· http://www.merl.com/people/mirtich/vclip.html
· http://www.comlab.ox.ac.uk/oucl/users/ stephen.cameron/distances.html

SIGGRAPH '99 COURSE NOTES

SG6

PHYSICALLY BASED MODELING

Separating Planes

SIGGRAPH '99 COURSE NOTES

SG7

PHYSICALLY BASED MODELING

Separating Planes

SIGGRAPH '99 COURSE NOTES

SG8

PHYSICALLY BASED MODELING

Separating Planes

SIGGRAPH '99 COURSE NOTES

SG9

PHYSICALLY BASED MODELING

Coherence

SIGGRAPH '99 COURSE NOTES

SG10

PHYSICALLY BASED MODELING

Coherence

SIGGRAPH '99 COURSE NOTES

SG11

PHYSICALLY BASED MODELING

Contact

SIGGRAPH '99 COURSE NOTES

SG12

PHYSICALLY BASED MODELING

Interpenetration

SIGGRAPH '99 COURSE NOTES

SG13

PHYSICALLY BASED MODELING

Separating Planes (in 3D)

SIGGRAPH '99 COURSE NOTES

SG14

PHYSICALLY BASED MODELING

Separating Planes (in 3D)
contact plane

SIGGRAPH '99 COURSE NOTES

SG15

PHYSICALLY BASED MODELING

Does It Really Work? Yes, but...
· Requires convex decomposition · Needs a good decomposition:

SIGGRAPH '99 COURSE NOTES

?
SG16

PHYSICALLY BASED MODELING

An Actual Implementation
· CoriolisTM--rigid body dynamics engine in Alias|Wavefront's MayaTM
· Fast and reliable · Compares pairs of polygons from non-convex,
topologically specified polyhedra (using a coherence-based separating plane approach)

SIGGRAPH '99 COURSE NOTES

SG17

PHYSICALLY BASED MODELING

An Actual Implementation
· CoriolisTM--rigid body dynamics engine in Alias|Wavefront's MayaTM
· Fast and reliable · Compares pairs of polygons from non-convex,
topologically specified polyhedra (using a coherence-based separating plane approach) · Hierarchical bounding-box tree to eliminate most false hits

SIGGRAPH '99 COURSE NOTES

SG18

PHYSICALLY BASED MODELING

Culling--First (and Foremost!)

SIGGRAPH '99 COURSE NOTES

SG19

PHYSICALLY BASED MODELING

Culling--First (and Foremost!)

SIGGRAPH '99 COURSE NOTES

SG20

PHYSICALLY BASED MODELING

Sweep Sort

SIGGRAPH '99 COURSE NOTES

SG21

AB
PHYSICALLY BASED MODELING

Sweep Sort

SIGGRAPH '99 COURSE NOTES

SG22

BA
PHYSICALLY BASED MODELING

Collision Detection in Cloth Simulation
· Cloth/solid detection is fast--test individual cloth particles against solid-object hiearchical bounding-box tree

SIGGRAPH '99 COURSE NOTES

SG23

PHYSICALLY BASED MODELING

SIGGRAPH '99 COURSE NOTES

cloth vertex
(outside)

solid skin
SG24

PHYSICALLY BASED MODELING

cloth vertex

SIGGRAPH '99 COURSE NOTES

solid skin
SG25

PHYSICALLY BASED MODELING

Leaf-level Bounding Boxes
cloth vertex

SIGGRAPH '99 COURSE NOTES

solid skin
SG26

PHYSICALLY BASED MODELING

Mid-level Bounding Boxes
cloth vertex

SIGGRAPH '99 COURSE NOTES

solid skin
SG27

PHYSICALLY BASED MODELING

Root-level Bounding Box
cloth vertex

SIGGRAPH '99 COURSE NOTES

SG28

PHYSICALLY BASED MODELING

Collision Detection in Cloth Simulation
· Cloth/solid detection is fast--test individual cloth particles against solid-object hiearchical bounding-box tree

SIGGRAPH '99 COURSE NOTES

SG29

PHYSICALLY BASED MODELING

Collision Detection in Cloth Simulation
· Hierarchy can also be on surface rather than in space.
· Create tree by merging faces. · Structure of tree unchanged as objects move.

SIGGRAPH '99 COURSE NOTES

SG30

PHYSICALLY BASED MODELING

Mazes R Us

SIGGRAPH '99 COURSE NOTES

SG31

PHYSICALLY BASED MODELING

Collision Detection in Cloth Simulation
· Cloth/solid detection is fast--test individual cloth particles against solid-object hiearchical bounding-box tree
· Cloth/cloth detection requires complicated triangle/triangle test (vertex/face, edge/edge)

SIGGRAPH '99 COURSE NOTES

SG32

PHYSICALLY BASED MODELING

Collision Detection in Cloth Simulation
· Cloth/solid detection is fast--test individual cloth particles against solid-object hiearchical bounding-box tree
· Cloth/cloth detection requires complicated triangle/triangle test (vertex/face, edge/edge)
· Vast majority of time spent culling out the triangle/triangle intersections, using coherence based sweep-sort routine

SIGGRAPH '99 COURSE NOTES

SG33

PHYSICALLY BASED MODELING

