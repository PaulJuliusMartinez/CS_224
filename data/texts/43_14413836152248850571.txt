CMU-ITC-88-064

A Multi-media

Message

System for Andrew

Nathaniel Borenstein

Craig Everhart

Jonathan Rosenberg

Adam Stoller

Information Technology Center

Carnegie-Mellon University

ABSTRACT

spreadsheets,

raster

x._

system for r_ding

The Andrew Message System (AMS)

is a portable, distributed, multi-media,
and sending mail and bulletin board (bboard) mes-
multi-interface
sages. Mail and bulletin board processing was selected as a "showcase"
application
to demonstrate how the Andrew file system and user interface toolkit could be applied
most usefully to a user's daily tasks.
The AMS supports multi-media messages, which may include line drawings, hierarchi-
is explicitly
cal drawings,
designed to support a huge database of messages
and an enormous user community.
At CMU,
informa-
appear as raster
tion service broadtape,
images. The system incorporates
for doing name look-
the system supports
ups, including phonetic matching of misspelled names. In addition,
a number of advanced features
such as voting on multiple-choice
questions, private
bboards,
incoming mail messages.
to be ported to or
The server-based
built on almost
run on IBM RTs, DEC Micro-
and Vax UNIXt and VMS timesharing systems.
Vaxes, Suns, IBM PC's, Macintoshes,

the Dow Jones
cartoons

and bboards on which newspaper

shared mailboxes, and automatic

it services over 1200 bboards,

a B-tree based "white pages"

any computer. Currently,

architecture makes

images, animations,

including nemews,

classification of

it easy for client

interfaces

and equations.

It

interfaces

1. Introduction

[1],

for user

(a&.a. BE2)

the primary focus of the development

In addition to developing these primary tools,

Those tools,
interface development,

tools to support an advanced computing environment.

In the Andrew project
major
tem and the Andrew Toolkit
where [2,3].
Message System (AMS),
munication by users of the system. As a large application developed independently
tion with)
driving force in the evolution and improvement of Vice and BE2.
The goals of this paper are twofold: we will describe the key features and architecture of the Andrew
Message System, and we will explain how the underlying Andrew facilities
simplified the development
of such a system and made it more powerful and useful

effort has been on developing two
the Vice distributed file sys-
are described in detail else-
the Andrew project has created the Andrew
suite that uses the Andrew tools to facilitate electronic com-
of (but in coopera-
in its own right and a

the AMS has been both a useful application

than would otherwise have been possible.

the BE2 and Vice projects,

an application

l" UNIX is a trademark

of Bell Laboratories.

-2-

2. The Goal: A Truly Integrated Message System
The primary goal of the Andrew Message System project was to develop an integrated electronic mail
and bulletin board system that took advantage of the primary Andrew facilities. The word "integrated"
has at least four meanings

in this context:

.....

-

The system should integrate many advanced features already present

in

of functionality.

Integration
other systems into a reliable and efficient unified system.
Integration
the mail,

in a seamless and painless manner.

of media.

It should be possible to send a collage of anything that can be digitized through

of disparate

hardware. The system should be useful not only on advanced workstations,
systems based on

Integration
but also on IBM PC's, Macintoshes,
several operating systems.
Integration
with as much as possible of the mechanism encapsulated
construction of new user interfaces to the system will be relatively quick and painless.

access. The system should provide an integrated database

access mechanism,
the

and via terrninal/dialup

in interface-independent

to time-sharing

of database

libraries,

so that

access

3. Design Architecture

The integration goals described above led to a system architecture in which functionality is divided into
three levels:

.......

to the message database occurs exclusively at

is a process that runs on a machine with full access

Actual access
server
grams may simultaneously
mechanism known as SNAP.

access data from the same message

the message server

level. The message
to the Vice file system. Multiple client pro-
call

server, via a remote procedure

_.-

---

relevant

to client

interface)

interfaces,

abstractions

as well as the interfaces

library. This library is written in portable C, and runs in environments

that allow communication
Various
at the level of the client library, generally known as the CUI
with the message server, are implemented
as
(common user
interaction with the user occurs at the appli-
diverse as UNIX, VMS, MS-DOS, and Macintosh.
are
interface.
cation level, which is, of course, different
highly portable across environments, while others are not. For example,
interface,
library runs, and requires
CUI (Common User
no more sophisticated a display than a teletype. A more popular user interface, VUI (Visual User Inter-
face)
inter-
Interface), which runs on a UNIX
faces include Messages
(formerly known as AUI,
workstation running Xll
or the old Andrew window manger, and MacMessages, which runs only on a
Macintosh.

runs on PC's, and on UNIX and VMS systems with CRT displays. Other more specialized

Interface) will run in every environment where the CUI

The levels of the system are pictured below:

Finally,
for each user

the most basic user

Some of the user

the Andrew User

interfaces

Server
I Message

1

I

Unix machine

_----R
/

Vice RPC

File System

File server

-3-

-

- Of course,

this description leaves out many important
as an alternative
Although the delivery system component

message delivery system, developed
delivery in the Vice environment.
System will be mentioned briefly below, a full description of it is beyond the scope of this paper

it leaves out a complex
features. Most notably,
to the UCB sendmail program for reliable mail
of the Andrew Message

[5].

-.

4. Features

In this section, we outline some of the key features of the Andrew Message System.

images,

In particular,

the AMS allows users to send,

line drawings, hierarchical drawings,

feature of the Andrew Message System is its support

Multi-media Messages
The most noticable
objects.
text, raster
tions. The multi-media objects are managed by the Andrew BE2 toolkit, as described elsewhere
Of course,
challenging.
AMS, only one user
media messages. When other
display multi-media messages,
those messages. Thus, where a Messages user might see something like this:

is currently able to display the full complement
- notably those that

the multiple machine architecture makes multi-media mail particularly

run on lower-functionality
to give them an "unformatted"

interfaces
they ask the message server

in addition to normal

interface, Messages,

tables, equations,

interactive

for a rich set of multi-media
formatted
and even anima-

text messages,

[2].
In the
of multi-
-
version of

hardware

Date: Wed, 25 Nov 87 10:52:30 -0500 (EST)
From: Nathaniel Borenstein <nsb+@andrew.cmu.edu>
Subject: Animated logo!
Here's

the CMU logo:

_

 gie
But the best part
and tumble around on your screen!
Isn't

is that

that neat?
A user of a lower-functionality

interface would instead see something like this:

if you click on it and choose the Animate menu,

it will turn into a cube

the CMU logo:

Date: Wed, 25 Nov 87 10:52:30 -0500 (EST)
From: Nathaniel Borenstein <nsb+@andrew.cmu.edu>
Subject: Animated logo!
Here's
[An Andrew/BE2
But the best part
and tumble around on your screen!
Isn't

that neat?

view (an animated drawing) was include here, but could not be displayed.]
is that if you click on it and choose the Animate menu,

it will turn into a cube

Note that all of the text
database,
sage in its full multi-media

so that

splendor.

in the
the frustrated user may seek out an Andrew workstation if he wishes to view the mes-

and the full multi-media message persists

is still presented correctly,

Multiple Machine Types & Interfaces

As previously
tronic communication
largely
hardware/software

been achieved

indicated, one of the major design goals of the AMS was

environment

is indicated

unifying a wide variety of computer hardware.
available AMS interfaces

by a list of

the

environments

in which they run (current as of winter, 1987/88):

to create an integrated elec-
this goal has
and the

That
available

..

-_

-4-

- The flagship interface, supporting full multi-media messages.

IBM PC, Macintosh, VAX UNIX or VMS timesharing system)

-

the sim-

(IBM RT, Sun, MicroVax)

Messages
CUI (IBM RT, Sun, MicroVax,
plest, teletype-oriented

interface.

IBM PC, VAX UNIX or VMS timesharing system)

(IBM RT, Sun, MicroVax,

VUI
interface with a interface style like that of many IBM PC applications
MacMessages
Batmail
;
Integration of Message Types

(UNIXIEMACS) - a user-supported EMACS interface.

- a native Macintosh interface.

(Macintosh)

i

- a screen-oriented

Another goal of the AMS was the integration of various kinds of electronic
effects of merging mail and bulletin boards
mon system. The synergistic
especially beneficiaL For example,
to keep a copy, he may simply put it into one of his mail folders,
late his own mail.

communication
in a com-
in a common interface are
if a user sees an interesting message on a bulletin board and wants
the same way that he would manipu-

the need to explicitly address multiple protection domains within the message database -

to
In addition,
in the same system - has enabled the creation of various
allow for public bboards
there are private bulletin boards shared by groups
"hybrid"
of users and official bulletin boards
to which only certain users may post messages but which everyone
may read. Users may even give each other access to their mail folders so that, for example, a secretary
may process his employer's mail as if it is a bulletin board he administers.

forms of message databases.

and private mail

For example,

Rewritten Delivery System

Originally, we had hoped to build the AMS without becoming entangled with issues of message
In particular, we had hoped to be able to simply use the standard Berkeley sendmail program
delivery.
as our delivery engine, and concentrate our efforts on other things. Although the AMS will, in fact, run
compatibly with a standard sendmail-based
in the
Vice environment,

nor would it be likely to be reliable in any similar environment.

that system is simply not reliable

delivery system,

the file system could temporarily disappear
it is very hard to make it behave consistently
sendmail
in the Vice environment,

(for
Because sendmail was not written with the notion that
and
example, during network or file server problems),
takes as a given the notion that users live
reliably when such situations occur. Additionally,
on particular machines, whereas,
it is basically irrelevant what machine the
recipient uses, as long that machine is connected to Vice. Sendmail also depends on some features of
standard UNIX not available in the authenticated Vice environment, particularly those related to file pro-
level of
tection and special user privileges.
authentication
that
authentication

than standard UNIX, and sendmail was not well set up to take proper advantage of
information.

the Vice file system provides

a much greater

Finally,

For all of the above reasons, an entirely new message delivery system was implemented
AMS. That delivery system will be described in detail
beyond the scope of this paper.

in a forthcoming

paper; a full description

as part of the
is

an optional component,

the AMS can be (and often is)
The delivery system is technically
features
configured to run with the standard delivery system on non-Vice machines. However,
of the AMS work only in the presence of the AMS delivery system.
the AMS delivery
system allows us to make very sa'ong guarantees about message authentication, whereas it is notoriously
easy to forge messages
a great
deal of location-independence;
to a particular machine, but merely to an
address
system provides
sophisticated

on a standard UNIX system. The AMS delivery system also provides

user name lookup features via a mechanism known as the white pages.

users need not send their mail

to an entire Vice installation.

the AMS delivery

that corresponds

In particular,

Finally,

in that

several

-5-

information.

White Pages
The white pages database is a package that facilitates
and other mail-related
by being packaged in a collection of Vice files are organized according to a B-tree discipline
white pages facility, which features heuristics
for evaluating and rewriting what users type on the "To:"
for evaluating the addresses on incoming messages
is most simply demonstrated,
command to probe the white pages database directly.

the mapping of human names to UNIX user names
is optimized for efficient operation in a distributed environment
[6]. The
is used primarily
lines of outgoing messages, and
from remote sites. The operation of the white pages

however, by a sample dialog with the CUI program, using the "whois"

for phonetic matching of user names,

is in bold font.)

and "CC:"

(The user

input

It

CUb whois bond
Verifying name list 'bond'...
The name 'bond'
is ambiguous.
What did you mean by 'bond'?
1 - Eric Bond (eng) <bond+@andrew.cmu.edu>
2 - Sandra Bond (itc) <sandra+@andrew.cmu.edu>
3 - None of the Above
Choose one [3 - None of the Above]: 2

Sandra Bond <sandra+@andrew.cmu.edto
CUI> whois not bronstin
Verifying name list 'not bronstin'...
Name match was uncertain; please confirm:
1 - Nathaniel Borenstein <nsb+@andrew.cmu.edu>
2 - None of the above
Choose one [2 - None of the above]: 1

Nathaniel Borenstein <nsb+@andrew.cmu.edu>
CUI> whois AMS
Verifying name list 'AMS'...
The name 'AMS'
is ambiguous.
What did you mean by 'AMS'?
1 - Anthony Iams (cdec) <ai02+@andrew.cmu.edu>
2 - Wendi Anne Amos (csw) <wa0a+@andrew.cmu.edu>
3 - None of the Above
Choose one [3 - None of the Above]:

AMS (Address Validation Error: ambiguous name)
CUI>

Because the white pages database is stored in Vice,
exports this function to the client
place as easily on a PC as on a Vice-based workstation.
finger service.

it is accessed by the message server, which then
interfaces, wherever they may be. Thus the above dialog could take
The White pages is also used by the Andrew

Miscellaneous

Features

In order

there are several

In addition to the major areas described above,
implemented in the Andrew Message System, some of which will be briefly summarized here.
Magazines.
tems,
the AMS permits the creation of magazines. Magazines
the user community maintain on topics of their own choosing.
on "music" might
easily cross-post
the messages he considers worth reading on his magazine. Others,
inclination to read all twenty of those bboards, can instead read only the magazine,

to help cope with the flood of information produced by large bulletin board sys-
from
the editor of a magazine
He can then
lacking the time or
thus seeing only the

are bulletin boards
For example,

bboards at a site like Carnegie-Mellon.

read twenty music-related

interesting features

smaller but still

that volunteers

.._

...

_

"cream of the crop".

-6-

Currently,

However,

that message

stack-oriented

should be classified.

below). Although clumsy,

the language is powerful enough to permit,

it simply puts them into a folder called "mail".

language, although this language is slated for replacement

Automatic Classification of New Messages. When the message server processes new incoming mes-
sages from a user's mailbox, by default
the
user may supply a program which the message server will run on each piece of incoming mail to decide
the program must be written in a somewhat
where
cumbersome
in a future release
(see "future plans",
for exam-
ple, hundreds of Interact mailing lists to be sent
to the same mail address and then be automatically
sorted onto appropriate bulletin boards on the basis of information in the message header.
Voting. AMS users can compose special messages
sages
automatically mailed back to an address
features to make vote tabulation straightforward. Voting is not by secret ballot -
delivery system,
multiple-choice,
Return-receipt
nowledgment, or return-receipt. When an AMS user receives
whether
separated by unreliable network connections.

reading such mes-
are
and there are also a few
indeed, with the AMS
so that multiple voting is easily detected. All votes are

the votes are authenticated,
although the vote composer may specify whether or not write-in votes are permitted.
requests. On sending a message, an AMS user can designate

it as requesting an ack-
such a message, he is automatically asked
for users who are

to vote on the issue in question. Votes

to send such an acknowledgment.

specified by the vote composer,

that call for "votes".

This is particularly

is automatically

(by the CUI

he wishes

prompted

library)

Anyone

useful

is electronic mail.

Often, users at distantly-connected

Enclosures.
sites need to share files or other data, and the only
feature of the AMS can be
means at their disposal
useful. With this feature, a user can specify that all or part of his message is an "enclosure"
to be
handled specially. When a user
asked whether he would
like to do something special with it, such as write it to a file or (on UNIX) pipe it through a process.
Of course, what
the message headers, which
can save a fair amount of time in processing such messages.

is written to the file or pipe is the enclosure only, without

such a message, he is automatically

the "enclosures"

In such cases,

receives

Because

creation

announcements.

Folder
letin boards,
ports this is folder creation announcements. When a user
announcement,
folder, or bulletin board.
creates a new bboard, but may also be created by users themselves.

it very easy for users to create new bul-
the process of subscribing to new bboards must be very simple. One mechanism that sup-
is a folder creation
to the newly created
are typically created automatically when the system

asked whether or not he wishes to subscribe

Such announcements

he is automatically

reads a message

the AMS makes

that

5. Assessment

of the Andrew Environment

a great deal of development

The AMS represents
dent of the work of the Vice and BE2 development
the system it is without
benefits from the more general Andrew facilities, and what price had to be paid for those benefits.

indepen-
the AMS would not be nearly
In this section, we will describe how the AMS

the work of those other groups.

effort by the AMS developers

efforts. However,

themselves,

The Vice File System

The AMS as we know it would not be possible without
specifically to handle enormous message databases
ply be impractical
to store on individual workstations.
system, Vice also gave us much stronger authentication
UNIX file system. As a result,
our users that mail from other local users is not forged, and we can easily permit
bulletin boards and the sharing of mailboxes.

the Vice file system. The AMS was designed
(i.e., gigabytes of message text), which would sim-
for the scale of the
file protection than does the normal
to
the creation of private

in the Vice environment we can make a relatively strong guarantee

In addition to the support
and richer

The most
Rather
Vice -
tremendous
nol share a common file system.

important benefit of Vice for our purposes, however, was the simplification of the database.
than having to rephcate the database on multiple machines, we can simply store it in one place -
read the data from that place. This was a
and let all
that do

simplification over any scheme for sharing bulletin boards among multiple machines

the interested message server processes

-._

"-

-.

-7-

-

.

On the other hand, Vice poses a few notable problems
UNIX. Most notably, Vice does not support setuid programs, hard links between files not
directory, or per-file protection information
of these features placed additional

for developers, when contrasted with normal
in the same
basis). The absence

constraints on the design of some of our algorithms.

(Vice protection is on a per-directory

important,

that were written for a non-distributed

Perhaps most
ish the reliability of applications
pre-existing UNIX utilities have no idea that
call, nor of what
on the standard UNIX file system, but
correspond
quotas.) This kind of incompatibility
case,

the use of Vice or any other distributed file system is likely to seriously dimin-
In particular, most
system
inconceivable
Such failures may
and storage
in our

in our decision to rewrite virtually the entire mail delivery system.

failures, or to other problems, notably related to file protection

they should check the return value of the close0

can necessitate massive rewrites of pre-existing

(The failure of a close0 call is almost

they should do if such calls fall.

is a common point of

failure on Vice.

it was a major

to file server

file system.

software;

factor

The Andrew BE2 Toolkit

The BE2 Toolkit
would not have multi-media mail, or would have had to implement
datastream itself. Thus, clearly,

is the heart of the multi-media

features of

the benefit

to the AMS of using BE2 is enormous.

it, the AMS simply
of a multi-media

the AMS. Without

the interpretation

Currently, we know of no user-level drawbacks
to the use of BE2 in the AMS. Although the develop-
ment process was made more painful by the fast-paced evolution of BE2 and the frequent necessity to
devote significant
those problems are basically irrelevant
to the AMS as the users see it.

time to converting to the latest version of BE2,

the programmer

As a programmer's
permit
suffers the deficiency of "protecting"
rarely forces the programmer

interface, BE2 was in general extremely useful. BE2 is well enough designed to
rarely
it only

from the feature he needs. Additionally,

level of abstraction

access at whatever

he finds necessary.

the programmer

is, it

That

to use a lower level of abstraction than he desires.

factor

The only major negative
grammer. BE2 is a very clever and complex system, with a relatively high "entry cost".
imagine an uninitiated programmer
than half an hour. However,
tion and tutorials become available.

faced by the new pro-
It is hard to
trivial "hello world" BE2 program in less
this situation can be expected to improve somewhat as better documenta-

is the initial complexity

in BE2 programming

understanding

the most

6. Status Report

Statistics

The Andrew Message System has been in use by the Carnegie-Mellon
half, and for a lesser time at other sites.
we will mention a few statistics about

the AMS at CMU as of the fall of 1987.

for about a year and a
to convey the size and scope of the CMU installation,

In order

campus

1350 bulletin boards on the system; most of these are pub-
bboards are bboards which are
are available on the
and

users. No statistics
completely

as users may create

independently

(Semi-public

these

private

of completely

Currently at CMU there are approximately
licly readable, but about a hundred or so are semi-public.
publicly visible, but which are only readable by designated
number
secretly.)
The 1350 bboards
of Internet mailing lists,
are a suite of bboards
bboards are visible to the developers as private bboards,
assistance

for the trickier questions.

bboards,

include all of UNIX nemews, all of the Dow Jones information service, and hundreds
in addition to hundreds of CMU-only bboards. Among the CMU-only bboards
these
used by the consulting staff
can easily intervene with

to answer users' questions

so that the developers

and problems;

ten gigabytes, with a new
Taken together,
message showing up, on average, about every 40 seconds. Helping users cope with this flood of infor-
mation are sixteen user-edited "magazine"

annual postings on all of these bboards amounts

bboards.

to at

least

-8-

Currently there are
describe. A large number
even hundreds of bboards. One productive
bboards regularly.

read only a few "official"

about 1800 regular users of the system at CMU. The "typical"

is hard to
large group reads dozens or
staff member manages to get work done despite reading 377

bboards, but another

user

Future Plans

The future of the Andrew Message System holds many new and exciting developments
.is progressing or planned in the following areas:
FLAMES: Work is progressing on FLAMES,
for the Andrew Message System.
This will be a powerful
language for operating on the message database. The
two primary initial applications will be database queries and automatic classification of incoming mes-
intelligent
sages.
selection of messages
information
services.

(as in the Information Lens system [4]), and automatic network-based

In the future we will also be concentrating

on improved customization

the Filtering Language

and general LISP-like

in store. Work

facilities,

Name resolution: Our White Pages
to expand it to include names
goal of a "national white pages".

technology has proven so successful
sources,

from non-Andrew and non-local

that we are considering ways
leading eventually toward the

of Client Base: Efforts

are underway to increase the functionality

Expansion
on systems such as the Macintosh and VMS.
Event calendars: Ordinary bboards are inadequate for announcing specific events
cial features are planned to help make event planning simpler and more natural.
Two-dimensional
in a two-dimensional manner, where responses
respond.

bulletin

boards: Eventually, we hope to make our bulletin boards optionally visible
to which they

are clearly associated with the messages

available to AMS users

for future dates; spe-

x._

It

is our hope to eventually bridge the gap between bboard and conferencing

systems:

Conferencing
systems by providing a way to conduct an interactive conference on a bulletin board.
Improved
much room for improvement,
and in the user interface to the customization facilities.

facilities: Although the system is already highly customizable,

in the marking and annotation of messages

Customization

particularly

there is still
in the database,

Acknowledgments

In addition to the authors of this paper, dozens of other people have contributed to the development of
the Andrew Message System. Although space does not permit us to mention them all here,
special
credit should be given to Brian Arnold, Mark Chance, Bob Glickstein, David Kovar, Sue Pawlowski,
for their work on the AMS. We also wish to ack-
Larry Raper, Mike Sclafani,
nowledge our
(our most demanding and helpful users),
the Andrew
documentation
the networking group, and
the support staff, all of whom helped make the AMS a reality.

and Aaron Wohl
staff

indebtedness
group,

the ITC management,

the Vice group,

the BE2 group,

to the 'advisor'

References

[1] Morris, et. al, "Andrew: A Distributed Personal Computing Environment",

Communications

of

[2]

the ACM, Volume 29, Number 3, March, 1986, pp 184 - 201.
Palay et al., "The Andrew Toolkit: an Overview", Proceedings of the USENIX Technical Confer-
ence, February, 1988. (this volume)

[3] Michael Leon Kazar,

"Synchronization

and Caching

Issues

in the Andrew File System",

Proceedings of the USENIX Technical Conference, February, 1988. (this volume)

[4] Malone, et. al, "Intelligent

Information-Sharing

Systems", Communications of the ACM, Volume

30, Number 5, May, 1987, pp 390-402.

[5]

"_

Rosenberg,
'87 Workshop,

et. al, "An Overview of the Andrew Message System", Proceedings

Frontiers

in Computer Communications

Technology,

of SIGCOMM
Stowe, Vermont, August,

-9-

1987.,

"-

[6]

Lehman, Philip L., and S. Bing Yao, "Efficient Locking for Concurrent Operations on B-Trees",
ACM Transactions on Database Systems, Volume 6, Number 4, December,

1981, pp 650-670.

