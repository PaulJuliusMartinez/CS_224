The OpenGL Framebuffer
The OpenGL 

Framebuffer Object 
Object 
Extension
Extension

Simon Green
Simon Green

NVIDIA Corporation
NVIDIA Corporation

Overview
Overview

Why render to texture?
•• Why render to texture?
•• PP--buffer / ARB render texture review
buffer / ARB render texture review
Framebuffer object extension
object extension
•• Framebuffer
Examples
•• Examples
Future directions
•• Future directions

Why Render To Texture?
Why Render To Texture?

•• Allows results of rendering to 

Allows results of rendering to framebuffer
be directly read as texture
be directly read as texture
Better performance
•• Better performance
–– avoids copy from 

framebuffer to to 

framebuffer to texture 
to texture 

avoids copy from framebuffer
glCopyTexSubImage2D))
((glCopyTexSubImage2D
uses less memory –– only one copy of image
only one copy of image
–– uses less memory 
but driver may sometimes have to do copy internally
–– but driver may sometimes have to do copy internally
some hardware has separate texture and FB memory
•• some hardware has separate texture and FB memory
different internal representations
•• different internal representations

Applications
•• Applications
–– dynamic textures 
–– multimulti--pass techniques 

dynamic textures –– procedurals, reflections
procedurals, reflections

pass techniques –– antianti--aliasing, motion blur, 
aliasing, motion blur, 

depth of field
depth of field
image processing effects (blurs etc.)
–– image processing effects (blurs etc.)
GPGPU –– provides feedback loop
provides feedback loop
–– GPGPU 

WGL_ARB_pbuffer
WGL_ARB_pbuffer

Pixel buffers
•• Pixel buffers
Designed for off--screen rendering
screen rendering
•• Designed for off
Similar to windows, but non--visible
visible
–– Similar to windows, but non
Window system specific extension
•• Window system specific extension
Select from an enumerated list of 
•• Select from an enumerated list of 
available pixel formats using
available pixel formats using
ChoosePixelFormat()()
–– ChoosePixelFormat
DescribePixelFormat()()
–– DescribePixelFormat

Problems with PBuffers
PBuffers
Problems with 

•• Each 

using wglShareLists

wglShareLists()()

pbuffer usually has its own OpenGL 
usually has its own OpenGL 

Each pbuffer
context
context
(Assuming they have different pixel formats)
–– (Assuming they have different pixel formats)
Can share texture objects, display lists between 
–– Can share texture objects, display lists between 
pbuffers using 
pbuffers
Painful to manage, causes lots of bugs
–– Painful to manage, causes lots of bugs
Switching between pbuffers
–– wglMakeCurrent
Each pbuffer
buffers
buffers
–– Cannot share depth buffers between 

pbuffers is expensive
is expensive
wglMakeCurrent()() causes context switch
causes context switch

Cannot share depth buffers between pbuffers
pbuffers

•• Switching between 

•• Each 

pbuffer has its own depth, stencil, aux 
has its own depth, stencil, aux 

WGL_ARB_render_texture 
WGL_ARB_render_texture 

hPbuffer, , intint iBuffer
iBuffer

hPbuffer, , intint iBuffer
iBuffer))

•• Allows the color or depth buffer of a 

pbuffer to to 

BOOL wglBindTexImageARB(HPBUFFERARB
BOOL wglReleaseTexImageARB(HPBUFFERARB

wglBindTexImageARB(HPBUFFERARB hPbuffer
wglReleaseTexImageARB(HPBUFFERARB hPbuffer

Allows the color or depth buffer of a pbuffer
be bound as a texture
be bound as a texture
–– BOOL 
–– BOOL 
Window system specific
•• Window system specific
GLX version of specification was never defined
–– GLX version of specification was never defined
MacOS X X -- APPLE_pixel_buffer 
APPLE_pixel_buffer 
–– MacOS
Texture format is determined by pixel format of 
•• Texture format is determined by pixel format of 
pbuffer
pbuffer
Portable applications need to create a separate 
•• Portable applications need to create a separate 
pbuffer for each 
pbuffer

for each renderable

renderable texture
texture

Pbuffer Tricks
Tricks
Pbuffer

pbuffer can be bound as separate 
can be bound as separate 

The front and back buffers of a double--
•• The front and back buffers of a double
buffered pbuffer
buffered 
textures
textures
glDrawBuffer(GL_FRONT); ); // draw to front
// draw to front
glDrawBuffer(GL_FRONT
glDrawBuffer(GL_BACK);  
);  // draw to back
// draw to back
glDrawBuffer(GL_BACK
// bind front and back buffers as textures
// bind front and back buffers as textures
wglBindTexImageARB(pbuffer, WGL_FRONT_LEFT_ARB);
, WGL_FRONT_LEFT_ARB);
wglBindTexImageARB(pbuffer
wglBindTexImageARB(pbuffer, WGL_BACK_LEFT_ARB);
, WGL_BACK_LEFT_ARB);
wglBindTexImageARB(pbuffer
This gives you two buffers that you can switch 
•• This gives you two buffers that you can switch 
between without incurring context switching 
between without incurring context switching 
cost
cost
On systems that support multiple render 
•• On systems that support multiple render 
targets (ARB_draw_buffers) you can also use 
targets (ARB_draw_buffers) you can also use 
AUX buffers
AUX buffers

Render To Texture And Anti--Aliasing
Aliasing
Render To Texture And Anti

•• Common problem with post

•• Solution: create a normal multi

, and use glCopyTexImage2D

glCopyTexImage2D to copy 
to copy 

•• Render to texture doesn

Render to texture doesn’’t work with multi
t work with multi--
sample anti--aliasing
aliasing
sample anti
current texture hardware isn’’t capable of reading 
t capable of reading 
–– current texture hardware isn
from a multi--sampled buffer
sampled buffer
from a multi
could be implemented in driver using copy
–– could be implemented in driver using copy
Common problem with post--processing effects 
processing effects 
in games
in games
Solution: create a normal multi--sampled 
sampled 
pbuffer, and use 
pbuffer
from this to a texture
from this to a texture
–– the copy performs the down
Also possible to do your own super--sample 
sample 
antianti--aliasing in the application
aliasing in the application
–– much more expensive than multi

the copy performs the down--sampling automatically
sampling automatically

much more expensive than multi--sampling
sampling

•• Also possible to do your own super

AntiAnti--Aliasing with Post Processing
Aliasing with Post Processing

Without AA

With AA

The The Framebuffer

Framebuffer Object Extension
Object Extension

Specification finally published!
•• Specification finally published!
Available in beta drivers from NVIDIA
•• Available in beta drivers from NVIDIA
http://developer.nvidia.com
developer.nvidia.com
•• http://

Framebuffer Object Advantages
Object Advantages
Framebuffer

Only requires a single OpenGL context
•• Only requires a single OpenGL context
switching between framebuffers
–– switching between 
switching between pbuffers
switching between 

framebuffers is faster than 
is faster than 
pbuffers ((wglMakeCurrent))

No need for complicated pixel format selection
•• No need for complicated pixel format selection
–– format of 

framebuffer is determined by texture or 
is determined by texture or 

format of framebuffer
renderbuffer format
format
renderbuffer
puts burden of finding compatible formats on 
–– puts burden of finding compatible formats on 
developer
developer

•• Renderbuffer

More similar to Direct3D render target model
•• More similar to Direct3D render target model
makes porting code easier
–– makes porting code easier
Renderbuffer images and texture images can 
images and texture images can 
be shared among framebuffers
framebuffers
be shared among 
e.g. share depth buffers between color targets
–– e.g. share depth buffers between color targets
saves memory
–– saves memory

EXT_framebuffer_object
EXT_framebuffer_object

•• OpenGL 

•• Framebuffer

framebuffer is a collection of 
is a collection of 

OpenGL framebuffer
logical buffers
logical buffers
color, depth, stencil, accumulation
–– color, depth, stencil, accumulation
Framebuffer object extension provides 
object extension provides 
a new mechanism for rendering to 
a new mechanism for rendering to 
destinations other than those provided 
destinations other than those provided 
by the window system
by the window system
window system independent
–– window system independent
Destinations known as ““framebuffer
framebuffer--
attachable images””. Can be:
. Can be:
attachable images
–– offoff--screen buffers (
screen buffers (Renderbuffers
Renderbuffers))
textures
–– textures

•• Destinations known as 

Framebuffer Object Architecture
Object Architecture
Framebuffer

Framebuffer object

Color attachment 0

...

Color attachment n
Depth attachment
Stencil attachment

Other state

Texture objects

Texture
image

Renderbuffer objects

Renderbuffer
image

Terminology
Terminology

•• Renderbuffer

renderbuffer object.
object.

•• Framebuffer

•• Attachment point 

image –– 2D array of pixels. Part 
2D array of pixels. Part 

Renderbuffer image 
of a renderbuffer
of a 
Framebuffer--attachable image 
attachable image –– 2D array of 
2D array of 
pixels that can be attached to a framebuffer
framebuffer. . 
pixels that can be attached to a 
Texture images and renderbuffer
renderbuffer images are 
images are 
Texture images and 
examples.
examples.
Attachment point –– State that references a 
State that references a 
framebuffer--attachable image. One each for 
attachable image. One each for 
framebuffer
color, depth and stencil buffer of a 
color, depth and stencil buffer of a 
framebuffer..
framebuffer
Attach –– the act of connecting one object to 
the act of connecting one object to 
another. Similar to ““bindbind””..
another. Similar to 
Framebuffer attachment completeness
attachment completeness
Framebuffer completeness
completeness

•• Framebuffer
•• Framebuffer

•• Attach 

Framebuffers and 
Framebuffers

and Renderbuffers
Renderbuffers

framebuffer--attachable images 
attachable images 

Introduces two new OpenGL objects:
•• Introduces two new OpenGL objects:
Framebuffer”” (FBO)
•• ““Framebuffer
(FBO)
collection of framebuffer
–– collection of 
(e.g. color, depth, stencil)
(e.g. color, depth, stencil)
plus state defining where output of GL 
–– plus state defining where output of GL 
rendering is directed
rendering is directed
equivalent to window system ““drawable
drawable””
–– equivalent to window system 
Renderbuffer”” (RB)
(RB)
contains a simple 2D image
–– contains a simple 2D image
•• no no mipmaps
stores pixel data resulting from rendering
–– stores pixel data resulting from rendering
cannot be used as textures
–– cannot be used as textures

•• ““Renderbuffer

mipmaps, , cubemap

cubemap faces etc.
faces etc.

Framebuffer Objects
Objects
Framebuffer

•• When a 

framebuffer object is bound its 
object is bound its 

When a framebuffer
attached images are the source and 
attached images are the source and 
destination for fragment operations
destination for fragment operations
Color and depth textures
–– Color and depth textures
Supports multiple color attachments for MRT
•• Supports multiple color attachments for MRT
Color, depth or stencil renderbuffers
renderbuffers

–– Color, depth or stencil 

Framebuffer Object API
Object API
Framebuffer

framebuffers););
uint **framebuffers
framebuffers););
uint **framebuffers

GenFramebuffersEXT(sizei n, n, uint
void GenFramebuffersEXT(sizei
void 
void DeleteFramebuffersEXT(sizei
DeleteFramebuffersEXT(sizei n,n,
void 
const uint
const 
boolean IsFramebufferEXT(uint
boolean
void BindFramebufferEXT(enum
void 
enum CheckFramebufferStatusEXT(enum
enum

IsFramebufferEXT(uint framebuffer
framebuffer););
target, uint

BindFramebufferEXT(enum target, 
uint framebuffer
CheckFramebufferStatusEXT(enum target); 
target); 

framebuffer););

Framebuffer Object API
Object API
Framebuffer

enum textarget
enum
enum textarget
enum
enum textarget
enum

textarget, , uint
textarget, , uint
textarget, , uint

void FramebufferTexture1DEXT(enum target, enum
void FramebufferTexture1DEXT(enum target, 
void FramebufferTexture2DEXT(enum target, enum
void FramebufferTexture2DEXT(enum target, 
void FramebufferTexture3DEXT(enum target, enum
void FramebufferTexture3DEXT(enum target, 

texture, intint level);
level);
texture, intint level);
level);
level, intint zoffset
texture, intint level, 
FramebufferRenderbufferEXT(enum target, 
target, enum
enum
renderbuffertarget, , uint
uint

uint texture, 
uint texture, 
uint texture, 

enum attachment, 
attachment, 
enum attachment, 
attachment, 
attachment, 
enum attachment, 
zoffset););

void FramebufferRenderbufferEXT(enum
void 

attachment, enum
attachment, 
renderbuffer););
renderbuffer

enum renderbuffertarget

void GetFramebufferAttachmentParameterivEXT(enum
void 

GetFramebufferAttachmentParameterivEXT(enum target, 
target, 

enum attachment, 
enum

attachment, enum

enum pname

pname, , intint **params

params););

void GenerateMipmapEXT(enum
void 

GenerateMipmapEXT(enum target); 
target); 

Managing FBOs
Managing 

FBOs and 

and Renderbuffers
Renderbuffers

FBOs (and 
(and 
) is easy -- similar to 
similar to 

•• Creating and destroying 

Creating and destroying FBOs
Renderbuffers) is easy 
Renderbuffers
texture objects
texture objects
void GenFramebuffersEXT
void 
void DeleteFramebuffersEXT
void 
void BindFramebufferEXT
void 

GenFramebuffersEXT((sizei
sizei n, n, uint
sizei n,n,
DeleteFramebuffersEXT((sizei
const uint
const 
enum target, 
BindFramebufferEXT((enum

target, uint
uint

uint **framebuffers
uint **framebuffers

framebuffers););
framebuffers););

framebuffer););
framebuffer

Can also check if a given identifier is a 
•• Can also check if a given identifier is a 
framebuffer object (rarely used)
object (rarely used)
framebuffer
boolean IsFramebufferEXT
boolean

IsFramebufferEXT((uint

uint framebuffer

framebuffer););

Binding an FBO
Binding an FBO
void BindFramebufferEXT
void 

BindFramebufferEXT((enum

enum target, 

target, uint

uint framebuffer

framebuffer););

Makes given FBO current
•• Makes given FBO current
all GL operations occur on attached images
–– all GL operations occur on attached images
must be FRAMEBUFFER_EXT
target must be FRAMEBUFFER_EXT
is FBO identifier
framebuffer is FBO identifier
==0, GL operations operate on window--
–– if if framebuffer
framebuffer==0, GL operations operate on window

•• target
•• framebuffer

system provided framebuffer
system provided 
This is the default state.
This is the default state.

framebuffer (i.e. the window).
(i.e. the window).

•• Set of state that can change on a 

Set of state that can change on a framebuffer
framebuffer
bind:
bind:
AUX_BUFFERS, MAX_DRAW_BUFFERS, STEREO, 
–– AUX_BUFFERS, MAX_DRAW_BUFFERS, STEREO, 
SAMPLES, X_BITS, DOUBLE_BUFFER and a few 
SAMPLES, X_BITS, DOUBLE_BUFFER and a few 
moremore

enum textarget

textarget, , uint

Attaching Textures to a Framebuffer
Framebuffer
Attaching Textures to a 
void FramebufferTexture2DEXT(enum target, enum
enum
void FramebufferTexture2DEXT(enum target, 
uint texture, 
texture, intint

attachment, enum
attachment, 
level);
level);
Attaches image from a texture object to one of the logical 
•• Attaches image from a texture object to one of the logical 
buffers of the currently bound framebuffer
framebuffer
buffers of the currently bound 
must be FRAMEBUFFER_EXT
target must be FRAMEBUFFER_EXT
is one of:
attachment is one of:
–– COLOR_ATTACHMENT0_EXT ... 

COLOR_ATTACHMENT0_EXT ... COLOR_ATTACHMENTn_EXT
COLOR_ATTACHMENTn_EXT, , 
DEPTH_ATTACHMENT_EXT, STENCIL_ATTACHMENT_EXT 
DEPTH_ATTACHMENT_EXT, STENCIL_ATTACHMENT_EXT 

•• target
•• attachment

•• textarget

must be one of:
textarget must be one of:
TEXTURE_2D, TEXTURE_RECTANGLE, 
–– TEXTURE_2D, TEXTURE_RECTANGLE, 
TEXTURE_CUBE_MAP_POSITIVE_X etc.
TEXTURE_CUBE_MAP_POSITIVE_X etc.

mipmap level of the texture to attach
level of the texture to attach

is the mipmap

•• level 
•• texture 

level is the 
is the texture object to attach
texture is the texture object to attach
–– if if texture
Other texture dimensions are similar
•• Other texture dimensions are similar
specifies slice
offset specifies slice
–– for 3D textures, 

for 3D textures, zz--offset 

texture==0, the image is detached from the 

==0, the image is detached from the framebuffer
framebuffer

Renderbuffer APIAPI
Renderbuffer

uint **renderbuffers

renderbuffers););

const uint
const 

GenRenderbuffersEXT(sizei n, n, uint
DeleteRenderbuffersEXT(sizei n,n,

uint **renderbuffers
IsRenderbufferEXT(uint renderbuffer
renderbuffer););
target, uint

void GenRenderbuffersEXT(sizei
void 
void DeleteRenderbuffersEXT(sizei
void 
renderbuffers););
boolean IsRenderbufferEXT(uint
boolean
void BindRenderbufferEXT(enum
BindRenderbufferEXT(enum target, 
void 
void RenderbufferStorageEXT(enum
RenderbufferStorageEXT(enum target,
target,
void 
GetRenderbufferParameterivEXT(enum target,
void GetRenderbufferParameterivEXT(enum
target,
void 

enum internalformat
enum
enum pname
enum

internalformat, , sizei
pname, , intint* * params
params););

sizei width, 

uint renderbuffer

renderbuffer););

width, sizei

sizei height);
height);

sizei width, 

sizei height);
height);

TexImage call, but without image data
similar to TexImage
call, but without image data
can read and write data using Read/DrawPixels

DrawPixels etc.etc.

RenderBuffer Storage
Storage
enum target,
target,
width, sizei

Defining RenderBuffer
Defining 
void RenderbufferStorageEXT
RenderbufferStorageEXT((enum
void 
internalformat, , sizei
enum internalformat
enum
Defines format and dimensions of a 
•• Defines format and dimensions of a 
Renderbuffer
Renderbuffer
–– similar to 
–– can read and write data using Read/
must be RENDERBUFFER_EXT
target must be RENDERBUFFER_EXT
can be normal texture format 
internalformat can be normal texture format 
(e.g. GL_RGBA8, GL_DEPTH_COMPONENT24) 
(e.g. GL_RGBA8, GL_DEPTH_COMPONENT24) 
or:or:
STENCIL_INDEX1_EXT
–– STENCIL_INDEX1_EXT
STENCIL_INDEX4_EXT 
–– STENCIL_INDEX4_EXT 
STENCIL_INDEX8_EXT 
–– STENCIL_INDEX8_EXT 
STENCIL_INDEX16_EXT 
–– STENCIL_INDEX16_EXT 

•• target
•• internalformat

to a Framebuffer
Framebuffer
FramebufferRenderbufferEXT(enum target,
target,
enum renderbuffertarget
renderbuffertarget,,

Renderbuffers to a 
Attaching Renderbuffers
Attaching 
void FramebufferRenderbufferEXT(enum
void 
enum attachment, 
enum
uint renderbuffer
uint

attachment, enum
renderbuffer););

renderbuffer as one of the logical buffers 
as one of the logical buffers 

•• Attaches given 

•• target
•• attachment

Attaches given renderbuffer
of the currently bound framebuffer
framebuffer
of the currently bound 
must be FRAMEBUFFER_EXT 
target must be FRAMEBUFFER_EXT 
is one of:
attachment is one of:
COLOR_ATTACHMENT0_EXT ... 
–– COLOR_ATTACHMENT0_EXT ... 
COLOR_ATTACHMENTn_EXT
COLOR_ATTACHMENTn_EXT

Maximum number of color attachments implementation 
•• Maximum number of color attachments implementation 
dependent -- query MAX_COLOR_ATTACHMENTS_EXT
query MAX_COLOR_ATTACHMENTS_EXT
dependent 

DEPTH_ATTACHMENT_EXT 
–– DEPTH_ATTACHMENT_EXT 
STENCIL_ATTACHMENT_EXT 
–– STENCIL_ATTACHMENT_EXT 
must be RENDERBUFFER_EXT 
renderbuffertarget must be RENDERBUFFER_EXT 
renderbuffer is a 

•• renderbuffertarget
•• renderbuffer

is a renderbuffer

renderbuffer idid

Generating Mipmaps
Mipmaps
Generating 
GenerateMipmapEXT((enum
void GenerateMipmapEXT
void 

enum target);
target);

mipmaps for 
for 

•• Automatically generates 

Automatically generates mipmaps
texture image attached to target
target
texture image attached to 
Generates same images as 
•• Generates same images as 
GL_SGIS_generate_mipmap extension
extension
GL_SGIS_generate_mipmap
filtering is undefined, most likely simple 2x2 
–– filtering is undefined, most likely simple 2x2 
box filter
box filter

Implemented as new entry point for 
•• Implemented as new entry point for 
complicated reasons (see spec).
complicated reasons (see spec).

Framebuffer Completeness
Completeness
Framebuffer

•• Framebuffer

Framebuffer is complete if all attachments are 
is complete if all attachments are 
consistent
consistent
texture formats make sense for attachment points
–– texture formats make sense for attachment points
•• i.e. don

i.e. don’’t try and attach a depth texture to a color 
t try and attach a depth texture to a color 
attachment
attachment

all attached images must have the same width and 
–– all attached images must have the same width and 
height
height
all images attached to COLOR_ATTACHMENT0_EXT 
–– all images attached to COLOR_ATTACHMENT0_EXT 
COLOR_ATTACHMENTn_EXT must have same 
-- COLOR_ATTACHMENTn_EXT
must have same 
format
format

•• If not complete, 

If not complete, glBegin
INVALID_FRAMEBUFFER_OPERATION
INVALID_FRAMEBUFFER_OPERATION

glBegin will generate error 
will generate error 

CheckFramebufferStatusEXT((enum

Checking Framebuffer
Checking 
enum CheckFramebufferStatusEXT
enum
••
••

indicating why framebuffer

Framebuffer Status
Status
enum target);
target);
Should always be called after setting up FBOs
FBOs
Should always be called after setting up 
Returns enumenum indicating why 
Returns 
––
––
––
––
––
––
––
––
––
––
Completeness is implementation--dependent
dependent
Completeness is implementation
if result is ““FRAMEBUFFER_UNSUPPORTED
if result is 
––
should try different format combinations until one 
should try different format combinations until one 
succeeds
succeeds

FRAMEBUFFER_COMPLETE
FRAMEBUFFER_COMPLETE
FRAMEBUFFER_INCOMPLETE_ATTACHMENT
FRAMEBUFFER_INCOMPLETE_ATTACHMENT
FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 
FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 
FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT 
FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT 
FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 
FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 
FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 
FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 
FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 
FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 
FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 
FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 
FRAMEBUFFER_UNSUPPORTED
FRAMEBUFFER_UNSUPPORTED
FRAMEBUFFER_STATUS_ERROR
FRAMEBUFFER_STATUS_ERROR

framebuffer is incomplete:
is incomplete:

••

FRAMEBUFFER_UNSUPPORTED””, application 
, application 

FBO Performance Tips
FBO Performance Tips

•• DonDon’’t create and destroy 

t create and destroy FBOs

FBOs every 
every 

frame
frame
Try to avoid modifying textures used as 
•• Try to avoid modifying textures used as 
TexImage, , 
rendering destinations using TexImage
rendering destinations using 
CopyTexImage etc.etc.
CopyTexImage

FBO Usage Scenarios
FBO Usage Scenarios

FBO allows several ways of switching between 
•• FBO allows several ways of switching between 
rendering destinations
rendering destinations
In order of increasing performance:
•• In order of increasing performance:
–– Multiple 

Multiple FBOs
FBOs
create a separate FBO for each texture you want to 
•• create a separate FBO for each texture you want to 
render to
render to
switch using BindFramebuffer

BindFramebuffer()()

•• switch using 

–– can be 2x faster than 

can be 2x faster than wglMakeCurrent
drivers
drivers

wglMakeCurrent()() in beta NVIDIA 
in beta NVIDIA 

textures
textures

Single FBO, multiple texture attachments
–– Single FBO, multiple texture attachments
textures should have same format and dimensions
•• textures should have same format and dimensions
FramebufferTexture()() to switch between 
•• use use FramebufferTexture
to switch between 
Single FBO, multiple texture attachments
–– Single FBO, multiple texture attachments
attach textures to different color attachments
•• attach textures to different color attachments
•• use use glDrawBuffer
color attachments
color attachments

glDrawBuffer()() to switch rendering to different 
to switch rendering to different 

Simple FBO Example
Simple FBO Example

#define CHECK_FRAMEBUFFER_STATUS() \
{ \
GLenum status; \
status = glCheckFramebufferStatusEXT(GL_FRAMEBUFFER_EXT); \
switch(status) { \
case GL_FRAMEBUFFER_COMPLETE_EXT: \
case GL_FRAMEBUFFER_UNSUPPORTED_EXT: \

break; \
/* choose different formats */ \
break; \
default: \
/* programming error; will fail on all hardware */ \
assert(0); \

} \
} 

Simple FBO Example
Simple FBO Example
GLuint fb, depth_rb, tex;
// create objects
// frame buffer
glGenFramebuffersEXT(1, &fb);
glGenRenderbuffersEXT(1, &depth_rb); // render buffer
// texture
glGenTextures(1, &tex);
glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, fb);
// initialize texture
glBindTexture(GL_TEXTURE_2D, tex);
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, width, height, 0, 
// (set texture parameters here)
// attach texture to framebuffer color buffer
glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, 

GL_RGBA, GL_UNSIGNED_BYTE, NULL);

GL_COLOR_ATTACHMENT0_EXT, GL_TEXTURE_2D, tex, 0);

Simple FBO Example
Simple FBO Example
// initialize depth renderbuffer
glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, depth_rb);
glRenderbufferStorageEXT(GL_RENDERBUFFER_EXT, 

GL_DEPTH_COMPONENT24, width, height);

// attach renderbuffer to framebuffer depth buffer
glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT, 
GL_DEPTH_ATTACHMENT_EXT, GL_RENDERBUFFER_EXT, 
depth_rb);

CHECK_FRAMEBUFFER_STATUS();
...
// render to the FBO
glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, fb);
// (draw something here, rendering to texture)
// render to the window, using the texture
glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
glBindTexture(GL_TEXTURE_2D, tex);

Future Directions
Future Directions

Currently an EXT extension
•• Currently an EXT extension
will be promoted to an ARB extension once 
–– will be promoted to an ARB extension once 
the design is proven
the design is proven

Got feedback?
•• Got feedback?
Give it to the OpenGL ARB!
–– Give it to the OpenGL ARB!
Future extensions
•• Future extensions
Render to vertex attribute
–– Render to vertex attribute
•• likely built on top of 
Format groups
–– Format groups
like pixel formats, defines groups of formats that 
•• like pixel formats, defines groups of formats that 
work together for a given implementation
work together for a given implementation

likely built on top of Renderbuffers
Renderbuffers

Multisampling, accumulation buffer support
–– Multisampling, accumulation buffer support

Thanks
Thanks

Jeff Juliano, Mike Strauss and the rest 
•• Jeff Juliano, Mike Strauss and the rest 
of the NVIDIA OpenGL driver team
of the NVIDIA OpenGL driver team
Jeremy Sandmel
rest of the ARB Superbuffers
rest of the ARB 
group
group

Sandmel, Jeff Juliano and the 
, Jeff Juliano and the 
Superbuffers working 
working 

•• Jeremy 

