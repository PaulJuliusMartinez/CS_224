Adaptive Isocurves Based Rendering for Freeform Surfaces
Gershon Elber and Elaine Cohen
U U C S -92-040
D epartm ent of Com puter Science University of Utah
Salt Lake City, UT 84112 USA D ecem ber 2, 1992
A b stract Freeform surface rendering is traditionally perform ed by app ro x im atin g th e surface with polygons and th en rendering th e polygons. This approach is extrem ely com m on because of the complexity in accurately rendering the surfaces directly. Recently, several papers presented m ethods to render surfaces as sequences of isocurves. Unfortunately, these m ethods start by assuming that an appropriate collection of isocurves has already been derived. The algorithms themselves neither autom atically create an optim al or almost optim al set of isocurves so the whole surface would be correctly rendered w ithout having pixels redundantly visited nor automatically compute the param eter spacing required between isocurves to guarantee such coverage. In this p ap er, a new alg o rith m is developed to fill these needs. An a lg o rith m is in tro d u ced that autom atically computes a set of almost optimal isocurves covering the entire surface area. This algorithm can be combined with a fast curve rendering method, to make surface rendering without polygonal approximation practical.

A d a p tiv e Iso cu rv es B a se d R e n d e rin g
fo r
F reeform S urfaces *
Gershon Elber^ and Elaine Cohen D epartm ent of C om puter Science
University of Utah Salt Lake City, U T 84112 USA
D ecem b er 2, 1992
A bstract
Freeform surface rendering is traditionally performed by approxim ating the surface w ith polygons and then rendering the polygons. T h is approach is ex trem ely com m on because o f the co m p lex ity in accurately rendering the surfaces directly. R ecently, several papers [1, 16, 18, 25, 26, 23] presented m ethods to render surfaces as sequences of isocurves. Unfortunately, these m ethods start by assum ing that an appropriate collection of isocurves has already been derived. The algorithm s them selves neither autom atically create an optim al or alm ost optim al set of isocurves so the whole surface would be correctly rendered without having pixels redundantly visited nor autom atically com pute the parameter spacing required between isocurves to guarantee such coverage.
In this paper, a new algorithm is developed to fill these needs. An algorithm is introduced that autom atically com putes a set of alm ost optim al isocurves covering the entire surface area. This algorithm can be com bined with a fast curve rendering m ethod, to make surface rendering w ithout polygonal approxim ation practical.
1 In tro d u c tio n
Most surface rendering systems render a set of polygons which approximate the model representation instead of rendering the surfaces directly. Polygon rendering is usually more efficient and numerically robust th a n direct surface rendering. Unfortunately, the polygonized model is only an approximation to the real surface and aliasing occurs. Intensity (Gouraud) and normal (Phong) interpolation schemes [7] were developed to overcome the visual effects caused by C'1 discontinuities across boundaries between polygons. T he piecewise linear appearance of the boundary and silhouette edges is improved by increasing, as necessary, the number of polygons globally or adaptively [15]. Subdivision of trimmed surfaces into polygons for rendering purposes is also a difficult problem [24]. On the other hand, rendering the surface as a set of isocurves is appealing since this d a ta is exact, eliminating some of the need for the anti-aliasing techniques developed for rendering of polygonal approximation. Furthermore, rendering iso curves in this way reduces the complexity necessary to support trim m ed surfaces, as will be dem onstrated, as well as reducing the complexity involved in texture mapping computations. Several methods were developed in
' This work was supported in part by DARPA (N00014-88-K-0689). All opinions, findings, conclusions or recommendations expressed in this document are those of the authors and do not necessarily reflect the views of the sponsoring agencies.
fAppreciation is expressed to IBM for partial fellowship support of the first author.
1

Adaptive Isocurves Based Rendering

G. Elber and E. Cohen

2

recent years to render curves and a tte m p t to render surfaces using isocurves [1, 16, 18, 23, 25, 26]. However, previous methods do not automatically extract an optimal or almost optimal set of isocurves from a surface S so the rendering of S using the isocurves and those methods cannot be guaranteed to not miss any pixel representing the surface in image space. In [23] this problem is partially addressed by using a heuristic subdivision based approach. The surface is subdivided each time the isocurves spacing varies more than a specified tolerance, an approach which can lead to rendering a large number of small patches in which the fixed initialization cost per curve when using the (adaptive) forward differencing algorithm would greatly increase the to ta l cost of rendering th a t surface. In [25], isocurves at equally spaced intervals, u = nSu, are used and which can lead to pixels either being missed or redundantly rendered, as can be seen in the middle of Figure 1 (a) and in the center of Figure 2 (a). In [26]., the isocurves are adaptively spaced using bounds extracted from the convex hull of the distance function between two adjacent isocurves, d (v ) = f ( u - \ - 6 u , v ) --f ( u , v ) . Each isocurve continues to span the entire u domain of the surface. Therefore, the redundancy dem onstrated in Figures 1 (a) and 2 (a) would continue to reduce optim ality in [26].
This paper presents an algorithm that produce curves which are not extremely redundant and do not miss pixels. The new algorithm adaptively extracts isocurves and covers the entire surface in an almost optimal way. The polygon primitive is replaced by an isocurve drawn with finite thickness.
In the ensuing discussion we will need the concept of valid coverage

D efin itio n 1 A set of isocurves C of a given surface S is called a valid coverage with respect to some constant 6 i f f o r a n y p o i n t p on S there is a point, q, on one o f the i s oc urv es in C, such that \\p -- <?||2 < S, where || · H2 d e n o t e s Euc li de an distance.

Surface rendering algorithms using isocurves should comply with definition 1 where <*>is in the order of half of the image pixel size. All pixels representing S in the image are then guaranteed to be covered by at least one isocurve. Definition 1 assumes S is in the viewing space. A surface in viewing space has its x and y coordinates aligned with the image plane coordinates u, and v. T h a t is, u = x and v = y. However, the 2 coordinate of the surface is still accessible. The viewing space automatically accounts for distant and small surfaces which requires less effort to render, since the perspective transform ation has already been applied. Under some conditions, it is sufficient to compute the iso-distance using the x and y surface components only, since coverage of the image plane is the concern. Unfortunately, ignoring z may result with incorrect rendering when the right conditions are not met. We will discuss this issue further later.
The op tim alit y of the valid coverage is the second concern:

D efinition 2 A coverage for a given surface is considered optimal if it is valid and the accumulated length of its path is minimal, over all valid coverages.

If one could compute the param eter spacing required for a valid coverage for a given surface in a given scene, extraction of all isocurves at th a t spacing might be suboptimal as can be seen from the middle of the surface in Figure 1 (a) and the center of the surface in Figure 2 (a). Furthermore, since isocurves speed varies across the param eter space, local dynamic change of the param eter spacing is required as seen in Figures 1 (b) and 2 (b), to improve the coverage optimality.
Using isocurves as the coverage for a surface, we define a dj a c e n c y and i s o- di st a nc e between isocurves.

D e f i n i t i o n 3 T w o is oc urv es o f surface S ( u , v ) , C \ ( u ) - S ( u , v i), u  [iif, "u-f] a n d C 2 (u) = S ( u , v 2 ),

u  [u^, u |], v\ < V'2 , f r o m a gi ve n s e t C o f i so cur ve s f o r m i n g a val id coverage f o r S are c on si de r ed adjacent

if, along t he ir c o m m o n d o m a i n U = [ii®, Uj] fl [uj,

there is no o t h e r i s ocurve f r o m C. b et ween them. That

is, there does not exist Ca(u) = S ( u , v 3)  C, u £ ['u.3, such that Vi < V3 < V2 a n d [wl/u-j] C\U 7^ 0.

D efinition 4 The iso-distance curve \\C1( u ) - C 2( u) \\ 2.

between two isocurves C \ ( u ) = S ( u , v j), C 2(u) = S ( u , V 2 ), is

Adaptive Isocurves Based Rendering

G. Elber and E. Cohen

3

Figure 1: Isocurves are obviously not an optim al solution as a valid coverage for this surface (a). Adaptive isocurves are more optim al and their coverage is valid as well (b).
Figure 2: U tah teapot lid. C onstant param eter spacing causes redundancy in coverage (a) mostly elimi nated by adaptive extraction of isocurves (b). Both provide a valid coverage with respect to same <5.
Section 2 provides the background for the algorithm developed in section 3. Rendered results using this new isocurve based m ethod are presented in section 4. The implementation uses the NURBs surface representation in the A lpha.l solid modeler.
2 B ackground Suppose C \ ( u ) = S ( u , V i ) and C 2 ( u) = S ( u , v 2) are two adjacent isocurves in a param etric surface S ( u , v ) with common u domain [?/,;, ?/e] from a given set of curves C. Let R be a region of S over the domain [u^t/e] x [^1, ^ 2]- Let R be a ruled surface approxim ation for R , R.(u, v) = C i ( u ) * v -f C 2 ( u) * (1 - v), v e (0 , 1). L e m m a 1 7 / A 12(,u) = ||C i(u ) --<^2("w)112 < ^ f o r all u, then C = { C \ ( u ) , C 2 ( u ) } is a valid coverage o f R with respect to | .
P r o o f C \ ( u ) and C 2 {u) are adjacent between u s and u e and no isocurve in C exists between them by definition 3. In order for Ci('u) and C 2 {u) to form a valid coverage for R , for any point p 6 R , there must exist a point q in either C \ { u ) or C 2 { u) such th a t \\p -- 9 H2 < f . Given a point p  R , there exists some v* such th a t p £ R ( u , v * ) curve, p = R ( u * , v * ) . Therefore p is on the line from C \ ( u * ) to C 2 (u*) which

Adaptive Isocurves Based Rendering

G. Elber and E. Cohen

4

is bounded in length to be not greater than 6, since by hypothesis A i 2(u*) < 6. In other words, either | | C i K ) - p\\2 < f or \\C2(u*) - p \\2 < f (or both). 

Lemma 1 provides a condition on the validity of the coverage of a ruled surface, R , by two of its boundary curves, C \ { u ) and C 2(u). One might need to further verify th at R sufficiently approximates R . This might necessitate the com putation of a bound on the distance between R and R [11], curvature analysis of R [9], or alternatively analysis of the speed variance of R [10]. We will refer to this approxim ation validity condition as { R r ^ R ) .
For S -- 1 pixel, the special rendering case, the surface is approxim ated by strips of ruled surfaces, each approximately a pixel wide, usually a more accurate approximation than the, polygons used for rendering. Hence, unless subpixel results are wanted (in which case S can be m ade smaller) it is not necessary to do further bounding on the distance between R and R.
As stated in lem m a 1, this condition is sufficient, b u t is it nccessary th a t A ^ u ) < S? For a very skewed surface resulting from a non isornetric mapping this condition could be too restrictive since the isodistance could be much larger th a n the real minimal distance between the curves. One might, expect the penalty for this assum ption to be quite high. In practice, it was found to be reasonably well behaved for such surfaces as is dem onstrated in section 4 since the highly non-isometric mapping is frequently isolated to be in small regions of the domain, and even then provided competitive results compared to methods using nonadaptive isoparametric curves.
The iso-distance function A j 2(w) between the two isocurves C \ ( u ) = (cf (u), cy ( u ) , c |(u ) ) and C 2( u ) -- ( c 2( u ) , c2( u ) , c 2( u ) ) in the surface S can be efficiently computed and is equal to:

A 12(u) = ^ ( c f ( « ) - C*(u))2 + ( c \ ( u ) - Cy2( u ) ) 2 + (cf(«) - cz2{ u ) y .

(1)

The sum, difference, and product of two scalar curves are closed for polynomial (Bezier), piecewise polynomial (B-spline), or rational representations (NURBs). Furthermore, efficient algorithms exist, as we shall show below, for finding the form of the sum and product in the Bezier representation. On the other hand, square roots are not representable, in general, and therefore, are not closed under the above domains. Instead, one can find and use the representation for the square of the iso-distance, as is done in section 3:

A ? 2(u) = (ci M - c2( « ) ) 2 + { c \ ( u ) - Cy2(v.))2 + (cj(u ) - cf2( u ) ) 2.

(2)

In order to symbolically represent A l 2(u) as a scalar Bezier or NURBs curve, one must be able to represent the scalar curve which is the symbolic sum, difference, and product of scalar curves, as a single Bezier or NURBs curve. Methods to represent the result of the above operators applied to Bezier or NURBs curves, as a single Bezier or NURBs curves are briefly presented below.

2.1 C u rv e A d d itio n
T he symbolic computation of sum a n d /o r difference of two scalar Bezier or NURBs curves is achieved by computing the sum a n d /o r difference of their respective control points [5, 6, 12], once the two curves are in the same space. This requirement can be met by representing them as curves with the same order (using degree raising [3, 4] on the lower order one, if necessary) and the same continuity (using refinement [2] of knot vectors for NURBs). Specifically, in A j 2(u) computation (equation (2)), C \ ( u ) and C 2(u) are adjacent isocurves and therefore share the same order and continuity (knot vector) [12],

C 1( t ) ± C 2( t) = Y j P l B l T{ t ) ± Y j Q i B l { t ) i=0 i=0
9

Adaptive Isocurves Based Rendering

G. Elber and E. Cohen

5

= t=0

(3)

2.2 P ro d u c t C u rv e

Representation for the product of two scalar curves is the second symbolic tool required . For Bezier

curves [5, 6 , 12],

.

c ^ c ^ t)

m =
1=0 m+7i

n j=0

= E ^ flr +n(o, *:=0

'

(4)

where '

Rk =

£
:*>Ja i + j --k

CMP') \m+n/

It is also necessary to use representation of scalar products as p art of representing sums of rational scalar curves [12].
Finding a representation for the product of two NURBs is far more difficult. A direct algorithmic approach has recently been developed [20] which supports symbolic com putation of the coefficients of the product after finding the knot vector of the product curve. Since the direct approach is computationally expensive and complex to implement, one might choose to exploit the B-spline representation uniqueness property and com pute the coefficients of the product by solving an equivalent interpolation problem [12]. Alternatively, one may consider subdividing the curves into Bezier segments at all the interior knots, compute the product, and merge the result back. However, the continuity information along the interior knots may be lost.

2.3 Z ero S et of C u rv es
In addition to the above symbolic computation, the capability to compute the zero set of a scalar curve C ( u ) is required. A simple subdivision based algorithm exploiting the convex hull property of both Bezier and B-spline curves can be formulated [17].
One can easily extend a zero set (root) finding algorithm to find the solution(s) of C \ u ) = K for some constant K by subtracting K from all the coefficients of C ( u ) to form a new curve C ( u ) in which the solution set of C { u ) = K is equivalent to th a t of the zero set of C (u ):

C(u) = C(u) - I(
= £ ( P ; - K)B?(u)
i=0
using equation (3), since J2i=o KB^{ u ) = K .

(5)

Adaptive Isocurves Based Rendering

G. Elber and E. Cohen

6

3 A lg o rith m

Using the tools presented in section 2, we are ready to introduce the algorithm. Given two isocurves,

C \ ( u ) and C 2 ( u ) , on a surface 5( tt, v ) , one can symbolically compute the square of the iso-distance, A f 2(M)>

between them. Furthermore, given some tolerance 6, one can compute the param eters along the curves

where they are exactly 8 iso-distance ap a rt by computing the zero set of ( A i 2(m) - t>2), using equation (5)

and a zero set (root) finding algorithm. By subdividing C i(u ) and C 2 (u) at these parameters, the resulting

set of pairs of curves, (CJ(m),

have the property that their corresponding iso-distances are closer

than 8 or entirely farther apart than that, over their open interval domain. If the two curves have iso

distance less than 6, then the Euclidean distance tolerance condition is already met for th a t pair and the

algorithm can term inate. If, however, the iso-distance between the two curves is too large, a middle isocurve

between them , C i 2 ( u ) , is introduced and the same iso-distance test is invoked for the pairs { C \ ( t ) , C i 2 ( t ) }

and { C i 2 ( t ) , C 2( t ) } .

Starting with the two u boundaries or two v boundaries of the surface, the algorithm invokes this iso

distance test recursively and insures th a t two adjacent isocurves will always be closer th a n some specified

distance 8 by verifying the iso-distance is not greater th an 8. A middle isocurve is introduced only when

the iso-distance is larger th an 6, resulting with iso-distances between adjacent isocurves, as computed, will rarely be closer than | . Furthermore, since the resulting set of isocurves covers the entire surface S, the

set of isocurves th a t result may serve as a valid coverage for S with distance 8.

Assuming isocurves are generated as constant v isoparametric curves, we can now formally state the

algorithm. Algorithm 1 is the complete algorithm for an almost optimal extraction of isocurves to form

a valid coverage. Line ( 1) in Algorithm 1 is the isodistance square com putation as of definition 4 and

computed using equation (2). If Z is empty, a single test at a single point may classify the pair, as is done

in line (2) of Algorithm 1. If the pair is found to be close enough, no new curve is introduced and the empty

set is returned in line (3). Otherwise, a new curve between the two curves is created and the algorithm

is invoked recursively in lines (4) and (5). Alternatively, when Z is not empty, we subdivide C i { u ) and

C 2( u) at all u  Z in line ( 6 ) of the algorithm. The iso-distance between the sub-curve pairs resulted from

the subdivision is always less th a n 8 or always more th an th a t in their entire domain. Therefore, each

pair in the recursion in line (7) is classified into the Z em pty cases above. Although om itted for clarity in

Algorithm 1, the recursions invoked at line (7) of Algorithm 1 should provide A j 2(^) so it would not be

computed again. The union set returned in line (7), is the coverage set for the domain between the two

curves.

The fact th at the output consists of isocurves only simplifies further computation such as trimming the

isocurves according to surface trim m ing curves, as is shown in section 4.

The resulting set of isocurves introduced through this algorithmic process forms a valid coverage while

no two adjacent isocurves have iso-distance greater th an the tolerance distance 6. In the limit, as 8

approaches zero, no two isocurves will have iso-distance less th a n | . The speed in the v (ruled direction

of R ) of a region, R , between two adjacent isocurves, Ci(w,) and C 2 { u) , becomes constant, and an isocurve

introduced in the middle of the p aram etric domain of R , will also be equally spaced between C i { u ) and

C 2 ( u). Therefore, the coverage redundancy is bounded, since virtually no adjacent isocurves will have iso-distance of less than

A highly non-isometric mapping from parametric space to the Euclidean representation may reduce the

algorithm efficiency since the iso-distance metric is a less accurate measure of the real minimum distance.

In practice, it was found to be reasonably behaved.

There are some subtleties that have not yet been discussed. If the surface V M i n boundary is the same

as the V M a x boundary, the algorithm will find their (zero) iso-distance below the distance tolerance 8

and quit immediately. A cylinder is one such example in which the V M i n and V M a x boundary seams are

shared. One should guarantee such cases are detected before invoking Algorithm 1. One way to guarantee

A daptive Isocurves Based Rendering

G. Elber and E. Cohen

7

A lgorithm 1
Input: S(u,v), input surface. 6 , maximum d i s t a n c e b e tw e en i s o c u r v e s .
O utput: S, the se t of constant v isocurves of S ( u , v ) adjacent w ithin 6, covering 5.
Algorithm: adapIsoCrvs( S, S ) begin C \ ( u ) , C 2('ti) i s o c u r v e s o f 5 i n u d i r e c t i o n a t V M i n , V M a x . return { C,{u) } U a d a p I s o C r v s A u x ( S , 6, u, V M i n , V M a x , C \ ( u ) , C 2(u) ) U { C 2( u) }. end
end
a d a p I s o C r v s A u x ( S , 6, V M i n , V M a x , C \ ( u ) , C 2( u ) ) begin
U M a x , U M i n <= C \ ( u ) , C 2( u) common u dom ain. (1) A^2(u) sq u a re d i s o - d i s t a n c e betw een C i(u ) and C 2( u ) .
Z <= z e r o s e t o f ( A j 2(w) --t>2) · i f Z empty then
R S s u b s u rf a c e betw een C \ ( u ) and C 2(u). R C \ ( u ) * v + C 2( u) * (1 - v ) , v G ( 0 , l ) . ( 2 ) i f A \ 2( ( U M a x - \ - U M i n ) / 2 ) < S2 and (Rr^>R) v a l i d th e n ( 3 ) r e t u r n <j>. else
V M i d <= ( V M i n + V M a x ) / 2. C \ 2( u) <= i s o c u r v e o f 5 a t V Mi d , from U M i n t o U M a x . return (4) a d a p I s o C r v s A u x ( S , 6, V M i n , V M i d , C \ ( u ) , C \ 2(u) ) U
{ C 12O ) } U (5) a d a p I s o C r v s A u x ( S , S , V M i d , V M a x , C \ 2( u) , C 2(u) ) .
end else (6 ) Subdivide C \ ( u ) , C 2(u) a t a l l u1 £ Z in to { C \ ( u ) , C^w)} p a i r s . (7) r e t u r n (J; a d a p I s o C r v s A u x ( S , 6, V M i n , V M a x , C \ ( u ) , C 2( u) ) . end
end

Adaptive Isocurves Based Rendering

G. Elber and E. Cohen

8

it is to insure the surface has no silhouette from the rendering direction (See [8] for silhouette detection).

An alternative heuristic may be to always enforce at least one subdivision of the surface, which solves the

problem for surfaces such as cylinders.

Another consideration is determination of which param etric direction should be used for isocurves

extraction, u isocurves or v isocurves. In our implementation, we compute the m aximum iso-distance

between the u surface boundaries and the v surface boundaries, and prefer the direction with the smaller

maximum. This heuristic promotes fewer, longer isocurves over numerous shorter ones in the hope that it

will minimize the num ber of curves to be drawn.

O ther image rendering aspects should be considered as well. T he valid coverage is only one necessary

condition. T he surface normal for each pixel is also required for shading. An unnormalized representation

of the surface normal, n ( u , v ) = x can be computed symbolically [12], and represented as a vector

surface whose coordinate functions are products and differences of surface partial derivatives.

Each isocurve o u tp u t from Algorithm 1 is then piped into the curve Tenderer and is accompanied by the

associated isocurve from the normal surface h. The curve Tenderer uses the normal curve to compute the

normal at all required locations. It is evident th a t the order of the normal curve is usually higher than th a t

of the shape curve. Some curve Tenderers th a t use (adaptive) forward differencing [1, 16, 18, 25, 26] are

implemented in hardware and are tuned to certain, usually low, orders. In such a case, the normal curve

could be approximated as a sequence of lower (cubic) splines using known techniques for approximating

higher order splines as lower order ones [12, 13, 14].

So far, we considered the iso-distance computed in coverage validation (definition 1) as the Euclidean

distance in the viewing space. Under some conditions, it is sufficient to consult just the x and y components

of the surface. If the projection of the surface in viewing space to the image plane is one to one, then

only x and y need to be consulted. Ignoring z, two isocurves in S can have zero distance in the image

plane (T hat is, they intersect in the image plane as can be seen in Figure 3 (a)), while distant apart in

the viewing or object space (as seen in Figure 3 (b)), violating the one to one mapping requirement. If

a surface has silhouette curves in the image plane, using only x and y in the computation of

for

two isocurves could result in invalid coverage, as would be the case in Figure 3, if A f 2('«) were computed

w ithout using 2;. Preprocessing S to detect existence of silhouette curves in the image plane is equivalent

to making sure the mapping is one to one. Therefore, one can easily determine if the iso-distance should

be computed using z or without it, by determining if there are surface silhouettes.

4 R e su lts
Several results are presented in this section, in addition to a discussion of some considerations on the complexity of the algorithm.
Figure 4 presents the well known U tah teapot model and a chess set rendered using the adaptive isocurve extraction algorithm.
Most techniques developed for enhancing image rendering quality can be applied to curve rendering. For example, Figure 5 shows a wood texture m apped version of the teapot. T he fact th a t an isocurve is rendered only simplifies the texture mapping computation since one of the surface param eters (and the corresponding texture param eter) is fixed.
Surface isocurves are rendered into the Z-buffer one at a time with minima] memory overhead so complex scenes introduce no difficulties. Figures 4 and 5 show a complex chess scene rendered using this new algorithm.
Figures 6 and 7 demonstrates the use of solid texture to define a virtual planet and a camouflaged plane, using techniques presented in [21, 22], rendered using this isocurve based renderer.
Given a trim m ed surface S, approximating it into a set of polygons for rendering is a difficult pro-

A daptive Isocurves Based Rendering A u ( u) = 0-

G. Elber and E. Cohen

9

(a)
Figure 3: If S has silhouettes (d o tted ) in image plane, and only x and y are consulted in A i 2(u) compu tation, A j 2(u) may be found by Algorithm 1 to be wrongly zero, term inating prematurely.

Figure 4: U tah teapot and a chess set adaptive isocurves rendered images.

Figure 5: Wood texture mapped on teapot model. Marble texture mapped chess set scene.

A daptive Isocurves Based Rendering

G. Elber and E. Cohen

10

Figure 6: A virtual planet texture image using isocurves rendering.

Figure 7: A camouflage texture using isocurves rendering of an F16 model

A daptive Isocurves Based Rendering

G. Elber and E. Cohen

11

Figure 8: Trimmed NURBs model using adap. isocurves.
cess since the polygons must be properly trimm ed [24, 19], However, since this algorithm produces only isocurves, the clipping process is significantly simplified. A piston bridge model from a Diesel engine consisting of 27 trimmed NURBs surfaces was rendered in Figure 8 using wood texture.
One might also consider adaptively rendering the surface using variable width curves. Starting with very few but widely drawn isocurves, one could immediately provide a coarse shape of the surface which could be refined hierarchically into a more accurate image using more isocurves. Figure 9 shows six steps of such a process.
Consider the com putational complexity of Algorithm 1. Let the num ber of isocurves in the o u tp u t be N . For each isocurve in the output set, Algorithm 1 computes an iso-distance curve in line (1), for each of his neighbors when recursion occurs in lines (4) and (5). Since all but the first boundary curves have two neighbors, the num ber of iso-distance com putations between curves is equal to 2N -- 2. Using the Bezier and or the B-spline representation, each iso-distance curve computation of a polynomial curve involves with 3 scalar curve subtractions, 3 scalar curve products and 2 scalar curve additions (equation (2)). All in all, the num ber of curve operations is linear in the number of curves in the o utput. T he number of addition, subtraction and products for rational curves is somewhat higher because of the more complex addition and subtraction required, but is still linear in the o u tp u t size.
Timing comparisons are difficult since they strongly depend on the complexity of the images and the realism th a t is a ttem p ted . All images throughout this paper have been created using a simple curve rendering technique that renders piecewise linear approximations to each curve. W ithout any special op timization, our implementation was time competitive with a regular adaptive polygonal based Tenderer which is p art of the Alpha_l solid modeler and produced equal quality imagery in approximately the same time. Furthermore, even though curves where rendered as piecewise linear polylines in our implementation, the computed highlights and rendering have more realistic appearance, as is dem onstrated by the images throughout this paper, due to a better surface normal approximation. Usage of (adaptive) forward differ encing might improve the overall algorithm performance, and further remove aliasing introduced by the isocurve piecewise linear approximation used. It is the a u th o rs ' view th at the software based computation per pixel (the shading model used), performed far more times than any other operation, has far higher cost than any other high level computation such as polygonal approximation or isocurve extraction.

A daptive Isocurves Based Rendering

G. Elber and E. Cohen

12

Figure 9: Six steps in coarse to fine rendering using adaptive isocurves.
5 C o n clu sio n
A new algorithm is presented th a t automatically computes an adaptive valid coverage of a surface using isocurves. The existing ability to efficiently render curves combined with the almost optimal isocurves extraction method presented here makes isocurves rendering of surfaces a feasible alternative to polygon based rendering of surfaces. The simplicity of the algorithm, compared to the complexity involved in polygonal approximation of surfaces and especially, trimmed surfaces, and the need to deal with two dimensional polygonal entities during the scan conversion process, could make the isocurve rendering approach even more attractive in hardware based systems. The algorithm presented here efficiently reduces the problem of surface rendering to a simpler problem of curve rendering.
R eferen ces
[1] S. Chang, M. Shantz and R. Rocchetti. Rendering Cubic Curves and Surfaces with Integer Adaptive Forward Differencing. C om puter Graphics, Vol. 23, Num. 3, pp. 157-166, Siggraph Jul. 1989.
[2] E. Cohen, T. Lyche, and R. Riesenfeld. Discrete B-splines and subdivision Techniques in ComputerAided Geometric Design and C om puter Graphics. C om puter Graphics and Image Processing, 14, 87-111 (1980).
[3] E. Cohen, T. Lyche, and L. Schumaker. Degree Raising for Splines. Journal of Approximation Theory, Vol 46, Feb. 1986.
[4] E. Cohen, T. Lyche, and L. Schumaker. Algorithms for Degree Raising for Splines. ACM Transactions on Graphics, Vol 4, No 3, pp. 171-181, Jul. 1986.
[5] G. Farin. Curves and Surfaces for C om puter Aided Geometric Design Academic Press, Inc. Second Edition 1990.

Adaptive Isocurves Based Rendering

G. Elber and E. Cohen

13

[6] R. T. Farouki and V. T. R ajan. Algorithms For Polynomials In Bernstein Form. C om puter Aided Geometric Design 5, pp 1-26, 1988.

[7] J. D. Foley and A. Van Dam. C om puter Graphics, Principles and Practice, Second Edition. AddisonWesley Systems Program m ing Series, Jul. 1990.

[8] G. Elber and E. Cohen. Hidden Curve Removal for Free Form Surfaces. C om puter Graphics, Vol. 24,

Num. 4, pp. 95-104, Siggraph Aug. 1990.

'

[9] G. Elber and E. Cohen. Second Order Surface Analysis Using Hybrid Symbolic and Numeric Operators

Submitted for publication.

,

[10] G. Elber and E. Cohen. Hybrid Symbolic and Numeric O perators as Tools for Analysis of Freeform Surfaces. Technical Report UUCS-92-023, University of Utah.

[11] G. Elber and E. Cohen. Model Fabrication using Surface Layout Projection. To be published.

[12] G. Elber. Free Form Surface Analysis using a Hybrid of Symbolic and Numeric C om putation. Ph.D. thesis, University of Utah, Com puter Science Departm ent, 1992.

[13] J. Hoschek. Approxim ate Conversion of Spline Curves. C om puter Aided Geometric Design 4, pp 59-66, 1987.

[14] J. Hoschek, F. J. Schneider, and P. Wassum. O ptimal approxim ate conversion of spline surfaces. Com puter Aided Geometric Design 6 , pp 293-306, 1989.

[15] B. V. Herzen and A. H. Barr. Accurate Triangulations of Deformed, Intersecting Surfaces. Com puter Graphics, Vol. 21, Num. 4, pp. 103-110, Siggraph Jul. 1987.

[16] R. V. Klassen. Integer Forward Differencing of Cubic Polynomials: Analysis and Algorithms. ACM Transaction on Graphics, Vol. 10, Num. 2, pp 152-181, Apr. 1991.

[17] J. M. Lane and R. F. Riesenfeld. Bounds on a Polynomial BIT 21 (1981), 112-117.

[18] S. Lien, M. Shantz, and V. P r a tt . Adaptive Forward Differencing for Rendering Curves and Surfaces. Com puter Graphics, Vol. 21, Num. 4, pp. 111-118, Siggraph Jul. 1987.

[19] T. McCollough. Support for Trimmed Surfaces. M.S. thesis, University of U tah, C om puter Science D epartm ent, 1988.

[20] K. Morken. Some Identities for Products and Degree Raising of Splines. To appear in the journal of Constructive Approximation.

[21] D. R. Peachey. Solid texturing of Complex Surfaces. C om puter Graphics, Vol. 19, Num. 3, pp. 333-342, Siggraph Jul. 1985.

[22] K. Perlin. An Image Synthesizer. C om puter Graphics, Vol. 19, Num. 3, pp. 333-342, Siggraph Jul. 1985.

[23] A. R appoport. Rendering Curves and Surfaces with Hybrid Subdivision and Forward Differencing. ACM Transaction on Graphics, Vol. 10, Num. 4, pp.323-341, Oct. 1991.

[24] A. Rockwood, K. Heaton, and T. Davis. Real-Time Rendering of Trimmed Surfaces. Com puter Graphics, Vol. 23, Num. 3, Siggraph Jul. 1989.

A daptive Isocurves Based Rendering

G. Elber and E. Cohen

14

[25] M. Shantz and S. L. Lien. Shading Bicubic Patches. C om puter Graphics, Vol. 21, Num. 4, pp. 189-196, Siggraph Jul. 1987.
[26] M. Shantz and S. Chang. Rendering Trimmed NURBS with Adaptive Forward Differencing. C om puter Graphics, Vol. 22, Num. 4, pp. 189-198, Siggraph Aug. 1988.

