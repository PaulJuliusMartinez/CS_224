Animation

Digital Multimedia, 2nd edition

Nigel Chapman & Jenny Chapman

Chapter 8

This presentation © 2004, MacAvon Media Productions

Overview

Rapid display of slightly different images create the illusion of motion.

Animation:
•
Convential approach:
•
Keyframed animation
•
Keyframes, inbetween frames
Computer Assisted:
• Human key frames, computer inbetweening
• Need to consider arc-length parameterization, interpolation of orientation, 
Supporting techniques:
•
Other animation approaches:
•

Squish-box deformations and skeletons, motion capture, kinematics and 
inverse kinematics.

camera animation.

Physically-based dynamics, constraint-based animation, procedural 
animation, behavioral animation.

Part I

Introduction
2D animation

242

Animation

• The creation of moving pictures one 
frame at a time
• Literally 'to bring to life'
• e.g. make a sequence of drawings on paper, in 
which a character's position changes slightly in 
each drawing

camera that advances one frame at a time

• Photograph drawings in sequence, using movie 
• Play back resulting ﬁlm – character will move

243–244

Traditional Methods

• Drawings/paintings on paper
• 1440 drawings for every minute of ﬁlm
• Cel
• Painted or scratched ﬁlm
• Cut-outs
• Clay animation (Claymation)
• etc

Traditional 2D Cel 

Animation

Traditional animation is labor intensive.
• Start with story board.
• Master artist draw keyframes to deﬁne action.
• Sweat-shop artists draw inbetween frames to complete 
A few traditional animiation rules:
• Stretch and squash to show motion (anti-aliasing)
• Be careful with camera

animation.

- Smooth changes
- Few changes

Disney was the most successful, but it was high 
risk.

Automated Keyframing

• Replace the human inbetweener with interpolation 
• Keyframes correspond to settings of parameters at 

algorithms.

different points in time. 
- +The computer provides repeatability and 
- -Interpolation is not as smart as a human 

automatic management of keyframes.

inbetweener. The animator may have to provide 
more key frames and/or additional information to 
get a good result.

Utility of Key 
Parameters

A good keyframe animation computer system limits the number of key 
parameters and maximizes the utility of each.
•
•
•
•

Parameters should have immediate geometric or visible signiﬁcance. Entries 
in a transformation matrix are not good parameters.
Properties of objects that are static should be maintained automatically.
Relationships between parts of articulated objects should be maintained 
automatically.
Interpolation routines should be optimized to particular parameter types. 
Motion paths, orientation, camera attitude, and surface properties all 
require different types of control.

• A real-time interface should be provided to interactively set parameters 

and iteratively improve the animation.

245–246

technique

Captured Animation
• Computer + video camera + traditional 
• Frame grabbing – record each frame to 
• Save as QuickTime &c, edit non-linearly like 
• Can also use scanner or digital still camera, 
or create each frame in a graphics program 

disk

video

Digital Cel

249–250

• Use layers (e.g. in Photoshop) like sheets of 
acetate in traditional cel animation
• e.g. static background on one layer, moving 
simple object on a layer in front of it. Make 
the object move by repositioning the layer
• More complex cases, just need to change 
those layers where movement or other 
change occurs between frames

250

Sprite Animation

• Store a single copy of all static elements and 
moving objects (sprites) and a description 
of how the objects move

• Each sprite can be a collection of images 

called sprite faces, which can be 
substituted in sequence to produce 
composite motion
• e.g. walk cycle

http://www.albinoblacksheep.com/ﬂash/sprite

Types of Animation 

Systems 

• Scripting Systems 
• Procedural Animation 
• Representational 

Animation 

• Stochastic Animation 
• Behavioral Animation 

Scripting Systems 

• Scripting Systems were the earliest type of motion control 

systems. The animator writes a script in the animation 
language. Thus, the user must learn this language and the 
system is not interactive. One scripting system is ASAL (Actor 
Script Animation Language), which has a syntax similar to LISP. 
ASAL introduced the concept of an actor, i.e., a complex 
object which has its own animation rules. For example, in 
animating a bicycle, the wheels will rotate in their own 
coordinate system and the animator doesn't have to worry 
about this detail. Actors can communicate with other actors 
be sending messages and so can synchronize their 
movements. This is similar to the behavior of objects in object-
oriented languages. 

Procedural Animation 

• Procedures are used that deﬁne movement 
over time. These might be procedures that use 
the laws of physics (Physically - based 
modeling) or animator generated methods. An 
example is a motion that is the result of some 
other action (this is called a "secondary 
action"), for example throwing a ball which hits 
another object and causes the second object 
to move. 

Physically-Based 

Animation

Use of physical simulation for animation. Comparison 
with keyframed animation, derivation of an example 

using a spring-mass system.

•  Physically-Based Animation
• Simulation
• Spring-Mass Models
• Collisions

Physically-Based 

Animation

Idea: to obtain a physically plausible animation, simulate the 
laws of Newtonian physics.
• In contrast to kinematics, this is called a dynamics approach.

• Have to control objects by manipulating forces and 

torques, either directly or indirectly.

• Animated objects may be passive: bouncing balls, jello, 

wall of bricks falling down, etc.

Inverse dynamics is difﬁcult
• Finding forces to move a physical object along a desired path
• Most current applications are ``passive'' variety
• Useful for seconary effects in keyframe animation:

-
-
-
-
-

a mouse character's ears should ﬂap when it shakes its head,
a T. Rex's gut should sway while it runs,
a feather in a cap should wave when wind blows on it,
cloth should drape around an actor and respond to his/her/its 
movements,
a wall of bricks should fall down when a superhero crashes into 
it.

Caution: simulated secondary effects can make bad keyframed animation 
look even worse!

Simulation

1. Create a model with physical attributes: mass, moment of 

inertia, elasticity, etc.

2. Derive differential equations by applying the laws of 

Newtonian physics.

3. Deﬁne initial conditions, i.e., initial velocities and positions.
4. Supply functions for external forces (possibly via 

keyframing).

5. Solve the differential equations to derive animation, i.e., 

motion of all objects in scene as a function of time.

with discontinuities due to collisions.

• During solution of the differential equations we have to be prepared to deal 
• We will discuss the simulation of spring-mass and point mass models.
•

Both have useful applications and are relatively simple to simulate.

Spring-Mass Models

Collisions

momentum of the colliding masses.

• Simulation may be interrupted by a collision.
• A collision force should be generated to reﬂect the 
• Using ﬁxed time step, collision may be detected via 
• May be necessary to use a      shorter than the frame 

interpenetration.

time and/or back up the simulation after 
interpenetration to handle collisions reasonably 
robustly.

•        collision checks between O(n) objects
Partition space, hierarchies, etc.
• Elastic vs inelastic

Representational Animation 

• This technique allows an object to change its shape during the 
animation. There are three subcategorie s to this. 
• The ﬁrst is the animation of articulated objects, i.e., complex 
objects composed of connected rigid  segments. 
• The second is soft object animation used for deforming and 
animating the deformation of objects, e.g. skin over a body or 
facial muscles. 
• The third is morphing which is the changing of one shape into 
another quite different shape. This can be done in two or three 
dimensions. 

Stochastic Animation 

• This uses stochastic processes to control 
groups of objects, such as in particle 
systems. Examples are ﬁreworks, ﬁre, water 
falls, etc. 

Low Level Motion 

Control 

• Keyframing  
• Keyframe systems were developed by 

classical animators such as Walt Disney. An 
expert animator would design 
(choreograph) an animation by drawing 
certain intermediate frames, called 
Keyframes. Then other animators would 
draw the in-between frames. 

Issues in Automated 
Keyframed Animation

251–252

Key Frame Animation
• Traditional: key frames drawn by chief 
animators at important points in the 
animation
• In-between frames drawn by less skilled 
• Computer-based: key frames drawn explicitly
• In-between frames interpolated by 

animators

software

Linear Interpolation
• The most basic interpolation technique for supporting 
• Given two parameters p0 and p1 at times t0 and t1 , an 

animation is linear interpolation, or the lerp.

intermediate value is given by

• Advantages and Disadvantages: 

- -Discontinuities in derivative exist at all key frame points.
- +The rate of change within a segment is constant (and 

so can easily be controlled).

Linear Interpolation

252

• Constant velocity

• Motion begins and 
ends instantaneously

Velocity Control

• Given a constant rate 

of change, we can 
create a speciﬁc 
variable rate of 
change. Given any 
function r=f(t) , 
reparameterize with 
r  . For the lerp

253

Easing In

• Object accelerates, 

gradual transition from 
stasis to motion

Easing Out

253

• Object decelerates, 

gradual transition from 
motion to stasis

Spline Interpolation

``quality''.

Instead of linear interpolation, spline interpolation can be used.
• +Continuity control can be obtained.
• +Fewer keyframes may be required for a given level of 
• -Control points for the splines may have to be computed 
based on interpolation constraints at the control points.
• - Extra information may be required at keyframes, such 
• - Splines are more expensive to evaluate.
• - Splines are more difﬁcult to implement.

as tangent vectors.

Spline Types and 

Animation

•

Different spline types will have different tradeoffs and capabilities:
B-splines:
- Give automatic continuity control, but only approximate their control 

points.

Are needed to break continuity.

• Non-uniform B-splines:
• Non-uniform Rational B-splines (NURBS):
•

-
-
Bézier splines:
-

Provide additional local control over the shape of a curve.

Require additional information for each segment and do not automatically 
maintain continuity. However, they do interpolate the ends of segments.

• Hermite splines:
• Catmull-Rom splines:
•

-
-
Beta-splines:
-

Require tangent vectors at each keyframe.

Provide only ﬁrst derivative continuity.

Provide automatic continuity, control over the tangent and approximate arc 
length of each segment.

Spline Interpolation 

Problems

Spline position interpolation will give us continuity 
control over changes position, but:
• An equal increment in the spline parameter does 
not usually correspond to an equal increment in 
distance along the spline.
• Different segments of the spline with the same 

parametric length can have different physical 
lengths.

• If we parameterize the spline directly with time 

objects will move at a non-uniform speed.

Animated GIFs

247–249

• Sequence of images can be stored in a single 
GIF ﬁle, and displayed one after another by a 
Web browser or other software
• No browser plug-in required
• Can specify looping, delay between frames
• 256 colour palette
• No sound

254

SWF

• Popular Web animation format
• Usually generated by Macromedia Flash
• Vector animation format
• Motion represented as numerical 
• Can also include bitmapped images (e.g. as 

operations on vector data

backgrounds)

254–256

Flash

• Timeline – graphical representation of sequence of 

frames
• Key frames – drawn/copied from previous and 

transformed

• Simple frames – hold on previous key frame

• Stage – sub-window in which frames are created by 

drawing with vector tools
• Can also import bitmaps as objects, add text

256–257

Symbols

• Reusable objects stored in a library
• Graphic symbols
• Button symbols (for interactivity)
• Movie clip symbols (self-contained 
• Create instances by dragging on to stage
• If symbol is edited, all its instances updated

animations within a movie)

Motion Tweening

256

• Motion tweening

• Object is placed in a key frame
• Create Motion Tween

• Object is turned into a symbol

• Add key frame at end of tweened sequence and 

move or transform object

• Motion in intermediate frames is interpolated 

(tweened)

Motion Path Animation

Motion path animation in the context of spline 
interpolation of position. Deals mostly with 
problems of arc-length-reparameterization and 
velocity control. 

Motion Path Overview

• As a basic capability, we would like to translate a 
point through space along a given path. We would 
like:

-

Independent control of velocity along path.

- Continuity control.
• While splines can easily support continuity 
control, velocity control is more difﬁcult. 

Transformation Matrix 

Animation

transformation matrix.

• One way to support an animation capability: interpolate a 
• Keyframes would be ``poses'' of objects given by the 
• Functional animation would be applied independently to 

animator.

all entries of the transformation matrix.

Unfortunately, does not support animation of rigid bodies.
• Given two poses of an object that differ by a  rotation.
• Under linear interpolation, object will not rotate but will 
• collapses to a plane in the middle of the interpolation.

turn inside out

Rigid Body Animation

degrees of freedom

• Rigid body transformations only have 6 
General afﬁne transformations have 12.
• To obtain good interpolation we have to 

consider separately
๏
๏

three degrees of freedom from translation
three that result from orientation.

Morphing

• Morphing is lerping between images.
• Nice effects at low cost.
• Key issues:

- Partitioning images into pieces that 

correspond

E.g., eyes to eyes, etc.

- Lerping pieces (geometry)
- Lerping pieces (pixels, colours)
- Filtering

• Developed at NRC in the 1970's (line drawings).
• Make it quick, don't look too closely at 

intermediate images.

Shape Tweening

257

• Also called morphing
• Shapes of graphical objects are 
• Have to generate the interpolated frames, 

transformed in between key frames

so resulting SWF is bigger than when 
motion tweening is used

Motion Graphics

261–266

• Like time-based graphic design
• Move, transform, alter layers of a bitmapped image between 

frames

• Apply time-varying ﬁlters and effects

• AfterEffects supports linear and Bézier interpolation in 

both space and time (rate of change)

• Can have new effects that only make sense in time, e.g. 

shatter, particle effects

Part II

• 3D Animation
• Advance animation

266–267

3-D Animation
• "Easy to describe but much harder to do"
• Properties of 3-D models (shape, size, position, 

rotation, surface characteristics, etc), light sources and 
cameras are numerically deﬁned

• Animate a scene by changing the numbers, rendering a 

new frame, changing further …

• Can make objects move, or move the camera
• Requires 3-D visualization and animation skills and 

great amount of processing power 

Character Animation 

• The objective of the principles previously 
discussed are to give the characters in an 
animation a personality that appeals to the 
viewers. The different principles should be 
applied in a fashion to produce a consistent 
personality. This means that the animator 
must have a good idea of the desired 
personality before beginning the animation.

Skeletal 

• The practice of using a skeleton to control a 3D character has become very popular 
over the last few years, appearing in virtually all animation systems on the market. 
Skeletal animation allows the artist to easily position and control the rotation points 
of a 3D character. The artist can concentrate on animating the character using the 
skeletal system; he can then create a geometric "skin" (representing how the 
character should appear) and attach it to the animated skeleton. 

• Skeletal systems are hierarchical in nature and allow control of the character in an 
efﬁcient manner. Skeletal systems with user-friendly and powerful interfaces can be 
excellent environments for the artist to control the complex algorithms involved in 
animating single-skin joint structures. 

• The availability of this kind of skeletal animation environment typically provides 

another beneﬁt - the use of inverse kinematics to animate a character. 

268

Inverse Kinematics

• Useful for animating jointed structures, especially 

limbs of human or animal ﬁgures

• Model must obey kinematic constraints

• e.g. if upper arm moves, lower arm and hand must 

move with it

• Inverse kinematics follows chain in reverse (easier for 

the animator)
• e.g position the hand, then compute motion of the 

rest of the arm move to accommodate it

Kinematics and Inverse 

Kinematics

Kinematics:
The study of motion independent of the forces that cause the motion. Includes position, 
velocity, acceleration.
Forward kinematics:
The determination of the

•

•

•

•
•
•
•
•
•
•
•

of all the links in an articulated model given the

positions,
velocities,
accelerations
position,
velocity,
acceleration
Forward kinematics is a necessity for skeletal keyframed animation
Easy to implement.

of the root of the model and all the transformations between links.

Inverse kinematics:
The derivation of the motion of intermediate links in an articulated body given the motion 
of some key links.

Inverse Kinematics

conditioned.

• Often nonlinear, underdetermined or overdetermined, possibly ill-
• Complexity of determining solution proportional to number of free links.
• One free joint between two ﬁxed ones can be solved fairly efﬁciently, for 
Extra constraints may be needed to obtain a unique and stable solution.
Example: Requiring a joint to point downwards as a gross 
approximation to gravity
Joint motion constraints (hinge vs. revolute vs. ball) are also useful.

example, with only one spare degree of freedom.
•
•
•
•
•

• Additional optimization objectives

Resulting optimization problem solved iteratively as an animation 
proceeds.
Example optimization objectives:
• minimize the kinetic energy of structure;
• minimize the total elevation of the structure;
• minimize the maximum (or average) angular torque.

• Inverse kinematics. 
• Inverse kinematics was a great breakthrough for 3D character 
animation, providing a "goal-directed" approach to animating a 
character. It allows the artist to control a 3D character's limbs 
by treating them as a mechanical linkage, or kinematic chain. 
Control points, connected to the ends of these chains, allow the 
entire chain to be manipulated by a single "handle". In the case of 
an arm, the handle would be the hand at the end of the arm. 
• These control points can also be driven by external data. In 
other words, inverse kinematics allows the artist to design a 
skeleton structure that can be driven from data sets created by a 
motion capture system. Typically these data sets are made up of 
points moving in 3D space, that represent frame-by-frame 
positions of sensors placed on the performer. Thus even capture 
systems with a limited number of sensor points can animate a 
more complex structure through the use of inverse kinematics. 

• However, if we attempt to drive the control points or 

handles directly with this data we quickly discover that this 
model does not come close to representing how the actual 
bones of the actor behave. The fact is that we are only 
monitoring how the skin is inﬂuenced by the actor's bone 
movements. The actor's real skeleton structure is extremely 
complex and not easily duplicated mathematically. Even 
more complex is its inﬂuence on the skin, combined with 
the effect of the underlying musculature. 
• The problem is typically resolved by loosely connecting the 
data set to the control points. We then allow the data set to 
inﬂuence the control points, but impose constraints and 
limits on the motion of the skeletal structure that the 
inverse kinematics solution must obey. Even if our 3D data 
was extremely accurate, there is such a fundamental 
difference between what this data represents and the 
complexity of what we are trying to model, that the end 
result is not very accurate at all. 

• As we increase the number of points captured, we depend less on inverse kinematics 
and more on the loose coupling mechanism. If we were able to track enough sensors, 
we would have no need for inverse kinematics. On the other hand, the coupling 
inﬂuence calculations would be intense, to say nothing of the task of connecting all 
these points to a skeleton. The amount of data required to explain a movement can be 
substantial when dealing with a large number of capture points. 

• After around 30 points, it becomes more economical to store movement data as a 
series of bone rotations rather than the raw 3D data set. In addition, rotation data will 
drive the skeleton directly, thereby eliminating the coupling inﬂuence calculations and 
signiﬁcantly speeding up the skin animation process. 

• Even though we are dealing with vastly less data using a rotational solution than with a 

positional one, it is important to understand the complexity of the real data we are 
now gathering versus what you get from the inverse kinematics solution. Graphing 
rotational data for a given joint, as we have done below for the root node of a 
skeleton, shows how much detail is actually in real motion. Unlike positional data, 
which may well improve with some judiciously applied smoothing, rotational data 
should NOT be smoothed, since that would eliminate the frame-to-frame variational 
detail that gives the motion its realism and accuracy.

Learning to Walk
The Theory and Practice of 3D Character 
Motion  by George Maestri 

• If you want to move your 3D Characters to 

use their feet, it helps to understand the 
mechanics behind walking. Although we 
learned to walk as toddlers, translating our 
personal experience into animation 
techniques is more complex than it ﬁrst may 
seem 

Walking in Pictures 

• The walk usually 
starts with the feet 
at the "extended 
position," where 
the feet are 
farthest apart and 
the character’s 
weight shifts to the 
forward foot.

• As the weight of 
the body is 
transferred to the 
forward foot, the 
forward knee 
bends to absorb 
the shock. This is 
called the "recoil 
position," and is 
the lowest point in 
the walk.

• Halfway through 
the ﬁrst step, the 
forward knee 
straightens out and 
lifts the body to it’s 
highest point. In 
this "passing 
position," the free 
foot passes the 
supporting leg.

• As the character moves 
forward, the weight-bearing 
foot lifts off the ground at 
the heel, transmitting the 
force to the ball of the foot. 
The body starts to fall 
forward. The free foot 
swings forward like a 
pendulum to meet the 
ground and catch the body’s 
weight 

• The free leg makes 
contact with the 
ground, completing 
half the cycle. The 
second half is an 
exact mirror of the 
ﬁrst. If it differs, the 
character may 
appear to limp. 

• When the feet are fully extended, the hips rotate 
along the axis of the spine. To keep balance, the 
shoulders swing in the opposite direction. From 
the front, the spine looks relatively straight. But 
from the top, you can see the hips and shoulders 
twist in opposite directions.

• At the passing position, the front view shows the 

weight of the free leg pulling the hip out of 
center, causing a counter-rotation in the 
shoulders. From the top, however, the hips and 
shoulders are nearly parallel. 

• At the extension of the second leg, the hips and 
shoulders again are ﬂat when viewed from the 
front. From the top, however, you can see the 
completed rotation of the hips and shoulders. 

• Because walking is kind of like falling forward, the 

body should be angled forward slightly at the hips for 
most walks. The spine will arch up slightly to keep the 
chest and head over the hips. However, this line of 
action can change with the character’s attitude.

Motion Capture in Computer Graphics 

• Motion capture is the recording of human body 
movement (or other movement) for immediate or 
delayed analysis and playback. The information captured 
can be as general as the simple position of the body in 
space or as complex as the deformations of the face and 
muscle masses. Motion capture for computer character 
animation involves the mapping of human motion onto 
the motion of a computer character. The mapping can be 
direct, such as human arm motion controlling a 
character’s arm motion, or indirect, such as human hand 
and ﬁnger patterns controlling a character’s skin color or 
emotional state. 

• In the past few years, Ascension, Polhemus, SuperFluo, 
and others have released commercial motion tracking 
systems for computer animation. In addition, 
animation software vendors, such as SoftImage, have 
integrated these systems into their product creating 
"off-the-shelf" performance animation systems. 
Although there are many problems yet to be solved in 
the ﬁeld of human motion capture, the practice is now 
well ensconced as a viable option for computer 
animation production. As the technology develops, 
there is no doubt that motion capture will become 
one of the basic tools of the animator's craft. 

Motion Capture

a lot of key frames.

• Keyframing complex actions (walking, etc) requires 
• Instead, capture motion from real objects.
Creatures and/or actors performing the desired 
motion.
• The positions of key points on the actor are 

tracked these motions are mapped to 
corresponding points in the model.

• May be necessary to generate secondary actions 
for the computer model. (tracking is expensive)

1.

Tracking technologies include
Electromagnetic position and 
orientation sensors.

Requires a wire to each 
sensor.
Readings can be distorted 
by metal and magnetic 
ﬁelds.
Limited working volume.

2. Ultrasonic rangeﬁnder 

triangulation.

Cheaper but less accurate 
than magnetic sensors.

3. Optical triangulation.

•

•

•

•

•

•

•

•

Reﬂective or emissive 
markers are attached to 
objects
Two cameras triangulate 
position
Can track more points 
cheaply, without wires
Points can be occluded.

4.

Body suit.

5.

6.

•

•

•
•

•

•

•

Fibers in instrumented 
clothing detect angles of all 
joints.
Rotoscoping.

Arbitrary video from two 
cameras converted to 
motion paths

• manual selection of key 

points
computer vision
Prone to error and 
occlusion.
Tedious if done manually.

Puppetry.

Real-time data collected 
from an arbitrary input 
device

• Mapped to an computer 

model, which is displayed in 
real time during capture.
A special-purpose input 
device in the shape of the 
object being animated may 
be built.

Problems with Motion Capture

• Motion capture tends to require more-or-less exotic 

technology.

• Even puppetry requires at least real-time graphics.
• Problems with motion capture include:

- How do we map motion paths to objects of a different 

shape and scale (the ostrich-to-T. Rex problem)?

- How do we deal with noise and missing data?

- How can we reduce the number of samples?

- How can we generalize motion? I.e. we have a walk and a 

turn. How do we get an actor to follow a path?

DEMO

Particle Systems 

• The use of Particle systems is a way of modeling fuzzy objects, such as 
ﬁre, clouds, smoke, water, etc. These don't have smooth well-deﬁned 
surfaces and are non-rigid objects, i.e., they are dynamic and ﬂuid. 
Particle systems differ in three ways from "normal" representations for 
image synthesis: 
• An object is not represented by a set of primitive surface elements, e.g., 
polygons or patches, but as clouds of primitive particles that deﬁne its 
volume. 

• A particle system is not a static entity, its particles change form and 
move. New particles are created and old particles are destroyed. 
• An object represented by a particle system is not deterministic, its 
shape and form is not completely speciﬁed. Stochastic processes are 
used to create and change an object's shape and appearance. Note that 
particle systems can be used in a deterministic way to create certain 
objects, e.g., the human head in the video "Particle Dreams" by Karl 
Sims. 

• Particle systems are an example of stochastic 

procedural modeling, similar to fractals, and have 
some of the same advantages, such as the following: 
1.Complex systems can be created with little 

human effort. 

2.The level of detail can be easily adjusted. For 
example, if a particle system object is in the 
distance, then it can be modeled to low detail 
(few particles), but if it is close to the camera, 
then it can be modeled in high detail (many 
particles). 

Basic Model of Particle Systems 

• A particle system is a collection of many minute particles that model some object. For 

each frame of an animation sequence the following steps are performed: 
• New particles are generated 
• Each new particle is assigned its own set of attributes 
• Any particles that have existed for a predetermined time are destroyed 
• The remaining particles are transformed and moved according to their dynamic 
• An image of the remaining particles is rendered 

attributes 

• Since the creation and attributes of the particles are procedural, these can be the results 
of other computations, e.g. from science or engineering. This paper describes one way in 
which these particles can be generated and assigned attributes - using stochastic means. 

Demo

Virtual Reality

269–271

• Strictly, an immersive sensory experience of a synthetic 

world
• Head-mounted displays, data gloves, haptic interfaces, 

etc

• More modestly, 3-D graphic that can be explored
• Draggable panorama, objects that can be moved 

round, etc

• VRML, QuickTime VR

Keywords

• Inverse Kinematics
• Tweening
• Key Frame
• VRML - the Virtual Reality 
• QuicktimeVR - the image 
based modeling approach

Modeling Language

artificial touch

• Haptic Devices - the 
• Full body motion 
capture capture - 
the high-tech puppet

