Estructuras de datos
¿Qué son las estructuras de datos?
Muchos algoritmos requieren una representación apropiada de los datos para lograr ser eficientes.
Algoritmos + Estructuras de Datos = Programas
Niklaus Wirth.
Una estructura de datos es una representación de datos junto con las operaciones permitidas sobre dichos datos.
Típicamente todas las estructuras de datos permiten inserciones arbitrarias. Las estructuras de datos varían en como permiten el acceso a los miembros del grupo. Algunas permiten tanto accesos como operaciones de borrado arbitrarios. Otras imponen restricciones, tales como permitir el acceso sólo al elemento más recientemente insertado, o al menos recientemente insertado.
Las estructuras de datos nos permiten lograr un importante objetivo de la programación
orientada a objetos: la reutilización de componentes. Una vez que una estructura de datos
ha sido implementada, puede ser utilizada una y otra vez en diversas aplicaciones.
El enfoque, separación de la interfaz y la implementación, es parte del paradigma de
la programación orientada a objetos.
El usuario de la estructura de datos no necesita ver la implementación, sólo las operaciones
disponibles. Esta es la parte de ocultamiento y encapsulación, de la programación
orientada a objetos.
Otra parte importante de la programación orientada a objetos es la abstracción, Se deben
pensar cuidadosamente el diseño de las estructuras de datos sin tener en cuenta la implementación. Esto hace la interfaz más limpia, más flexible, más reutilizable y generalmente más fácil de implementar.

Pilas
Una pila es una estructura de datos LIFO (Last In First Out) en al cual el acceso está limitado al elemento más reciente insertado.
En una pila, las tres operaciones naturales de insertar, eliminar y buscar, se renombran por apilar, desapilar y cima.
Modelo de una pila
Lo que hace que las pilas sean útiles es que hay muchas aplicaciones en las que sólo es necesario acceder al elemento más reciente.
Las operaciones sobre las pilas deben ser de orden constante. O(1).

Interfaz para las pilas

Colas
Una cola es una estructura de datos FIFO (First In First Out) en al cual el acceso está limitado al elemento menos recientemente insertado.
En una cola, las tres operaciones naturales de insertar, eliminar y buscar, se renombran por insertar, quitarPrimero y primero.
Las operaciones sobre las colas son de orden constate. O(1).
Modelo de una cola

Interfaz para las colas

Pilas: Implementación dinámica basadas en un vector.
Una pila puede implementarse mediante un vector y un entero (cdp), que indica el indice del elemento situado en la cima de la pila

La técnica de duplicación del vector recibe el nombre de Amortización.
No afecta a la eficiencia en uso prolongado de la estructura. El coste de duplicar, que es de orden lineal, O(N), ya que una operación de duplicar un vector de N elementos esta precedida, al menos por N/2 operaciones de apilar que no necesitan la duplicación. Se puede repartir el coste O(N) de la duplicación entre las operaciones de apilar, aumentando su coste en sólo una constante.

================================

Colas: Implementación dinámica basadas en un vector.
Con un solo entero: fin
La forma más sencilla de implementar una cola consiste en almacenar sus elementos en un vector, colocando el elemento en cabeza en la primera posición del mismo (indice 0). Si fin, representa la posición del último elemento de la cola, entonces para insertar un elemento bastaría con incrementar fin. Esta implantación presenta el problema de que quitarPimero seria muy costosa, forzando en esta operación a desplazar todos los elementos del vector una vez eliminado el primero.
Con dos enteros: fin, cabeza
El problema de la implementación anterior se resuelve con otro entro entero: cabeza. Basta incrementarlo en la operación de quitarPrimero.
Esta solución aún presenta un problema, después de varias ejecuciones de quitarPrimero, no podríamos añadir más elementos, aunque la cola (el vector que la sustenta) no esté realmente llena.
Implementación de las colas con la implementación circular.
Se utilizan tres enteros: fin, cabeza, tamaño

 La circularidad devuelve cabeza y fin al principio de vector cuando rebasan la última posición.
 Si la cola está llena, es necesario realizar la duplicación del vector.

================================ =================================

Listas enlazadas
En una lista enlazada, los elementos se almacenan de forma no contigua. En vez de en un vector de posiciones de memoria consecutiva. Modelo de lista enlazada: Las entradas son arbitrarias. Cualquier elemento puede salir
Cada elemento se almacena en un nodo, que contiene un objeto y una referencia al siguiente nodo de la lista. Las listas enlazadas se utilizan para evitar movimientos de grandes cantidades de datos. Almacenan elementos con el coste añadido de una referencia adicional por elemento.

Interfaz para una lista abstracta
El acceso a la lista se realiza a través de una clase iteradora. La clase lista tiene las operaciones que dan el estado de la lista. El resto de las operaciones está en la clase iteradora.

Interfaz para una lista abstracta

Para añadir un nuevo elemento al final:

ultimo.siguiente = new NodoLista( ); //nuevo nodo lista

ultimo = ultimo.siguiente;

//ajusta el ultimo

ultimo.dato = x ;

// coloca x en el nodo

ultimo.siguiente = null;

// Es el último, ajusta el siguiente

Iterar a través de una lista enlazada (básico):

for ( NodoLista p=analista.primero ; p ! = null ; p.siguiente) System.out.println( p.dato )

Iterar a través de una lista enlazada (con un iterador):

//recorrer la lista, utilizando la abstracción y el iterador... ListaIter iter = new ListaIter (laLista); // cuidado... for ( iter.primero( ) ; iter.estaDentro( ); iter.avanzar ( ) )
System.out.println( iter.recuperar( ) )

Implementación de las listas enlazadas
Lista enlazada básica

Inserción en una lista enlazada

tmp = new NodaLista(x, actual.siguiente); actual.siguiente = tmp

// creación de un nuevo nodo // el siguiente al nodo actual es x

Eliminación en una lista enlazada

actual.siguiente = actual.siguiente.siguiente; Las operaciones de inserción y eliminación son de orden constante O(1).

Nodos Cabecera
El nodo cabecera no guarda ningún dato, pero sirve para satisfacer el requerimiento de que cada nodo tenga uno anterior.
Los nodos cabecera nos evitan tener que tratar de forma explicita casos especiales, como la inserción de un elemento en la primera posición o la eliminación del primer elemento.

La clase ListaEnlazada

La clase ListaEnlazadaIter

Listas enlazadas ordenadas
A partir de de ListaEnlazadaIter, podemos derivar la clase ListaEnlazadaIterOrd para mantener ordenados los elementos de una lista.
La diferencia fundamental entre la lista ordenada y la no ordenada es la rutina de inserción.

=============== ===============
==============

Pilas. Implementación con listas enlazadas

Colas. Implementación con listas enlazadas

Pilas. Implementación con LinkedList

Colas. Implementación con LinkedList

