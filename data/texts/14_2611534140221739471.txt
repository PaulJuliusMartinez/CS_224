Dirichlet Processes: Tutorial and Practical Course
(updated)
Yee Whye Teh
Gatsby Computational Neuroscience Unit University College London
August 2007 / MLSS

Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 1 / 90

Dirichlet Processes

Dirichlet processes (DPs) are a class of Bayesian nonparametric models.

Dirichlet processes are used for:

Density estimation. Semiparametric modelling. Sidestepping model selection/averaging.

I will give a tutorial on DPs, followed by a practical course on implementing DP mixture models in MATLAB.

Prerequisites: understanding of the Bayesian paradigm (graphical models, mixture models, exponential families, Gaussian processes)--you should know these from previous courses.

Other tutorials on DPs:
Zoubin Gharamani, UAI 2005. Michael Jordan, NIPS 2005. Volker Tresp, ICML nonparametric Bayes workshop 2006. Workshop on Bayesian Nonparametric Regression, Cambridgeun,iversity-logo July 2007.

Yee Whye Teh (Gatsby)

DP

August 2007 / MLSS 2 / 90

Dirichlet Processes

Dirichlet processes (DPs) are a class of Bayesian nonparametric models.

Dirichlet processes are used for:

Density estimation. Semiparametric modelling. Sidestepping model selection/averaging.

I will give a tutorial on DPs, followed by a practical course on implementing DP mixture models in MATLAB.

Prerequisites: understanding of the Bayesian paradigm (graphical models, mixture models, exponential families, Gaussian processes)--you should know these from previous courses.

Other tutorials on DPs:
Zoubin Gharamani, UAI 2005. Michael Jordan, NIPS 2005. Volker Tresp, ICML nonparametric Bayes workshop 2006. Workshop on Bayesian Nonparametric Regression, Cambridgeun,iversity-logo July 2007.

Yee Whye Teh (Gatsby)

DP

August 2007 / MLSS 2 / 90

Dirichlet Processes

Dirichlet processes (DPs) are a class of Bayesian nonparametric models.

Dirichlet processes are used for:

Density estimation. Semiparametric modelling. Sidestepping model selection/averaging.

I will give a tutorial on DPs, followed by a practical course on implementing DP mixture models in MATLAB.

Prerequisites: understanding of the Bayesian paradigm (graphical models, mixture models, exponential families, Gaussian processes)--you should know these from previous courses.

Other tutorials on DPs:
Zoubin Gharamani, UAI 2005. Michael Jordan, NIPS 2005. Volker Tresp, ICML nonparametric Bayes workshop 2006. Workshop on Bayesian Nonparametric Regression, Cambridgeun,iversity-logo July 2007.

Yee Whye Teh (Gatsby)

DP

August 2007 / MLSS 2 / 90

Dirichlet Processes

Dirichlet processes (DPs) are a class of Bayesian nonparametric models.

Dirichlet processes are used for:

Density estimation. Semiparametric modelling. Sidestepping model selection/averaging.

I will give a tutorial on DPs, followed by a practical course on implementing DP mixture models in MATLAB.

Prerequisites: understanding of the Bayesian paradigm (graphical models, mixture models, exponential families, Gaussian processes)--you should know these from previous courses.

Other tutorials on DPs:
Zoubin Gharamani, UAI 2005. Michael Jordan, NIPS 2005. Volker Tresp, ICML nonparametric Bayes workshop 2006. Workshop on Bayesian Nonparametric Regression, Cambridgeun,iversity-logo July 2007.

Yee Whye Teh (Gatsby)

DP

August 2007 / MLSS 2 / 90

Outline
1 Applications 2 Dirichlet Processes 3 Representations of Dirichlet Processes 4 Modelling Data with Dirichlet Processes 5 Practical Course

Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 3 / 90

Outline
1 Applications 2 Dirichlet Processes 3 Representations of Dirichlet Processes 4 Modelling Data with Dirichlet Processes 5 Practical Course

Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 4 / 90

Function Estimation

Parametric function estimation (e.g. regression, classification) Data: x = {x1, x2, . . .}, y = {y1, y2, . . .} Model: yi = f (xi |w ) + N (0, 2) Prior over parameters
p(w )

Posterior over parameters

p(w|x, y)

=

p(w)p(y|x, w) p(y|x)

Prediction with posteriors

p(y |x , x, y) = p(y |x , w)p(w|x, y) dw

university-logo

Yee Whye Teh (Gatsby)

DP

August 2007 / MLSS 5 / 90

Function Estimation

Bayesian nonparametric function estimation with Gaussian processes Data: x = {x1, x2, . . .}, y = {y1, y2, . . .} Model: yi = f (xi ) + N (0, 2) Prior over functions
f  GP(µ, )

Posterior over functions

p(f |x, y)

=

p(f )p(y|x, f ) p(y|x)

Prediction with posteriors

p(y |x , x, y) = p(y |x , f )p(f |x, y) df

university-logo

Yee Whye Teh (Gatsby)

DP

August 2007 / MLSS 6 / 90

Function Estimation

Figure from Carl's lecture.
Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 7 / 90

Density Estimation

Parametric density estimation (e.g. Gaussian, mixture models) Data: x = {x1, x2, . . .} Model: xi |w  F (·|w) Prior over parameters
p(w )

Posterior over parameters

p(w |x)

=

p(w )p(x|w ) p(x)

Prediction with posteriors

Yee Whye Teh (Gatsby)

p(x |x) = p(x |w)p(w|x) dw

university-logo

DP August 2007 / MLSS 8 / 90

Density Estimation
Bayesian nonparametric density estimation with Dirichlet processes Data: x = {x1, x2, . . .} Model: xi  F Prior over distributions
F  DP(, H)
Posterior over distributions p(F |x) = p(F )p(x|F ) p(x)
Prediction with posteriors
p(x |x) = p(x |F )p(F |x) dF = F (x )p(F |x) dF

Not quite correct; see later.
Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 9 / 90

Density Estimation
Bayesian nonparametric density estimation with Dirichlet processes Data: x = {x1, x2, . . .} Model: xi  F Prior over distributions
F  DP(, H)
Posterior over distributions p(F |x) = p(F )p(x|F ) p(x)
Prediction with posteriors
p(x |x) = p(x |F )p(F |x) dF = F (x )p(F |x) dF

Not quite correct; see later.
Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 9 / 90

Density Estimation
Bayesian nonparametric density estimation with Dirichlet processes Data: x = {x1, x2, . . .} Model: xi  F Prior over distributions
F  DP(, H)
Posterior over distributions p(F |x) = p(F )p(x|F ) p(x)
Prediction with posteriors
p(x |x) = p(x |F )p(F |x) dF = F (x )p(F |x) dF

Not quite correct; see later.
Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 9 / 90

Density Estimation

Prior:

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

!15 !10

!5

0

5 10 15

Red: mean density. Blue: median density. Grey: 5-95 quantile. Others: draws.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 10 / 90

Density Estimation

Posterior:

0.45 0.4
0.35

0.3 0.25
0.2 0.15
0.1

0.05

0

!15 !10

!5

0

5 10 15

Red: mean density. Blue: median density. Grey: 5-95 quantile. Black: data. Others: draws.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 11 / 90

Semiparametric Modelling
Linear regression model for inferring effectiveness of new medical treatments.
yij =  xij + bi zij + ij yij is outcome of jth trial on ith subject. xij , zij are predictors (treatment, dosage, age, health...).  are fixed-effects coefficients. bi are random-effects subject-specific coefficients. ij are noise terms. Care about inferring . If xij is treatment, we want to determine p( > 0|x, y).
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 12 / 90

Semiparametric Modelling

yij =  xij + bi zij + ij

Usually we assume Gaussian noise ij  N (0, 2). Is this a sensible prior? Over-dispersion, skewness,...
May be better to model noise nonparametrically,
ij  F F  DP

Also possible to model subject-specific random effects nonparametrically,
bi  G G  DP

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 13 / 90

Model Selection/Averaging

Data: x = {x1, x2, . . .} Models: p(k |Mk ), p(x|k , Mk ) Marginal likelihood
p(x|Mk ) = p(x|k , Mk )p(k |Mk ) d k

Model selection

M = argmax p(x|Mk )
Mk

Model averaging

p(x |x) =

p(x |Mk )p(Mk |x) =

p(x

|Mk

)

p(x|Mk )p(Mk p(x)

)

Mk Mk

But: is this computationally feasible?

Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 14 / 90

Model Selection/Averaging

Data: x = {x1, x2, . . .} Models: p(k |Mk ), p(x|k , Mk ) Marginal likelihood
p(x|Mk ) = p(x|k , Mk )p(k |Mk ) d k

Model selection

M = argmax p(x|Mk )
Mk

Model averaging

p(x |x) =

p(x |Mk )p(Mk |x) =

p(x

|Mk

)

p(x|Mk )p(Mk p(x)

)

Mk Mk

But: is this computationally feasible?

Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 14 / 90

Model Selection/Averaging

Data: x = {x1, x2, . . .} Models: p(k |Mk ), p(x|k , Mk ) Marginal likelihood
p(x|Mk ) = p(x|k , Mk )p(k |Mk ) d k

Model selection

M = argmax p(x|Mk )
Mk

Model averaging

p(x |x) =

p(x |Mk )p(Mk |x) =

p(x

|Mk

)

p(x|Mk )p(Mk p(x)

)

Mk Mk

But: is this computationally feasible?

Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 14 / 90

Model Selection/Averaging
Marginal likelihood is usually extremely hard to compute. p(x|Mk ) = p(x|k , Mk )p(k |Mk ) d k
Model selection/averaging is to prevent underfitting and overfitting. But reasonable and proper Bayesian methods should not overfit [Rasmussen and Ghahramani 2001]. Use a really large model M instead, and let the data speak for themselves.
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 15 / 90

Model Selection/Averaging
Clustering How many clusters are there?
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 16 / 90

Model Selection/Averaging
Spike Sorting
How many neurons are there?

[Görür 2007, Wood et al. 2006a]
Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 17 / 90

Model Selection/Averaging
Topic Modelling
How many topics are there?

[Blei et al. 2004, Teh et al. 2006]
Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 18 / 90

Model Selection/Averaging
Grammar Induction How many grammar symbols are there?
Figure from Liang. [Liang et al. 2007b, Finkel et al. 2007]
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 19 / 90

Model Selection/Averaging
Visual Scene Analysis
How many objects, parts, features?

Figure from Sudderth. [Sudderth et al. 2007]

Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 20 / 90

Outline
1 Applications 2 Dirichlet Processes 3 Representations of Dirichlet Processes 4 Modelling Data with Dirichlet Processes 5 Practical Course

Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 21 / 90

Finite Mixture Models
A finite mixture model is defined as follows: k  H   Dirichlet(/K , . . . , /K )
zi |  Discrete() xi |zi  F (·|zi )
Model selection/averaging over: Hyperparameters in H. Dirichlet parameter . Number of components K .
Determining K hardest.

Yee Whye Teh (Gatsby)

DP



H

zi
xi
i = 1, . . . , n

k
k = 1, . . . , K

university-logo August 2007 / MLSS 22 / 90

Infinite Mixture Models

Imagine that K 0 is really large. If parameters k and mixing proportions  integrated out, the number of latent variables left does not grow with K --no overfitting.
At most n components will be associated with data, aka "active".
Usually, the number of active components is much less than n.
This gives an infinite mixture model.
Demo: dpm_demo2d
Issue 1: can we take this limit K  ?
Issue 2: what is the corresponding limiting model?

[Rasmussen 2000]
Yee Whye Teh (Gatsby)

DP



H

zi
xi
i = 1, . . . , n

k
k = 1, . . . , K

university-logo August 2007 / MLSS 23 / 90

Gaussian Processes
What are they?
A Gaussian process (GP) is a distribution over functions f :XR
Denote f  GP if f is a GP-distributed random function. For any finite set of input points x1, . . . , xn, we require (f (x1), . . . , f (xn)) to be a multivariate Gaussian.
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 24 / 90

Gaussian Processes
What are they?

The GP is parametrized by its mean m(x) and covariance c(x, y ) functions:

f (x1)

m(x1) c(x1, x1) . . . c(x1, xn)

 

...

  N   

...

, 

...

...

...

 

f (xn)

m(xn) c(xn, x1) . . . c(xn, xn)

The above are finite dimensional marginal distributions of the GP.
A salient property of these marginal distributions is that they are consistent: integrating out variables preserves the parametric form of the marginal distributions above.

university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 25 / 90

Gaussian Processes
Visualizing Gaussian Processes.
A sequence of input points x1, x2, x3, . . . dense in X. Draw
f (x1) f (x2) | f (x1) f (x3) | f (x1), f (x2)
...
Each conditional distribution is Gaussian since (f (x1), . . . , f (xn)) is Gaussian. Demo: GPgenerate
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 26 / 90

Dirichlet Processes
Start with Dirichlet distributions.

A Dirichlet distribution is a distribution over the K -dimensional probability simplex:
K = (1, . . . , K ) : k  0, k k = 1
We say (1, . . . , K ) is Dirichlet distributed,

(1, . . . , K )  Dirichlet(1, . . . , K )

with parameters (1, . . . , K ), if

p(1, . . . , K )

=

(
k

k k ) (k )

n
kk -1
k =1

university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 27 / 90

Dirichlet Processes
Examples of Dirichlet distributions.
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 28 / 90

Dirichlet Processes
Agglomerative property of Dirichlet distributions.

Combining entries of probability vectors preserves Dirichlet property, for example:

(1, . . . , K )  Dirichlet(1, . . . , K )  (1 + 2, 3, . . . , K )  Dirichlet(1 + 2, 3, . . . , K )

Generally, if (I1, . . . , Ij ) is a partition of (1, . . . , n):

  

 i , . . . , i   Dirichlet  i , . . . , i 

iI1 iIj

iI1 iIj

university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 29 / 90

Dirichlet Processes
Decimative property of Dirichlet distributions.
The converse of the agglomerative property is also true, for example if: (1, . . . , K )  Dirichlet(1, . . . , K ) (1, 2)  Dirichlet(11, 12)
with 1 + 2 = 1,  (11, 12, 2, . . . , K )  Dirichlet(11, 22, 2, . . . , K )
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 30 / 90

Dirichlet Processes
Visualizing Dirichlet Processes

A Dirichlet process (DP) is an "infinitely decimated" Dirichlet distribution:

1  Dirichlet() (1, 2)  Dirichlet(/2, /2) (11, 12, 21, 22)  Dirichlet(/4, /4, /4, /4)
...

1 + 2 = 1 i1 + i2 = i

Each decimation step involves drawing from a Beta distribution (a Dirichlet with 2 components) and multiplying into the relevant entry.
Demo: DPgenerate

university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 31 / 90

Dirichlet Processes
A Proper but Non-Constructive Definition
A probability measure is a function from subsets of a space X to [0, 1] satisfying certain properties. A Dirichlet Process (DP) is a distribution over probability measures. Denote G  DP if G is a DP-distributed random probability measure. For any finite set of partitions A1 . . .  AK = X, we require (G(A1), . . . , G(AK )) to be Dirichlet distributed.
A4 A1
A6 A3 A5 A2
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 32 / 90

Dirichlet Processes
Parameters of the Dirichlet Process
A DP has two parameters: Base distribution H, which is like the mean of the DP. Strength parameter , which is like an inverse-variance of the DP.
We write: G  DP(, H)
if for any partition (A1, . . . , AK ) of X: (G(A1), . . . , G(AK ))  Dirichlet(H(A1), . . . , H(AK ))
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 33 / 90

Dirichlet Processes
Parameters of the Dirichlet Process

A DP has two parameters: Base distribution H, which is like the mean of the DP. Strength parameter , which is like an inverse-variance of the DP.
We write:
G  DP(, H)

The first two cumulants of the DP:

Expectation: Variance:

E[G(A)] = H(A)

V[G(A)]

=

H(A)(1 - H(A)) +1

where A is any measurable subset of X.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 33 / 90

Dirichlet Processes
Existence of Dirichlet Processes
A probability measure is a function from subsets of a space X to [0, 1] satisfying certain properties. A DP is a distribution over probability measures such that marginals on finite partitions are Dirichlet distributed. How do we know that such an object exists?!? Kolmogorov Consistency Theorem: [Ferguson 1973]. de Finetti's Theorem: Blackwell-MacQueen urn scheme, Chinese restaurant process, [Blackwell and MacQueen 1973, Aldous 1985]. Stick-breaking Construction: [Sethuraman 1994]. Gamma Process: [Ferguson 1973].
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 34 / 90

Dirichlet Processes
Existence of Dirichlet Processes
A probability measure is a function from subsets of a space X to [0, 1] satisfying certain properties. A DP is a distribution over probability measures such that marginals on finite partitions are Dirichlet distributed. How do we know that such an object exists?!? Kolmogorov Consistency Theorem: [Ferguson 1973]. de Finetti's Theorem: Blackwell-MacQueen urn scheme, Chinese restaurant process, [Blackwell and MacQueen 1973, Aldous 1985]. Stick-breaking Construction: [Sethuraman 1994]. Gamma Process: [Ferguson 1973].
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 34 / 90

Dirichlet Processes
Existence of Dirichlet Processes
A probability measure is a function from subsets of a space X to [0, 1] satisfying certain properties. A DP is a distribution over probability measures such that marginals on finite partitions are Dirichlet distributed. How do we know that such an object exists?!? Kolmogorov Consistency Theorem: [Ferguson 1973]. de Finetti's Theorem: Blackwell-MacQueen urn scheme, Chinese restaurant process, [Blackwell and MacQueen 1973, Aldous 1985]. Stick-breaking Construction: [Sethuraman 1994]. Gamma Process: [Ferguson 1973].
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 34 / 90

Dirichlet Processes
Existence of Dirichlet Processes
A probability measure is a function from subsets of a space X to [0, 1] satisfying certain properties. A DP is a distribution over probability measures such that marginals on finite partitions are Dirichlet distributed. How do we know that such an object exists?!? Kolmogorov Consistency Theorem: [Ferguson 1973]. de Finetti's Theorem: Blackwell-MacQueen urn scheme, Chinese restaurant process, [Blackwell and MacQueen 1973, Aldous 1985]. Stick-breaking Construction: [Sethuraman 1994]. Gamma Process: [Ferguson 1973].
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 34 / 90

Dirichlet Processes
Existence of Dirichlet Processes
A probability measure is a function from subsets of a space X to [0, 1] satisfying certain properties. A DP is a distribution over probability measures such that marginals on finite partitions are Dirichlet distributed. How do we know that such an object exists?!? Kolmogorov Consistency Theorem: [Ferguson 1973]. de Finetti's Theorem: Blackwell-MacQueen urn scheme, Chinese restaurant process, [Blackwell and MacQueen 1973, Aldous 1985]. Stick-breaking Construction: [Sethuraman 1994]. Gamma Process: [Ferguson 1973].
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 34 / 90

Outline
1 Applications 2 Dirichlet Processes 3 Representations of Dirichlet Processes 4 Modelling Data with Dirichlet Processes 5 Practical Course

Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 35 / 90

Dirichlet Processes
Representations of Dirichlet Processes

Suppose G  DP(, H). G is a (random) probability measure over X. We can treat it as a distribution over X. Let

1, . . . , n  G

be a random variable with distribution G.

We saw in the demo that draws from a Dirichlet process seem to be discrete distributions. If so, then:



G=

k k

k =1

and there is positive probability that i 's can take on the same value k for some k , i.e. the i 's cluster together.

In this section we are concerned with representations of Dirichlet

processes based upon both the clustering property and the sum of point

masses.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 36 / 90

Dirichlet Processes
Representations of Dirichlet Processes

Suppose G  DP(, H). G is a (random) probability measure over X. We can treat it as a distribution over X. Let

1, . . . , n  G

be a random variable with distribution G.

We saw in the demo that draws from a Dirichlet process seem to be discrete distributions. If so, then:



G=

k k

k =1

and there is positive probability that i 's can take on the same value k for some k , i.e. the i 's cluster together.

In this section we are concerned with representations of Dirichlet

processes based upon both the clustering property and the sum of point

masses.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 36 / 90

Dirichlet Processes
Representations of Dirichlet Processes

Suppose G  DP(, H). G is a (random) probability measure over X. We can treat it as a distribution over X. Let

1, . . . , n  G

be a random variable with distribution G.

We saw in the demo that draws from a Dirichlet process seem to be discrete distributions. If so, then:



G=

k k

k =1

and there is positive probability that i 's can take on the same value k for some k , i.e. the i 's cluster together.

In this section we are concerned with representations of Dirichlet

processes based upon both the clustering property and the sum of point

masses.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 36 / 90

Posterior Dirichlet Processes
Sampling from a Dirichlet Process

Suppose G is Dirichlet process distributed: G  DP(, H)

G is a (random) probability measure over X. We can treat it as a distribution over X. Let
G
be a random variable with distribution G.
We are interested in:

p() = p(|G)p(G) dG p(G|) = p(|G)p(G)
p()

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 37 / 90

Posterior Dirichlet Processes
Conjugacy between Dirichlet Distribution and Multinomial

Consider:

(1, . . . , K )  Dirichlet(1, . . . , K ) z|(1, . . . , K )  Discrete(1, . . . , K )
z is a multinomial variate, taking on value i  {1, . . . , n} with probability i . Then:

z  Discrete

1

P
i

i

,

.

.

.

,

K

P
i

i

(1, . . . , K )|z  Dirichlet(1 + 1(z), . . . , K + K (z))

where i (z) = 1 if z takes on value i, 0 otherwise. Converse also true.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 38 / 90

Posterior Dirichlet Processes

Fix a partition (A1, . . . , AK ) of X. Then
(G(A1), . . . , G(AK ))  Dirichlet(H(A1), . . . , H(AK )) P(  Ai |G) = G(Ai )

Using Dirichlet-multinomial conjugacy,
P(  Ai ) = H(Ai ) (G(A1), . . . , G(AK ))|  Dirichlet(H(A1)+(A1), . . . , H(AK )+(AK ))

The above is true for every finite partition of X. In particular, taking a really fine partition,
p()d = H(d)

Also, the posterior G| is also a Dirichlet process: G|  DP  + 1, H +  +1

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 39 / 90

Posterior Dirichlet Processes

Fix a partition (A1, . . . , AK ) of X. Then
(G(A1), . . . , G(AK ))  Dirichlet(H(A1), . . . , H(AK )) P(  Ai |G) = G(Ai )

Using Dirichlet-multinomial conjugacy,
P(  Ai ) = H(Ai ) (G(A1), . . . , G(AK ))|  Dirichlet(H(A1)+(A1), . . . , H(AK )+(AK ))

The above is true for every finite partition of X. In particular, taking a really fine partition,
p()d = H(d)

Also, the posterior G| is also a Dirichlet process: G|  DP  + 1, H +  +1

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 39 / 90

Posterior Dirichlet Processes

Fix a partition (A1, . . . , AK ) of X. Then
(G(A1), . . . , G(AK ))  Dirichlet(H(A1), . . . , H(AK )) P(  Ai |G) = G(Ai )

Using Dirichlet-multinomial conjugacy,
P(  Ai ) = H(Ai ) (G(A1), . . . , G(AK ))|  Dirichlet(H(A1)+(A1), . . . , H(AK )+(AK ))

The above is true for every finite partition of X. In particular, taking a really fine partition,
p()d = H(d)

Also, the posterior G| is also a Dirichlet process: G|  DP  + 1, H +  +1

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 39 / 90

Posterior Dirichlet Processes

Fix a partition (A1, . . . , AK ) of X. Then
(G(A1), . . . , G(AK ))  Dirichlet(H(A1), . . . , H(AK )) P(  Ai |G) = G(Ai )

Using Dirichlet-multinomial conjugacy,
P(  Ai ) = H(Ai ) (G(A1), . . . , G(AK ))|  Dirichlet(H(A1)+(A1), . . . , H(AK )+(AK ))

The above is true for every finite partition of X. In particular, taking a really fine partition,
p()d = H(d)

Also, the posterior G| is also a Dirichlet process: G|  DP  + 1, H +  +1

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 39 / 90

Posterior Dirichlet Processes

G  DP(, H)

H

|G  G



G|  DP



+

1,

H + +1

university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 40 / 90

Blackwell-MacQueen Urn Scheme

First sample: 

1|G  G 1  H

G  DP(, H)

G|1



DP(

+

1,

H +1 +1

)

Second sample:

2|1, G  G



2|1



H +1 +1

G|1



DP(

+

1,

H +1 +1

)

G|1,

2



DP(

+

2,

H+1 +2 +2

)

nth sample



n|1:n-1, G  G

n |1:n-1



H+Pni=-11 i +n-1

G|1:n-1



DP(

+

n

-

1,

H+Pin=-11 i +n-1

)

G|1:n



DP(

+

n,

H+Pin=1 i +n

)

university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 41 / 90

Blackwell-MacQueen Urn Scheme

First sample: 

1|G  G 1  H

G  DP(, H)

G|1



DP(

+

1,

H +1 +1

)

Second sample:

2|1, G  G



2|1



H +1 +1

G|1



DP(

+

1,

H +1 +1

)

G|1,

2



DP(

+

2,

H+1 +2 +2

)

nth sample



n|1:n-1, G  G

n |1:n-1



H+Pni=-11 i +n-1

G|1:n-1



DP(

+

n

-

1,

H+Pin=-11 i +n-1

)

G|1:n



DP(

+

n,

H+Pin=1 i +n

)

university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 41 / 90

Blackwell-MacQueen Urn Scheme

First sample: 

1|G  G 1  H

G  DP(, H)

G|1



DP(

+

1,

H +1 +1

)

Second sample:

2|1, G  G



2|1



H +1 +1

G|1



DP(

+

1,

H +1 +1

)

G|1,

2



DP(

+

2,

H+1 +2 +2

)

nth sample



n|1:n-1, G  G

n |1:n-1



H+Pni=-11 i +n-1

G|1:n-1



DP(

+

n

-

1,

H+Pin=-11 i +n-1

)

G|1:n



DP(

+

n,

H+Pin=1 i +n

)

university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 41 / 90

Blackwell-MacQueen Urn Scheme

Blackwell-MacQueen urn scheme produces a sequence 1, 2, . . . with the following conditionals:

n |1:n-1



H +

n-1 i =1

i

+n-1

Picking balls of different colors from an urn:
Start with no balls in the urn. with probability  , draw n  H, and add a ball of that color into the urn. With probability  n - 1, pick a ball at random from the urn, record n to be its color, return the ball into the urn and place a second ball of same color into urn.
Blackwell-MacQueen urn scheme is like a "representer" for the DP--a finite projection of an infinite object.
university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 42 / 90

Exchangeability and de Finetti's Theorem
Starting with a DP, we constructed Blackwell-MacQueen urn scheme. The reverse is possible using de Finetti's Theorem. Since i are iid  G, their joint distribution is invariant to permutations, thus 1, 2, . . . are exchangeable. Thus a distribution over measures must exist making them iid. This is the DP.
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 43 / 90

Chinese Restaurant Process
Draw 1, . . . , n from a Blackwell-MacQueen urn scheme. They take on K < n distinct values, say 1, . . . , K . This defines a partition of 1, . . . , n into K clusters, such that if i is in cluster k , then i = k. Random draws 1, . . . , n from a Blackwell-MacQueen urn scheme induces a random partition of 1, . . . , n. The induced distribution over partitions is a Chinese restaurant process (CRP).
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 44 / 90

Chinese Restaurant Process

Generating from the CRP:

First customer sits at the first table.

Customer n sits at:

Table

k

with

probability

nk +n-1

where

nk

is

the

number

of

customers

at table k .

A

new

table

K

+1

with

probability

 +n-1

.

Customers  integers, tables  clusters.

The CRP exhibits the clustering property of the DP.

university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 45 / 90

Chinese Restaurant Process

Generating from the CRP:

First customer sits at the first table.

Customer n sits at:

Table

k

with

probability

nk +n-1

where

nk

is

the

number

of

customers

at table k .

A

new

table

K

+1

with

probability

 +n-1

.

Customers  integers, tables  clusters.

The CRP exhibits the clustering property of the DP.

university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 45 / 90

Chinese Restaurant Process
To get back from the CRP to Blackwell-MacQueen urn scheme, simply draw
k  H for k = 1, . . . , K , then for i = 1, . . . , n set
i = zi where zi is the table that customer i sat at. The CRP teases apart the clustering property of the DP, from the base distribution.
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 46 / 90

Stick-breaking Construction

Returning to the posterior process:

G  DP(, H)

H

|G  G



G|



DP(

+

1,

H + +1

)

Consider a partition (, X\) of X. We have:

(G(),

G(X\))



Dirichlet((

+

1)

H + +1

(),

(

+

1)

H + +1

(X\))

= Dirichlet(1, )

G has a point mass located at :

G =  + (1 - )G

with   Beta(1, )

and G is the (renormalized) probability measure with the point mass removed.

What is G ?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 47 / 90

Stick-breaking Construction

Returning to the posterior process:

G  DP(, H)

H

|G  G



G|



DP(

+

1,

H + +1

)

Consider a partition (, X\) of X. We have:

(G(),

G(X\))



Dirichlet((

+

1)

H + +1

(),

(

+

1)

H + +1

(X\))

= Dirichlet(1, )

G has a point mass located at :

G =  + (1 - )G

with   Beta(1, )

and G is the (renormalized) probability measure with the point mass removed.

What is G ?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 47 / 90

Stick-breaking Construction

Returning to the posterior process:

G  DP(, H)

H

|G  G



G|



DP(

+

1,

H + +1

)

Consider a partition (, X\) of X. We have:

(G(),

G(X\))



Dirichlet((

+

1)

H + +1

(),

(

+

1)

H + +1

(X\))

= Dirichlet(1, )

G has a point mass located at :

G =  + (1 - )G

with   Beta(1, )

and G is the (renormalized) probability measure with the point mass removed.

What is G ?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 47 / 90

Stick-breaking Construction

Returning to the posterior process:

G  DP(, H)

H

|G  G



G|



DP(

+

1,

H + +1

)

Consider a partition (, X\) of X. We have:

(G(),

G(X\))



Dirichlet((

+

1)

H + +1

(),

(

+

1)

H + +1

(X\))

= Dirichlet(1, )

G has a point mass located at :

G =  + (1 - )G

with   Beta(1, )

and G is the (renormalized) probability measure with the point mass removed.

What is G ?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 47 / 90

Stick-breaking Construction

Currently, we have:

G



DP(

+

1,

H + +1

)

G  DP(, H)  G =  + (1 - )G

G

H

  Beta(1, )

Consider a further partition (, A1, . . . , AK ) of X:
(G(), G(A1), . . . , G(AK )) =(, (1 - )G (A1), . . . , (1 - )G (AK ))

The agglomerative/decimative property of Dirichlet implies:
(G (A1), . . . , G (AK ))  Dirichlet(H(A1), . . . , H(AK )) G  DP(, H)

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 48 / 90

Stick-breaking Construction

Currently, we have:

G



DP(

+

1,

H + +1

)

G  DP(, H)  G =  + (1 - )G

G

H

  Beta(1, )

Consider a further partition (, A1, . . . , AK ) of X: (G(), G(A1), . . . , G(AK ))
=(, (1 - )G (A1), . . . , (1 - )G (AK ))  Dirichlet(1, H(A1), . . . , H(AK ))
The agglomerative/decimative property of Dirichlet implies:
(G (A1), . . . , G (AK ))  Dirichlet(H(A1), . . . , H(AK )) G  DP(, H)

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 48 / 90

Stick-breaking Construction

Currently, we have:

G



DP(

+

1,

H + +1

)

G  DP(, H)  G =  + (1 - )G

G

H

  Beta(1, )

Consider a further partition (, A1, . . . , AK ) of X: (G(), G(A1), . . . , G(AK ))
=(, (1 - )G (A1), . . . , (1 - )G (AK ))  Dirichlet(1, H(A1), . . . , H(AK ))
The agglomerative/decimative property of Dirichlet implies:
(G (A1), . . . , G (AK ))  Dirichlet(H(A1), . . . , H(AK )) G  DP(, H)

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 48 / 90

Stick-breaking Construction

We have:

G  DP(, H)

G = 11 + (1 - 1)G1 G = 11 + (1 - 1)(22 + (1 - 2)G2)
...



G=

k k

k =1

where

k = k

k -1 i =1

(1

-

i

)

k  Beta(1, )

k  H

This is the stick-breaking construction. Demo: SBgenerate

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 49 / 90

Stick-breaking Construction
Starting with a DP, we showed that draws from the DP looks like a sum of point masses, with masses drawn from a stick-breaking construction. The steps are limited by assumptions of regularity on X and smoothness on H. [Sethuraman 1994] started with the stick-breaking construction, and showed that draws are indeed DP distributed, under very general conditions.
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 50 / 90

Dirichlet Processes
Representations of Dirichlet Processes

Posterior Dirichlet process:

G  DP(, H) |G  G



H

G|  DP



+

1,

H + +1

Blackwell-MacQueen urn scheme:

n |1:n-1



H +

n-1 i =1

i

+n-1

Chinese restaurant process:

p(customer n sat at table k |past) =

nk n-1+

n-1+

if occupied table if new table

Stick-breaking construction:

k -1
k = k (1 - i )
i =1

k  Beta(1, )

k  H



G=

 k unkiversity-logo

k =1

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 51 / 90

Outline
1 Applications 2 Dirichlet Processes 3 Representations of Dirichlet Processes 4 Modelling Data with Dirichlet Processes 5 Practical Course

Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 52 / 90

Density Estimation

Recall our approach to density estimation with Dirichlet processes:
G  DP(, H) xi  G

The above does not work. Why?

Problem: G is a discrete distribution; in particular it has no density!

Solution: Convolve the DP with a smooth distribution:

G  DP(, H) Fx (·) = F (·|)dG()
xi  Fx





G=

k k

k =1



Fx (·) = k F (·|k)

k =1

xi  Fx

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 53 / 90

Density Estimation

Recall our approach to density estimation with Dirichlet processes:
G  DP(, H) xi  G

The above does not work. Why?

Problem: G is a discrete distribution; in particular it has no density!

Solution: Convolve the DP with a smooth distribution:

G  DP(, H) Fx (·) = F (·|)dG()
xi  Fx





G=

k k

k =1



Fx (·) = k F (·|k)

k =1

xi  Fx

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 53 / 90

Density Estimation

Recall our approach to density estimation with Dirichlet processes:
G  DP(, H) xi  G

The above does not work. Why?

Problem: G is a discrete distribution; in particular it has no density!

Solution: Convolve the DP with a smooth distribution:

G  DP(, H) Fx (·) = F (·|)dG()
xi  Fx





G=

k k

k =1



Fx (·) = k F (·|k)

k =1

xi  Fx

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 53 / 90

Density Estimation

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

!15 !10

!5

0

5 10

F (·|µ, ) is Gaussian with mean µ, covariance . H(µ, ) is Gaussian-inverse-Wishart conjugate prior.

Yee Whye Teh (Gatsby)

DP

15
university-logo August 2007 / MLSS 54 / 90

Density Estimation

0.45

0.4

0.35

0.3

0.25

0.2

0.15

0.1

0.05

0

!15 !10

!5

0

5 10

F (·|µ, ) is Gaussian with mean µ, covariance . H(µ, ) is Gaussian-inverse-Wishart conjugate prior.

Yee Whye Teh (Gatsby)

DP

15
university-logo August 2007 / MLSS 54 / 90

Clustering

Recall our approach to density estimation:

G = k k  DP(, H)
k =1 
Fx (·) = k F (·|k)
k =1
xi  Fx

Above model equivalent to:

zi  Discrete() i = zi xi |zi  F (·|i ) = F (·|zi )

This is simply a mixture model with an infinite number of components.

This is called a DP mixture model.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 55 / 90

Clustering

DP mixture models are used in a variety of clustering applications, where the number of clusters is not known a priori.

They are also used in applications in which we believe the number of clusters grows without bound as the amount of data grows.

DPs have also found uses in applications beyond clustering, where the number of latent objects is not known or unbounded.

Nonparametric probabilistic context free grammars. Visual scene analysis. Infinite hidden Markov models/trees. Haplotype inference. ...

In many such applications it is important to be able to model the same set of objects in different contexts.

This corresponds to the problem of grouped clustering and can be

tackled using hierarchical Dirichlet processes.

[Teh et al. 2006]

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 56 / 90

Grouped Clustering
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 57 / 90

Grouped Clustering
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 57 / 90

Hierarchical Dirichlet Processes

Hierarchical Dirichlet process:
G0|, H  DP(, H) Gj |, G0  DP(, G0)
ji |Gj  Gj

Yee Whye Teh (Gatsby)

DP

H  G0  Gj
ji
i = 1, . . . , n j = 1, . . . , J
university-logo August 2007 / MLSS 58 / 90

Hierarchical Dirichlet Processes

G0|, H  DP(, H) Gj |, G0  DP(, G0)



G0 =

k k

k =1



Gj =

jk k

k =1

G0

|  Stick()
j |,   DP(, ) k|H  H

G1

Yee Whye Teh (Gatsby)

DP

G2
university-logo August 2007 / MLSS 59 / 90

Summary
Dirichlet process is "just" a glorified Dirichlet distribution. Draws from a DP are probability measures consisting of a weighted sum of point masses. Many representations: Blackwell-MacQueen urn scheme, Chinese restaurant process, stick-breaking construction. DP mixture models are mixture models with countably infinite number of components.
I have not delved into: Applications. Generalizations, extensions, other nonparametric processes. Inference: MCMC sampling, variational approximation.
Also see the tutorial material from Ghaharamani, Jordan and Tresp.
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 60 / 90

Summary
Dirichlet process is "just" a glorified Dirichlet distribution. Draws from a DP are probability measures consisting of a weighted sum of point masses. Many representations: Blackwell-MacQueen urn scheme, Chinese restaurant process, stick-breaking construction. DP mixture models are mixture models with countably infinite number of components.
I have not delved into: Applications. Generalizations, extensions, other nonparametric processes. Inference: MCMC sampling, variational approximation.
Also see the tutorial material from Ghaharamani, Jordan and Tresp.
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 60 / 90

Bayesian Nonparametrics

Parametric models can only capture a bounded amount of information from data, since they have bounded complexity.
Real data is often complex and the parametric assumption is often wrong.
Nonparametric models allow relaxation of the parametric assumption, bringing significant flexibility to our models of the world.
Nonparametric models can also often lead to model selection/averaging behaviours without the cost of actually doing model selection/averaging.
Nonparametric models are gaining popularity, spurred by growth in computational resources and inference algorithms.
In addition to DPs, HDPs and their generalizations, other nonparametric models include Indian buffet processes, beta processes, tree processes...

[Tutorials at Workshop on Bayesian Nonparametric Regression, Isaac Newton Institute, Cambridge, July 2007]

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 61 / 90

Bayesian Nonparametrics

Parametric models can only capture a bounded amount of information from data, since they have bounded complexity.
Real data is often complex and the parametric assumption is often wrong.
Nonparametric models allow relaxation of the parametric assumption, bringing significant flexibility to our models of the world.
Nonparametric models can also often lead to model selection/averaging behaviours without the cost of actually doing model selection/averaging.
Nonparametric models are gaining popularity, spurred by growth in computational resources and inference algorithms.
In addition to DPs, HDPs and their generalizations, other nonparametric models include Indian buffet processes, beta processes, tree processes...

[Tutorials at Workshop on Bayesian Nonparametric Regression, Isaac Newton Institute, Cambridge, July 2007]

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 61 / 90

Bayesian Nonparametrics

Parametric models can only capture a bounded amount of information from data, since they have bounded complexity.
Real data is often complex and the parametric assumption is often wrong.
Nonparametric models allow relaxation of the parametric assumption, bringing significant flexibility to our models of the world.
Nonparametric models can also often lead to model selection/averaging behaviours without the cost of actually doing model selection/averaging.
Nonparametric models are gaining popularity, spurred by growth in computational resources and inference algorithms.
In addition to DPs, HDPs and their generalizations, other nonparametric models include Indian buffet processes, beta processes, tree processes...

[Tutorials at Workshop on Bayesian Nonparametric Regression, Isaac Newton Institute, Cambridge, July 2007]

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 61 / 90

Bayesian Nonparametrics

Parametric models can only capture a bounded amount of information from data, since they have bounded complexity.
Real data is often complex and the parametric assumption is often wrong.
Nonparametric models allow relaxation of the parametric assumption, bringing significant flexibility to our models of the world.
Nonparametric models can also often lead to model selection/averaging behaviours without the cost of actually doing model selection/averaging.
Nonparametric models are gaining popularity, spurred by growth in computational resources and inference algorithms.
In addition to DPs, HDPs and their generalizations, other nonparametric models include Indian buffet processes, beta processes, tree processes...

[Tutorials at Workshop on Bayesian Nonparametric Regression, Isaac Newton Institute, Cambridge, July 2007]

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 61 / 90

Bayesian Nonparametrics

Parametric models can only capture a bounded amount of information from data, since they have bounded complexity.
Real data is often complex and the parametric assumption is often wrong.
Nonparametric models allow relaxation of the parametric assumption, bringing significant flexibility to our models of the world.
Nonparametric models can also often lead to model selection/averaging behaviours without the cost of actually doing model selection/averaging.
Nonparametric models are gaining popularity, spurred by growth in computational resources and inference algorithms.
In addition to DPs, HDPs and their generalizations, other nonparametric models include Indian buffet processes, beta processes, tree processes...

[Tutorials at Workshop on Bayesian Nonparametric Regression, Isaac Newton Institute, Cambridge, July 2007]

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 61 / 90

Outline
1 Applications 2 Dirichlet Processes 3 Representations of Dirichlet Processes 4 Modelling Data with Dirichlet Processes 5 Practical Course

Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 62 / 90

Exploring the Dirichlet Process

Before using DPs, it is important to understand its properties, so that we understand what prior assumptions we are imposing on our models.

In this practical course we shall work towards implementing a DP mixture model to cluster NIPS papers, thus the relevant properties are the clustering properties of the DP.

Consider the Chinese restaurant process representation of DPs:

First customer sits at the first table.

Customer n sits at:

Table

k

with

probability

nk +n-1

where

nk

is

the

number

of

customers

at table k .

A

new

table

K

+1

with

probability

 +n-1

.

How does number of clusters K scale as a function of  and of n (on average)?

How does the number nk of customers sitting around table k depend on

k and n (on average)?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 63 / 90

Exploring the Dirichlet Process

Before using DPs, it is important to understand its properties, so that we understand what prior assumptions we are imposing on our models.

In this practical course we shall work towards implementing a DP mixture model to cluster NIPS papers, thus the relevant properties are the clustering properties of the DP.

Consider the Chinese restaurant process representation of DPs:

First customer sits at the first table.

Customer n sits at:

Table

k

with

probability

nk +n-1

where

nk

is

the

number

of

customers

at table k .

A

new

table

K

+1

with

probability

 +n-1

.

How does number of clusters K scale as a function of  and of n (on average)?

How does the number nk of customers sitting around table k depend on

k and n (on average)?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 63 / 90

Exploring the Dirichlet Process

Before using DPs, it is important to understand its properties, so that we understand what prior assumptions we are imposing on our models.

In this practical course we shall work towards implementing a DP mixture model to cluster NIPS papers, thus the relevant properties are the clustering properties of the DP.

Consider the Chinese restaurant process representation of DPs:

First customer sits at the first table.

Customer n sits at:

Table

k

with

probability

nk +n-1

where

nk

is

the

number

of

customers

at table k .

A

new

table

K

+1

with

probability

 +n-1

.

How does number of clusters K scale as a function of  and of n (on average)?

How does the number nk of customers sitting around table k depend on

k and n (on average)?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 63 / 90

Exploring the Dirichlet Process

Before using DPs, it is important to understand its properties, so that we understand what prior assumptions we are imposing on our models.

In this practical course we shall work towards implementing a DP mixture model to cluster NIPS papers, thus the relevant properties are the clustering properties of the DP.

Consider the Chinese restaurant process representation of DPs:

First customer sits at the first table.

Customer n sits at:

Table

k

with

probability

nk +n-1

where

nk

is

the

number

of

customers

at table k .

A

new

table

K

+1

with

probability

 +n-1

.

How does number of clusters K scale as a function of  and of n (on average)?

How does the number nk of customers sitting around table k depend on

k and n (on average)?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 63 / 90

Exploring the Pitman-Yor Process

Sometimes the assumptions embedded in using DPs to model data are inappropriate.

The Pitman-Yor process is a generalization of the DP that often has more appropriate properties.

It has two parameters: d and  with 0  d < 1 and  > -d. When d = 0 the Pitman-Yor process reduces to a DP.

It also has a Chinese restaurant process representation:

First customer sits at the first table.

Customer n sits at:

Table

k

with

probability

nk -d +n-1

where

nk

is

the

number

of

customers

at table k .

A

new

table

K

+1

with

probability

+Kd +n-1

.

How does K scale as a function of n,  and d (on average)?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 64 / 90

Exploring the Pitman-Yor Process

Sometimes the assumptions embedded in using DPs to model data are inappropriate.

The Pitman-Yor process is a generalization of the DP that often has more appropriate properties.

It has two parameters: d and  with 0  d < 1 and  > -d. When d = 0 the Pitman-Yor process reduces to a DP.

It also has a Chinese restaurant process representation:

First customer sits at the first table.

Customer n sits at:

Table

k

with

probability

nk -d +n-1

where

nk

is

the

number

of

customers

at table k .

A

new

table

K

+1

with

probability

+Kd +n-1

.

How does K scale as a function of n,  and d (on average)?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 64 / 90

Exploring the Pitman-Yor Process

Sometimes the assumptions embedded in using DPs to model data are inappropriate.

The Pitman-Yor process is a generalization of the DP that often has more appropriate properties.

It has two parameters: d and  with 0  d < 1 and  > -d. When d = 0 the Pitman-Yor process reduces to a DP.

It also has a Chinese restaurant process representation:

First customer sits at the first table.

Customer n sits at:

Table

k

with

probability

nk -d +n-1

where

nk

is

the

number

of

customers

at table k .

A

new

table

K

+1

with

probability

+Kd +n-1

.

How does K scale as a function of n,  and d (on average)?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 64 / 90

Exploring the Pitman-Yor Process

Sometimes the assumptions embedded in using DPs to model data are inappropriate.

The Pitman-Yor process is a generalization of the DP that often has more appropriate properties.

It has two parameters: d and  with 0  d < 1 and  > -d. When d = 0 the Pitman-Yor process reduces to a DP.

It also has a Chinese restaurant process representation:

First customer sits at the first table.

Customer n sits at:

Table

k

with

probability

nk -d +n-1

where

nk

is

the

number

of

customers

at table k .

A

new

table

K

+1

with

probability

+Kd +n-1

.

How does K scale as a function of n,  and d (on average)?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 64 / 90

Dirichlet Process Mixture Models

We model a data set x1, . . . , xn using the following model:

G  DP(, H) i |G  G xi |i  F (·|i )

for i = 1, . . . , n

Each i is a latent parameter modelling xi , while G is the unknown distribution over parameters modelled using a DP.
This is the basic DP mixture model.
Implement a DP mixture model.

university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 65 / 90

Dirichlet Process Mixture Models

We model a data set x1, . . . , xn using the following model:

G  DP(, H) i |G  G xi |i  F (·|i )

for i = 1, . . . , n

Each i is a latent parameter modelling xi , while G is the unknown distribution over parameters modelled using a DP.
This is the basic DP mixture model.
Implement a DP mixture model.

university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 65 / 90

Dirichlet Process Mixture Models
Infinite Limit of Finite Mixture Models

Different representations lead to different inference algorithms for DP mixture models.

The most common are based on the Chinese restaurant process and on the stick-breaking construction.

Here we shall work with the Chinese restaurant process representation, which, incidentally, can also be derived as the infinite limit of finite mixture models.

A finite mixture model is defined as follows:

k  H   Dirichlet(/K , . . . , /K )
zi |  Discrete() xi |zi  F (·|zi )

for k = 1, . . . , K for i = 1, . . . , n
university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 66 / 90

Dirichlet Process Mixture Models
Infinite Limit of Finite Mixture Models

Different representations lead to different inference algorithms for DP mixture models.

The most common are based on the Chinese restaurant process and on the stick-breaking construction.

Here we shall work with the Chinese restaurant process representation, which, incidentally, can also be derived as the infinite limit of finite mixture models.

A finite mixture model is defined as follows:

k  H   Dirichlet(/K , . . . , /K )
zi |  Discrete() xi |zi  F (·|zi )

for k = 1, . . . , K for i = 1, . . . , n
university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 66 / 90

Dirichlet Process Mixture Models
Infinite Limit of Finite Mixture Models

Different representations lead to different inference algorithms for DP mixture models.

The most common are based on the Chinese restaurant process and on the stick-breaking construction.

Here we shall work with the Chinese restaurant process representation, which, incidentally, can also be derived as the infinite limit of finite mixture models.

A finite mixture model is defined as follows:

k  H   Dirichlet(/K , . . . , /K )
zi |  Discrete() xi |zi  F (·|zi )

for k = 1, . . . , K for i = 1, . . . , n
university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 66 / 90

Dirichlet Process Mixture Models
Infinite Limit of Finite Mixture Models

Different representations lead to different inference algorithms for DP mixture models.

The most common are based on the Chinese restaurant process and on the stick-breaking construction.

Here we shall work with the Chinese restaurant process representation, which, incidentally, can also be derived as the infinite limit of finite mixture models.

A finite mixture model is defined as follows:

k  H   Dirichlet(/K , . . . , /K )
zi |  Discrete() xi |zi  F (·|zi )

for k = 1, . . . , K for i = 1, . . . , n
university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 66 / 90

Dirichlet Process Mixture Models
Collapsed Gibbs Sampling in Finite Mixture Models
A finite mixture model is defined as follows: k  H   Dirichlet(/K , . . . , /K )
zi |  Discrete() xi |zi  F (zi )

for k = 1, . . . , K for i = 1, . . . , n

Assuming H is conjugate to F (·|), we can integrate out both  and k's, leaving us with zi 's only. The simplest MCMC algorithm is to Gibbs sample zi 's (collapsed Gibbs sampling):
p(zi = k |z¬i , x)  p(zi = k |z¬i )p(xi |z¬i , xk¬i ) p(xi |z¬i , x¬k i ) = p(xi |k)p(k|{xj : j = i, zj = k }) d k
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 67 / 90

Dirichlet Process Mixture Models
Collapsed Gibbs Sampling in Finite Mixture Models
A finite mixture model is defined as follows: k  H   Dirichlet(/K , . . . , /K )
zi |  Discrete() xi |zi  F (zi )

for k = 1, . . . , K for i = 1, . . . , n

Assuming H is conjugate to F (·|), we can integrate out both  and k's, leaving us with zi 's only. The simplest MCMC algorithm is to Gibbs sample zi 's (collapsed Gibbs sampling):
p(zi = k |z¬i , x)  p(zi = k |z¬i )p(xi |z¬i , xk¬i ) p(xi |z¬i , x¬k i ) = p(xi |k)p(k|{xj : j = i, zj = k }) d k
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 67 / 90

Dirichlet Process Mixture Models
Collapsed Gibbs Sampling in Finite Mixture Models
A finite mixture model is defined as follows: k  H   Dirichlet(/K , . . . , /K )
zi |  Discrete() xi |zi  F (zi )

for k = 1, . . . , K for i = 1, . . . , n

Assuming H is conjugate to F (·|), we can integrate out both  and k's, leaving us with zi 's only. The simplest MCMC algorithm is to Gibbs sample zi 's (collapsed Gibbs sampling):
p(zi = k |z¬i , x)  p(zi = k |z¬i )p(xi |z¬i , xk¬i ) p(xi |z¬i , x¬k i ) = p(xi |k)p(k|{xj : j = i, zj = k }) d k
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 67 / 90

Aside: Markov Chain Monte Carlo Sampling
Markov chain Monte Carlo sampling is a dominant and diverse family of inference algorithms for probabilistic models. Here we are interested in obtaining samples from the posterior:
z(s)  p(z|x) = p(z, , |x) d d 

The basic idea is to construct a sequence z(1), z(2), . . . so that for large enough t, z(t) will be an (approximate) sample from the posterior p(z|x).

Convergence to the posterior is guaranteed, but (most of the time) there is no convergence diagnostics, only heuristics. Won't worry about this.
Given the previous state z(t-1), we construct z(t) by making a small (stochastic) alteration to z(t-1) so that z(t) is "closer" to the posterior.

In Gibbs sampling, this alteration is achieved by taking an entry, say zi , and sampling it from the conditional:

[Neal 1993]

zi(t)  p(zi |z(¬ti-1), x)

z¬(ti) = z¬(ti-1)

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 68 / 90

Aside: Markov Chain Monte Carlo Sampling
Markov chain Monte Carlo sampling is a dominant and diverse family of inference algorithms for probabilistic models. Here we are interested in obtaining samples from the posterior:
z(s)  p(z|x) = p(z, , |x) d d 

The basic idea is to construct a sequence z(1), z(2), . . . so that for large enough t, z(t) will be an (approximate) sample from the posterior p(z|x).

Convergence to the posterior is guaranteed, but (most of the time) there is no convergence diagnostics, only heuristics. Won't worry about this.
Given the previous state z(t-1), we construct z(t) by making a small (stochastic) alteration to z(t-1) so that z(t) is "closer" to the posterior.

In Gibbs sampling, this alteration is achieved by taking an entry, say zi , and sampling it from the conditional:

[Neal 1993]

zi(t)  p(zi |z(¬ti-1), x)

z¬(ti) = z¬(ti-1)

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 68 / 90

Aside: Markov Chain Monte Carlo Sampling
Markov chain Monte Carlo sampling is a dominant and diverse family of inference algorithms for probabilistic models. Here we are interested in obtaining samples from the posterior:
z(s)  p(z|x) = p(z, , |x) d d 

The basic idea is to construct a sequence z(1), z(2), . . . so that for large enough t, z(t) will be an (approximate) sample from the posterior p(z|x).

Convergence to the posterior is guaranteed, but (most of the time) there is no convergence diagnostics, only heuristics. Won't worry about this.
Given the previous state z(t-1), we construct z(t) by making a small (stochastic) alteration to z(t-1) so that z(t) is "closer" to the posterior.

In Gibbs sampling, this alteration is achieved by taking an entry, say zi , and sampling it from the conditional:

[Neal 1993]

zi(t)  p(zi |z(¬ti-1), x)

z¬(ti) = z¬(ti-1)

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 68 / 90

Aside: Markov Chain Monte Carlo Sampling
Markov chain Monte Carlo sampling is a dominant and diverse family of inference algorithms for probabilistic models. Here we are interested in obtaining samples from the posterior:
z(s)  p(z|x) = p(z, , |x) d d 

The basic idea is to construct a sequence z(1), z(2), . . . so that for large enough t, z(t) will be an (approximate) sample from the posterior p(z|x).

Convergence to the posterior is guaranteed, but (most of the time) there is no convergence diagnostics, only heuristics. Won't worry about this.
Given the previous state z(t-1), we construct z(t) by making a small (stochastic) alteration to z(t-1) so that z(t) is "closer" to the posterior.

In Gibbs sampling, this alteration is achieved by taking an entry, say zi , and sampling it from the conditional:

[Neal 1993]

zi(t)  p(zi |z(¬ti-1), x)

z¬(ti) = z¬(ti-1)

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 68 / 90

Aside: Markov Chain Monte Carlo Sampling
Markov chain Monte Carlo sampling is a dominant and diverse family of inference algorithms for probabilistic models. Here we are interested in obtaining samples from the posterior:
z(s)  p(z|x) = p(z, , |x) d d 

The basic idea is to construct a sequence z(1), z(2), . . . so that for large enough t, z(t) will be an (approximate) sample from the posterior p(z|x).

Convergence to the posterior is guaranteed, but (most of the time) there is no convergence diagnostics, only heuristics. Won't worry about this.
Given the previous state z(t-1), we construct z(t) by making a small (stochastic) alteration to z(t-1) so that z(t) is "closer" to the posterior.

In Gibbs sampling, this alteration is achieved by taking an entry, say zi , and sampling it from the conditional:

[Neal 1993]

zi(t)  p(zi |z(¬ti-1), x)

z¬(ti) = z¬(ti-1)

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 68 / 90

Aside: Exponential Families

An exponential family of distributions is parametrized as: p(x|) = exp t() s(x) - (x) - () s(x) = sufficient statistics vector. t() = natural parameter vector. () = log exp t() s(x ) - (x ) (log normalization)
x
The conjugate prior is an exponential family distribution over : p() = exp t()  - () - (, )

The posterior given observations x1, . . . , xn is in the same family:

p(|x) = exp t() ( + i s(xi )) - ( + n)() - ( + i s(xi ),  + n)

The marginal probability is:

p(x) = exp (( + i s(xi ),  + n) - (, ) - i (xi ))

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 69 / 90

Aside: Exponential Families

An exponential family of distributions is parametrized as: p(x|) = exp t() s(x) - (x) - () s(x) = sufficient statistics vector. t() = natural parameter vector. () = log exp t() s(x ) - (x ) (log normalization)
x
The conjugate prior is an exponential family distribution over : p() = exp t()  - () - (, )

The posterior given observations x1, . . . , xn is in the same family:

p(|x) = exp t() ( + i s(xi )) - ( + n)() - ( + i s(xi ),  + n)

The marginal probability is:

p(x) = exp (( + i s(xi ),  + n) - (, ) - i (xi ))

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 69 / 90

Aside: Exponential Families

An exponential family of distributions is parametrized as: p(x|) = exp t() s(x) - (x) - () s(x) = sufficient statistics vector. t() = natural parameter vector. () = log exp t() s(x ) - (x ) (log normalization)
x
The conjugate prior is an exponential family distribution over : p() = exp t()  - () - (, )

The posterior given observations x1, . . . , xn is in the same family:

p(|x) = exp t() ( + i s(xi )) - ( + n)() - ( + i s(xi ),  + n)

The marginal probability is:

p(x) = exp (( + i s(xi ),  + n) - (, ) - i (xi ))

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 69 / 90

Aside: Exponential Families

An exponential family of distributions is parametrized as: p(x|) = exp t() s(x) - (x) - () s(x) = sufficient statistics vector. t() = natural parameter vector. () = log exp t() s(x ) - (x ) (log normalization)
x
The conjugate prior is an exponential family distribution over : p() = exp t()  - () - (, )

The posterior given observations x1, . . . , xn is in the same family:

p(|x) = exp t() ( + i s(xi )) - ( + n)() - ( + i s(xi ),  + n)

The marginal probability is:

p(x) = exp (( + i s(xi ),  + n) - (, ) - i (xi ))

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 69 / 90

Dirichlet Process Mixture Models
Back to Collapsed Gibbs Sampling in Finite Mixture Models

Finite mixture model:

k  H   Dirichlet(/K , . . . , /K )

for k = 1, . . . , K

zi |  Discrete() xi |zi  F (zi )

for i = 1, . . . , n

Integrating out both  and k's, the Gibbs sampling conditional distributions for z are:

p(zi = k |z¬i , x)  p(zi = k |z¬i , x¬i )p(xi |z¬i , xk¬i )

p(zi = k |z¬i , x¬i )  (nk¬i + /K )

p(xi |z¬i , x¬k i ) = p(xi |k)p(k|{xj : j = i, zj = k }) d k

= exp ( + s(xi ) + j=i:zj =k s(xj ),  + 1 + nk¬i )

- ( + j=i:zj =k s(xj ),  + nk¬i ) - (xi )

Demo: fm_demo2d

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 70 / 90

Dirichlet Process Mixture Models
Back to Collapsed Gibbs Sampling in Finite Mixture Models

Finite mixture model:

k  H   Dirichlet(/K , . . . , /K )

for k = 1, . . . , K

zi |  Discrete() xi |zi  F (zi )

for i = 1, . . . , n

Integrating out both  and k's, the Gibbs sampling conditional distributions for z are:

p(zi = k |z¬i , x)  p(zi = k |z¬i , x¬i )p(xi |z¬i , xk¬i )

p(zi = k |z¬i , x¬i )  (nk¬i + /K )

p(xi |z¬i , x¬k i ) = p(xi |k)p(k|{xj : j = i, zj = k }) d k

= exp ( + s(xi ) + j=i:zj =k s(xj ),  + 1 + nk¬i )

- ( + j=i:zj =k s(xj ),  + nk¬i ) - (xi )

Demo: fm_demo2d

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 70 / 90

Dirichlet Process Mixture Models
Back to Collapsed Gibbs Sampling in Finite Mixture Models

Finite mixture model:

k  H   Dirichlet(/K , . . . , /K )

for k = 1, . . . , K

zi |  Discrete() xi |zi  F (zi )

for i = 1, . . . , n

Integrating out both  and k's, the Gibbs sampling conditional distributions for z are:

p(zi = k |z¬i , x)  p(zi = k |z¬i , x¬i )p(xi |z¬i , xk¬i )

p(zi = k |z¬i , x¬i )  (nk¬i + /K )

p(xi |z¬i , x¬k i ) = p(xi |k)p(k|{xj : j = i, zj = k }) d k

= exp ( + s(xi ) + j=i:zj =k s(xj ),  + 1 + nk¬i )

- ( + j=i:zj =k s(xj ),  + nk¬i ) - (xi )

Demo: fm_demo2d

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 70 / 90

Dirichlet Process Mixture Models
Taking the Infinite Limit

Imagine that K 0 is really large.
Only a few components will be "active" (i.e. with nk > 0), while most are "inactive".

p(zi = k |z¬i , x) 

(nk¬i + /K )p(xi |z¬i , x¬k i ) (/K )p(xi )

p(zi = k active|z¬i , x)  (nk¬i + /K )p(xi |z¬i , x¬k i )  nk¬i p(xi |z¬i , x¬k i )
p(zi inactive|z¬i , x)  ((K - Kactive)/K )p(xi )

 p(xi )

if k active; if k inactive.

This gives an inference algorithm for DP mixture models in Chinese restaurant process representation.
university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 71 / 90

Dirichlet Process Mixture Models
Taking the Infinite Limit

Imagine that K 0 is really large.
Only a few components will be "active" (i.e. with nk > 0), while most are "inactive".

p(zi = k |z¬i , x) 

(nk¬i + /K )p(xi |z¬i , x¬k i ) (/K )p(xi )

p(zi = k active|z¬i , x)  (nk¬i + /K )p(xi |z¬i , x¬k i )  nk¬i p(xi |z¬i , x¬k i )
p(zi inactive|z¬i , x)  ((K - Kactive)/K )p(xi )

 p(xi )

if k active; if k inactive.

This gives an inference algorithm for DP mixture models in Chinese restaurant process representation.
university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 71 / 90

Dirichlet Process Mixture Models
Further Details
Rearrange mixture component indices so that 1, . . . , Kactive are active, and the rest are inactive.
p(zi = k  Kactive|z¬i , x)  nk¬i p(xi |z¬i , xk¬i ) p(zi > Kactive|z¬i , x)  p(xi )
If zi takes on an inactive value, instantiate a new active component, and increment Kactive. If nk = 0 for some k during sampling, delete that active component, and decrement Kactive.
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 72 / 90

Dirichlet Process Mixture Models
Further Details
Rearrange mixture component indices so that 1, . . . , Kactive are active, and the rest are inactive.
p(zi = k  Kactive|z¬i , x)  nk¬i p(xi |z¬i , xk¬i ) p(zi > Kactive|z¬i , x)  p(xi )
If zi takes on an inactive value, instantiate a new active component, and increment Kactive. If nk = 0 for some k during sampling, delete that active component, and decrement Kactive.
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 72 / 90

Dirichlet Process Mixture Models
Further Details
Rearrange mixture component indices so that 1, . . . , Kactive are active, and the rest are inactive.
p(zi = k  Kactive|z¬i , x)  nk¬i p(xi |z¬i , xk¬i ) p(zi > Kactive|z¬i , x)  p(xi )
If zi takes on an inactive value, instantiate a new active component, and increment Kactive. If nk = 0 for some k during sampling, delete that active component, and decrement Kactive.
university-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 72 / 90

Clustering NIPS Papers

I have prepared a small subset of NIPS papers for you to try clustering them.

We concentrate on a small subset of papers, and a small subset of "informative" words.

Each paper is represented as a bag-of-words. Paper i is represented by a vector xi = (xi1, . . . , xiW ):

xiw = c

if word w occurs c times in paper i.

Model papers in cluster k using a Multinomial distribution:

p(xi |k) = (

w xiw )! w xiw !

(kw )xiw
w

The conjugate prior for k is a Dirichlet:

p(k|b)

=

(
w

w bw ) (bw )

(kw )bw -1
w

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 73 / 90

Clustering NIPS Papers

I have prepared a small subset of NIPS papers for you to try clustering them.

We concentrate on a small subset of papers, and a small subset of "informative" words.

Each paper is represented as a bag-of-words. Paper i is represented by a vector xi = (xi1, . . . , xiW ):

xiw = c

if word w occurs c times in paper i.

Model papers in cluster k using a Multinomial distribution:

p(xi |k) = (

w xiw )! w xiw !

(kw )xiw
w

The conjugate prior for k is a Dirichlet:

p(k|b)

=

(
w

w bw ) (bw )

(kw )bw -1
w

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 73 / 90

Clustering NIPS Papers

I have prepared a small subset of NIPS papers for you to try clustering them.

We concentrate on a small subset of papers, and a small subset of "informative" words.

Each paper is represented as a bag-of-words. Paper i is represented by a vector xi = (xi1, . . . , xiW ):

xiw = c

if word w occurs c times in paper i.

Model papers in cluster k using a Multinomial distribution:

p(xi |k) = (

w xiw )! w xiw !

(kw )xiw
w

The conjugate prior for k is a Dirichlet:

p(k|b)

=

(
w

w bw ) (bw )

(kw )bw -1
w

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 73 / 90

Clustering NIPS Papers

I have prepared a small subset of NIPS papers for you to try clustering them.

We concentrate on a small subset of papers, and a small subset of "informative" words.

Each paper is represented as a bag-of-words. Paper i is represented by a vector xi = (xi1, . . . , xiW ):

xiw = c

if word w occurs c times in paper i.

Model papers in cluster k using a Multinomial distribution:

p(xi |k) = (

w xiw )! w xiw !

(kw )xiw
w

The conjugate prior for k is a Dirichlet:

p(k|b)

=

(
w

w bw ) (bw )

(kw )bw -1
w

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 73 / 90

Clustering NIPS Papers

I have prepared a small subset of NIPS papers for you to try clustering them.

We concentrate on a small subset of papers, and a small subset of "informative" words.

Each paper is represented as a bag-of-words. Paper i is represented by a vector xi = (xi1, . . . , xiW ):

xiw = c

if word w occurs c times in paper i.

Model papers in cluster k using a Multinomial distribution:

p(xi |k) = (

w xiw )! w xiw !

(kw )xiw
w

The conjugate prior for k is a Dirichlet:

p(k|b)

=

(
w

w bw ) (bw )

(kw )bw -1
w

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 73 / 90

Clustering NIPS Papers
Specifying the Priors
We shall use a symmetric Dirichlet prior for the cluster parameters . Specifically bw = b/W for some b > 0. The model:
H = Dirichlet(b/W , . . . , b/W ) G  DP(, H) i  G xi  Multinomial(ni , i )

Only two numbers to set:  and b.  controls the a priori expected number of clusters. b controls the number of words assigned to each cluster. What are reasonable values for  and b?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 74 / 90

Clustering NIPS Papers
Specifying the Priors
We shall use a symmetric Dirichlet prior for the cluster parameters . Specifically bw = b/W for some b > 0. The model:
H = Dirichlet(b/W , . . . , b/W ) G  DP(, H) i  G xi  Multinomial(ni , i )

Only two numbers to set:  and b.  controls the a priori expected number of clusters. b controls the number of words assigned to each cluster. What are reasonable values for  and b?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 74 / 90

Clustering NIPS Papers
Specifying the Priors
We shall use a symmetric Dirichlet prior for the cluster parameters . Specifically bw = b/W for some b > 0. The model:
H = Dirichlet(b/W , . . . , b/W ) G  DP(, H) i  G xi  Multinomial(ni , i )

Only two numbers to set:  and b.  controls the a priori expected number of clusters. b controls the number of words assigned to each cluster. What are reasonable values for  and b?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 74 / 90

Clustering NIPS Papers
Specifying the Priors
We shall use a symmetric Dirichlet prior for the cluster parameters . Specifically bw = b/W for some b > 0. The model:
H = Dirichlet(b/W , . . . , b/W ) G  DP(, H) i  G xi  Multinomial(ni , i )

Only two numbers to set:  and b.  controls the a priori expected number of clusters. b controls the number of words assigned to each cluster. What are reasonable values for  and b?

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 74 / 90

Clustering NIPS Papers
Sensitivity to Priors

When building models and making inferences, and one does not "trust" ones prior very much, then it is important to perform sensitivity analysis.
Sensitivity analysis is about determining how much our inference conclusions depend on the setting of the model priors.
If our conclusions depend strongly on the priors which we don't trust very much, then we cannot trust our conclusions either.
If our conclusions do not depend strongly on the priors, then we can more strongly trust our conclusions.
What part of our model should we worry about?

H = Dirichlet(b/W , . . . , b/W ) G  DP(, H) i  G xi  Multinomial(ni , i )

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 75 / 90

Clustering NIPS Papers
Sensitivity to Priors

When building models and making inferences, and one does not "trust" ones prior very much, then it is important to perform sensitivity analysis.
Sensitivity analysis is about determining how much our inference conclusions depend on the setting of the model priors.
If our conclusions depend strongly on the priors which we don't trust very much, then we cannot trust our conclusions either.
If our conclusions do not depend strongly on the priors, then we can more strongly trust our conclusions.
What part of our model should we worry about?

H = Dirichlet(b/W , . . . , b/W ) G  DP(, H) i  G xi  Multinomial(ni , i )

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 75 / 90

Clustering NIPS Papers
Sensitivity to Priors

When building models and making inferences, and one does not "trust" ones prior very much, then it is important to perform sensitivity analysis.
Sensitivity analysis is about determining how much our inference conclusions depend on the setting of the model priors.
If our conclusions depend strongly on the priors which we don't trust very much, then we cannot trust our conclusions either.
If our conclusions do not depend strongly on the priors, then we can more strongly trust our conclusions.
What part of our model should we worry about?

H = Dirichlet(b/W , . . . , b/W ) G  DP(, H) i  G xi  Multinomial(ni , i )

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 75 / 90

Clustering NIPS Papers
Sensitivity to Priors

When building models and making inferences, and one does not "trust" ones prior very much, then it is important to perform sensitivity analysis.
Sensitivity analysis is about determining how much our inference conclusions depend on the setting of the model priors.
If our conclusions depend strongly on the priors which we don't trust very much, then we cannot trust our conclusions either.
If our conclusions do not depend strongly on the priors, then we can more strongly trust our conclusions.
What part of our model should we worry about?

H = Dirichlet(b/W , . . . , b/W ) G  DP(, H) i  G xi  Multinomial(ni , i )

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 75 / 90

Clustering NIPS Papers
Sensitivity to Priors

When building models and making inferences, and one does not "trust" ones prior very much, then it is important to perform sensitivity analysis.
Sensitivity analysis is about determining how much our inference conclusions depend on the setting of the model priors.
If our conclusions depend strongly on the priors which we don't trust very much, then we cannot trust our conclusions either.
If our conclusions do not depend strongly on the priors, then we can more strongly trust our conclusions.
What part of our model should we worry about?

H = Dirichlet(b/W , . . . , b/W ) G  DP(, H) i  G xi  Multinomial(ni , i )

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 75 / 90

Summary
We explored some properties of the Dirichlet process. We implemented a Dirichlet process mixture model. We applied a Dirichlet process mixture model to clustering NIPS papers. We considered ways of specifying the hyperparameters of the model, and explored the sensitivity to these hyperparameters. Dirichlet processes are not that mysterious or hard.
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 76 / 90

Summary
We explored some properties of the Dirichlet process. We implemented a Dirichlet process mixture model. We applied a Dirichlet process mixture model to clustering NIPS papers. We considered ways of specifying the hyperparameters of the model, and explored the sensitivity to these hyperparameters. Dirichlet processes are not that mysterious or hard.
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 76 / 90

Bibliography I
Dirichlet Processes and Beyond in Machine Learning
Dirichlet Processes were first introduced by [Ferguson 1973], while [Antoniak 1974] further developed DPs as well as introduce the mixture of DPs. [Blackwell and MacQueen 1973] showed that the Blackwell-MacQueen urn scheme is exchangeable with the DP being its de Finetti measure. Further information on the Chinese restaurant process can be obtained at [Aldous 1985, Pitman 2002]. The DP is also related to Ewens' Sampling Formula [Ewens 1972]. [Sethuraman 1994] gave a constructive definition of the DP via a stick-breaking construction. DPs were rediscovered in the machine learning community by [?, Rasmussen 2000].
Hierarchical Dirichlet Processes (HDPs) were first developed by [Teh et al. 2006], although an aspect of the model was first discussed in the context of infinite hidden Markov models [Beal et al. 2002]. HDPs and generalizations have been applied across a wide variety of fields. Dependent Dirichlet Processes are sets of coupled distributions over probability measures, each of which is marginally DP [MacEachern et al. 2001]. A variety of dependent DPs have been proposed in the literature since then [Srebro and Roweis 2005, Griffin 2007, Caron et al. 2007]. The infinite mixture of Gaussian processes of [Rasmussen and Ghahramani 2002] can also be interpreted as a dependent DP. Indian Buffet Processes (IBPs) were first proposed in [Griffiths and Ghahramani 2006], and extended to a two-parameter family in [Griffiths et al. 2007b]. [Thibaux and Jordan 2007] showed that the de Finetti measure for the IBP is the beta process of [Hjort 1990], while [Teh et al. 2007] gave a stick-breaking construction and developed efficient slice sampling inference algorithms for the IBP. Nonparametric Tree Models are models that use distributions over trees that are consistent and exchangeable. [Blei et al. 2004] used a nested CRP to define distributions over trees with a finite number of levels. [Neal 2001, Neal 2003] defined Dirichlet diffusion trees, which are binary trees produced by a fragmentation process. [Teh et al. 2008] used Kingman's coalescent [Kingman 1982b, Kingman 1982a] to produce random binary trees using a coalescent process. [Roy et al. 2007] proposed annotated hierarchies, using tree-consistent partitions first defined in [Heller and Ghahramani 2005] to model both relational and featural data.
Markov chain Monte Carlo Inference algorithms are the dominant approaches to inference in DP mixtures. [Neal 2000] is a good review of algorithms based on Gibbs sampling in the CRP representation. Algorithm 8 in [Neal 2000] is still one of the best algorithms based on simple local moves. [Ishwaran and James 2001] proposed blocked Gibbs sampling in the stick-breaking representation instead due to the simplicity in implementation. This has been further explored in [Porteous et al. 2006]. Suninivceersity-logo
Yee Whye Teh (Gatsby) DP August 2007 / MLSS 77 / 90

Bibliography II
Dirichlet Processes and Beyond in Machine Learning

then there has been proposals for better MCMC samplers based on proposing larger moves in a Metropolis-Hastings framework [Jain and Neal 2004, Liang et al. 2007a], as well as sequential Monte Carlo [Fearnhead 2004, Mansingkha et al. 2007]. Other Approximate Inference Methods have also been proposed for DP mixture models. [Blei and Jordan 2006] is the first variational Bayesian approximation, and is based on a truncated stick-breaking representation. [Kurihara et al. 2007] proposed an improved VB approximation based on a better truncation technique, and using KD-trees for extremely efficient inference in large scale applications. [Kurihara et al. 2007] studied improved VB approximations based on integrating out the stick-breaking weights. [Minka and Ghahramani 2003] derived an expectation propagation based algorithm. [Heller and Ghahramani 2005] derived tree-based approximation which can be seen as a Bayesian hierarchical clustering algorithm. [Daume III 2007] developed admissible search heuristics to find MAP clusterings in a DP mixture model.

Computer Vision and Image Processing. HDPs have been used in object tracking

[Fox et al. 2006, Fox et al. 2007b, Fox et al. 2007a]. An extension called the transformed Dirichlet process has been used in

scene analysis [Sudderth et al. 2006b, Sudderth et al. 2006a, Sudderth et al. 2007], a related extension has been used in fMRI

image analysis [Kim and Smyth 2007, Kim 2007]. An extension of the infinite hidden Markov model called the nonparametric

hidden Markov tree has been introduced and applied to image denoising [Kivinen et al. 2007].

Natural Language Processing. HDPs are essential ingredients in defining nonparametric context free grammars

[Liang et al. 2007b, Finkel et al. 2007]. [Johnson et al. 2007] defined adaptor grammars, which is a framework generalizing both

probabilistic context free grammars as well as a variety of nonparametric models including DPs and HDPs. DPs and HDPs have

been used in information retrieval [Cowans 2004], word segmentation [Goldwater et al. 2006b], word morphology modelling

[Goldwater et al. 2006a], coreference resolution [Haghighi and Klein 2007], topic modelling

[Blei et al. 2004, Teh et al. 2006, Li et al. 2007]. An extension of the HDP called the hierarchical Pitman-Yor process has been

applied to language modelling [Teh 2006a, Teh 2006b, Goldwater et al. 2006a].[Savova et al. 2007] used annotated hierarchies to

construct syntactic hierarchies. Theses on nonparametric methods in NLP include [Cowans 2006, Goldwater 2006].

Other Applications. Applications of DPs, HDPs and infinite HMMs in bioinformatics include

[Xing et al. 2004, Xing et al. 2006, Xing et al. 2007, Xing and Sohn 2007a, Xing and Sohn 2007b]. DPs have been applied in

relational learning [Shafto et al. 2006, Kemp et al. 2006, Xu et al. 2006], spike sorting [Wood et al. 2006a, Görür 2007]. The HDP

has been used in a cognitive model of categorization [Griffiths et al. 2007a]. IBPs have been applied to infer hidden causes

[Wood et al. 2006b], in a choice model [Görür et al. 2006], to modelling dyadic data [Meeds et al. 2007], to overlapping clustering

[Heller and Ghahramani 2007], and to matrix factorization [Wood and Griffiths 2006].

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 78 / 90

References I

Aldous, D. (1985). Exchangeability and related topics. In École d'Été de Probabilités de Saint-Flour XIII­1983, pages 1­198. Springer, Berlin.
Antoniak, C. E. (1974). Mixtures of Dirichlet processes with applications to Bayesian nonparametric problems. Annals of Statistics, 2(6):1152­1174.
Beal, M. J., Ghahramani, Z., and Rasmussen, C. E. (2002). The infinite hidden Markov model. In Advances in Neural Information Processing Systems, volume 14.
Blackwell, D. and MacQueen, J. B. (1973). Ferguson distributions via Pólya urn schemes. Annals of Statistics, 1:353­355.
Blei, D., Griffiths, T., Jordan, M., and Tenenbaum, J. (2004). Hierarchical topic models and the nested Chinese restaurant process. In Advances in Neural Information Processing Systems, volume 16.
Blei, D. M. and Jordan, M. I. (2006). Variational inference for Dirichlet process mixtures. Bayesian Analysis, 1(1):121­144.
Caron, F., Davy, M., and Doucet, A. (2007). Generalized Polya urn for time-varying Dirichlet process mixtures. In Proceedings of the Conference on Uncertainty in Artificial Intelligence, volume 23.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 79 / 90

References II

Cowans, P. (2004).
Information retrieval using hierarchical Dirichlet processes. In Proceedings of the Annual International Conference on Research and Development in Information Retrieval, volume 27, pages 564­565.

Cowans, P. (2006).
Probabilistic Document Modelling. PhD thesis, University of Cambridge.

Daume III, H. (2007).
Fast search for Dirichlet process mixture models. In Proceedings of the International Workshop on Artificial Intelligence and Statistics, volume 11.

Ewens, W. J. (1972).
The sampling theory of selectively neutral alleles. Theoretical Population Biology, 3:87­112.

Fearnhead, P. (2004).
Particle filters for mixture models with an unknown number of components. Statistics and Computing, 14:11­21.

Ferguson, T. S. (1973).
A Bayesian analysis of some nonparametric problems. Annals of Statistics, 1(2):209­230.

Finkel, J. R., Grenager, T., and Manning, C. D. (2007).
The infinite tree. In Proceedings of the Annual Meeting of the Association for Computational Linguistics.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 80 / 90

References III

Fox, E. B., Choi, D. S., and Willsky, A. S. (2006).
Nonparametric Bayesian methods for large scale multi-target tracking. In Proceedings of the Asilomar Conference on Signals, Systems, and Computers, volume 40.

Fox, E. B., Sudderth, E. B., Choi, D. S., and Willsky, A. S. (2007a).
Tracking a non-cooperative maneuvering target using hierarchical Dirichlet processes. In Proceedings of the Adaptive Sensor Array Processing Conference.

Fox, E. B., Sudderth, E. B., and Willsky, A. S. (2007b).
Hierarchical Dirichlet processes for tracking maneuvering targets. In Proceedings of the International Conference on Information Fusion.

Goldwater, S. (2006).
Nonparametric Bayesian Models of Lexical Acquisition. PhD thesis, Brown University.

Goldwater, S., Griffiths, T., and Johnson, M. (2006a).
Interpolating between types and tokens by estimating power-law generators. In Advances in Neural Information Processing Systems, volume 18.

Goldwater, S., Griffiths, T. L., and Johnson, M. (2006b).
Contextual dependencies in unsupervised word segmentation. In Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the Association for Computational Linguistics.

Görür, D. (2007).
Nonparametric Bayesian Discrete Latent Variable Models for Unsupervised Learning. PhD thesis, Technischen Universität Berlin.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 81 / 90

References IV

Görür, D., Jäkel, F., and Rasmussen, C. E. (2006).
A choice model with infinitely many latent features. In Proceedings of the International Conference on Machine Learning, volume 23.

Griffin, J. E. (2007).
The Ornstein-Uhlenbeck Dirichlet process and other time-varying processes for Bayesian nonparametric inference. Technical report, Department of Statistics, University of Warwick.

Griffiths, T. L., Canini, K. R., Sanborn, A. N., and Navarro, D. J. (2007a).
Unifying rational models of categorization via the hierarchical Dirichlet process. In Proceedings of the Annual Conference of the Cognitive Science Society, volume 29.

Griffiths, T. L. and Ghahramani, Z. (2006).
Infinite latent feature models and the Indian buffet process. In Advances in Neural Information Processing Systems, volume 18.

Griffiths, T. L., Ghahramani, Z., and Sollich, P. (2007b).
Bayesian nonparametric latent feature models (with discussion and rejoinder). In Bayesian Statistics, volume 8.

Haghighi, A. and Klein, D. (2007).
Unsupervised coreference resolution in a nonparametric Bayesian model. In Proceedings of the Annual Meeting of the Association for Computational Linguistics.

Heller, K. A. and Ghahramani, Z. (2005).
Bayesian hierarchical clustering. In Proceedings of the International Conference on Machine Learning, volume 22.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 82 / 90

References V

Heller, K. A. and Ghahramani, Z. (2007).
A nonparametric Bayesian approach to modeling overlapping clusters. In Proceedings of the International Workshop on Artificial Intelligence and Statistics, volume 11.

Hjort, N. L. (1990).
Nonparametric Bayes estimators based on beta processes in models for life history data. Annals of Statistics, 18(3):1259­1294.

Ishwaran, H. and James, L. F. (2001).
Gibbs sampling methods for stick-breaking priors. Journal of the American Statistical Association, 96(453):161­173.

Jain, S. and Neal, R. M. (2004).
A split-merge Markov chain Monte Carlo procedure for the Dirichlet process mixture model. Technical report, Department of Statistics, University of Toronto.

Johnson, M., Griffiths, T. L., and Goldwater, S. (2007).
Adaptor grammars: A framework for specifying compositional nonparametric Bayesian models. In Advances in Neural Information Processing Systems, volume 19.

Kemp, C., Tenenbaum, J. B., Griffiths, T. L., Yamada, T., and Ueda, N. (2006).
Learning systems of concepts with an infinite relational model. In Proceedings of the AAAI Conference on Artificial Intelligence, volume 21.

Kim, S. (2007).

Learning Hierarchical Probabilistic Models with Random Effects with Applications to Time-series and Image Data.

PhD thesis, Information and Computer Science, University of California at Irvine.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 83 / 90

References VI

Kim, S. and Smyth, P. (2007).
Hierarchical dirichlet processes with random effects. In Advances in Neural Information Processing Systems, volume 19.

Kingman, J. F. C. (1982a).
The coalescent. Stochastic Processes and their Applications, 13:235­248.

Kingman, J. F. C. (1982b).
On the genealogy of large populations. Journal of Applied Probability, 19:27­43. Essays in Statistical Science.

Kivinen, J., Sudderth, E., and Jordan, M. I. (2007).
Image denoising with nonparametric hidden Markov trees. In International Conference on Image Processing.

Kurihara, K., Welling, M., and Vlassis, N. (2007).
Accelerated variational DP mixture models. In Advances in Neural Information Processing Systems, volume 19.

Li, W., Blei, D., and McCallum, A. (2007).
Nonparametric Bayes pachinko allocation. In Proceedings of the Conference on Uncertainty in Artificial Intelligence.

Liang, P., Jordan, M. I., and Taskar, B. (2007a).
A permutation-augmented sampler for Dirichlet process mixture models. In Proceedings of the International Conference on Machine Learning.

Yee Whye Teh (Gatsby)

DP

university-logo August 2007 / MLSS 84 / 90

References VII

Liang, P., Petrov, S., Jordan, M. I., and Klein, D. (2007b).
The infinite PCFG using hierarchical Dirichlet processes. In Proceedings of the Conference on Empirical Methods in Natural Language Processing.

MacEachern, S., Kottas, A., and Gelfand, A. (2001).
Spatial nonparametric Bayesian models. Technical Report 01-10, Institute of Statistics and Decision Sciences, Duke University. http://ftp.isds.duke.edu/WorkingPapers/01-10.html.

Mansingkha, V. K., Roy, D. M., Rifkin, R., and Tenenbaum, J. B. (2007).
AClass: An online algorithm for generative classification. In Proceedings of the International Workshop on Artificial Intelligence and Statistics, volume 11.

Meeds, E., Ghahramani, Z., Neal, R. M., and Roweis, S. T. (2007).
Modeling dyadic data with binary latent factors. In Advances in Neural Information Processing Systems, volume 19.

Minka, T. P. and Ghahramani, Z. (2003).
Expectation propagation for infinite mixtures. Presented at NIPS2003 Workshop on Nonparametric Bayesian Methods and Infinite Models.

Neal, R. M. (1993).
Probabilistic inference using Markov chain Monte Carlo methods. Technical Report CRG-TR-93-1, Department of Computer Science, University of Toronto.

Neal, R. M. (2000).
Markov chain sampling methods for Dirichlet process mixture models. Journal of Computational and Graphical Statistics, 9:249­265.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 85 / 90

References VIII

Neal, R. M. (2001).
Defining priors for distributions using Dirichlet diffusion trees. Technical Report 0104, Department of Statistics, University of Toronto.

Neal, R. M. (2003).
Density modeling and clustering using Dirichlet diffusion trees. In Bayesian Statistics, volume 7, pages 619­629.

Pitman, J. (2002). Combinatorial stochastic processes. Technical Report 621, Department of Statistics, University of California at Berkeley. Lecture notes for St. Flour Summer School.
Porteous, I., Ihler, A., Smyth, P., and Welling, M. (2006). Gibbs sampling for (Coupled) infinite mixture models in the stick-breaking representation. In Proceedings of the Conference on Uncertainty in Artificial Intelligence, volume 22.

Rasmussen, C. E. (2000).
The infinite Gaussian mixture model. In Advances in Neural Information Processing Systems, volume 12.

Rasmussen, C. E. and Ghahramani, Z. (2001).
Occam's razor. In Advances in Neural Information Processing Systems, volume 13.

Rasmussen, C. E. and Ghahramani, Z. (2002).
Infinite mixtures of Gaussian process experts. In Advances in Neural Information Processing Systems, volume 14.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 86 / 90

References IX

Roy, D. M., Kemp, C., Mansinghka, V., and Tenenbaum, J. B. (2007). Learning annotated hierarchies from relational data. In Advances in Neural Information Processing Systems, volume 19.
Savova, V., Roy, D., Schmidt, L., and Tenenbaum, J. B. (2007). Discovering syntactic hierarchies. In Proceedings of the Annual Conference of the Cognitive Science Society, volume 29.
Sethuraman, J. (1994). A constructive definition of Dirichlet priors. Statistica Sinica, 4:639­650.
Shafto, P., Kemp, C., Mansinghka, V., Gordon, M., and Tenenbaum, J. B. (2006). Learning cross-cutting systems of categories. In Proceedings of the Annual Conference of the Cognitive Science Society, volume 28.
Srebro, N. and Roweis, S. (2005). Time-varying topic models using dependent Dirichlet processes. Technical Report UTML-TR-2005-003, Department of Computer Science, University of Toronto.
Sudderth, E., Torralba, A., Freeman, W., and Willsky, A. (2006a). Depth from familiar objects: A hierarchical model for 3D scenes. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition.
Sudderth, E., Torralba, A., Freeman, W., and Willsky, A. (2006b). Describing visual scenes using transformed Dirichlet processes. In Advances in Neural Information Processing Systems, volume 18.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 87 / 90

References X

Sudderth, E., Torralba, A., Freeman, W., and Willsky, A. (2007).
Describing visual scenes using transformed objects and parts. To appear in the International Journal of Computer Vision.

Teh, Y. W. (2006a).
A Bayesian interpretation of interpolated Kneser-Ney. Technical Report TRA2/06, School of Computing, National University of Singapore.

Teh, Y. W. (2006b).
A hierarchical Bayesian language model based on Pitman-Yor processes. In Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the Association for Computational Linguistics, pages 985­992.

Teh, Y. W., Daume III, H., and Roy, D. M. (2008).
Bayesian agglomerative clustering with coalescents. In Advances in Neural Information Processing Systems, volume 20.

Teh, Y. W., Görür, D., and Ghahramani, Z. (2007).
Stick-breaking construction for the Indian buffet process. In Proceedings of the International Conference on Artificial Intelligence and Statistics, volume 11.

Teh, Y. W., Jordan, M. I., Beal, M. J., and Blei, D. M. (2006).
Hierarchical Dirichlet processes. Journal of the American Statistical Association, 101(476):1566­1581.

Thibaux, R. and Jordan, M. I. (2007).
Hierarchical beta processes and the Indian buffet process. In Proceedings of the International Workshop on Artificial Intelligence and Statistics, volume 11.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 88 / 90

References XI

Wood, F., Goldwater, S., and Black, M. J. (2006a). A non-parametric Bayesian approach to spike sorting. In Proceedings of the IEEE Conference on Engineering in Medicine and Biologicial Systems, volume 28.
Wood, F. and Griffiths, T. L. (2006). Particle filtering for nonparametric Bayesian matrix factorization. In Advances in Neural Information Processing Systems, volume 18.
Wood, F., Griffiths, T. L., and Ghahramani, Z. (2006b). A non-parametric Bayesian method for inferring hidden causes. In Proceedings of the Conference on Uncertainty in Artificial Intelligence, volume 22.
Xing, E., Sharan, R., and Jordan, M. (2004). Bayesian haplotype inference via the dirichlet process. In Proceedings of the International Conference on Machine Learning, volume 21.
Xing, E. P., Jordan, M. I., and Roded, R. (2007). Bayesian haplotype inference via the Dirichlet process. Journal of Computational Biology, 14(3):267­284.
Xing, E. P. and Sohn, K. (2007a). Hidden Markov Dirichlet process: Modeling genetic recombination in open ancestral space. Bayesian Analysis, 2(2).
Xing, E. P. and Sohn, K. (2007b). A nonparametric Bayesian approach for haplotype reconstruction from single and multi-population data. Technical Report CMU-MLD 07-107, Carnegie Mellow University.

university-logo

Yee Whye Teh (Gatsby) DP August 2007 / MLSS 89 / 90

References XII
Xing, E. P., Sohn, K., Jordan, M. I., and Teh, Y. W. (2006). Bayesian multi-population haplotype inference via a hierarchical Dirichlet process mixture. In Proceedings of the International Conference on Machine Learning, volume 23. Xu, Z., Tresp, V., Yu, K., and Kriegel, H.-P. (2006). Infinite hidden relational models. In Proceedings of the Conference on Uncertainty in Artificial Intelligence, volume 22.
university-logo Yee Whye Teh (Gatsby) DP August 2007 / MLSS 90 / 90

