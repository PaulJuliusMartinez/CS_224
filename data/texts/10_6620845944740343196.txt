Why Do GPUsGPUs Work So Well 
Work So Well 
Why Do 

for Acceleration of CT?
for Acceleration of CT?

SPIE Electronic Imaging '07 
SPIE Electronic Imaging '07 
Keynote, Computational Imaging V
Keynote, Computational Imaging V

Klaus Mueller   Fang Xu

Klaus Mueller

Computer Science
Center for Visual Computing
Stony Brook University

First: A Big Word of Thanks!
First: A Big Word of Thanks!

… to the millions of computer game                               

enthusiasts worldwide                                 

Who demand an utmost of performance and realism of 

their game engines

And who create a market force for high performance 

computing that beats any federal-funded effort (NSF, 
DOE, NASA, etc.) 

High Performance Computing on 
High Performance Computing on 
the Desktop
the Desktop
PC graphics boards featuring GPUs:

• NVidia FX, ATI Radeon
• available at every computer store for less                      
• set up your PC in less than an hour and play

than $500

the latest board: 

Nvidia GeForce 8800 GTX (G80)

Incredible Growth
Incredible Growth

Performance doubles every 6 months!

• triple of Moore’s law

Performance gap GPU / CPU is growing

• currently 1-2 orders of magnitude is achievable 

(given appropriate programming and problem decomposition)

The Graphics Pipeline
The Graphics Pipeline

Old-style, non-programmable:

stream of
(X,Y,Z,W)

stream of
(R,G,B,A)

textures

The Graphics Pipeline
The Graphics Pipeline

Modern, programmable:

stream of
(X,Y,Z,W)

stream of
(R,G,B,A)

programmable

textures

The Graphics Pipeline
The Graphics Pipeline

From a computational view:

stream of 
control
primitives

4-tuples

stream of
4-tuples

data (4-tuples)

programmable

textures

GPU Vital Specs
GPU Vital Specs

Codename
Release date
Transistors
Clock speed
Processors

GeForce 7900 GTX 

GeForce 8800 GTX

G71

3/2006

278 M (90nm)

650 MHz

G80

11/2006

681 M (90nm)

1350 MHz

24+8 (pixel/vertex)

128 (unified)

Peak pixel fill rate

Pk memory bandwidth

10.4 Gigapixels/s
51.2 GB/s (256 bit)

36.8 Gigapixels/s
86.4 GB/s (384 bit)

Memory

512 MB

768 MB

Peak performance

250 Gigaflops

520 Gigaflops

GPU Block Diagram
GPU Block Diagram

high chip real 
estate for 
computing 
(compare 6.5% 
in Iridium CPU) 

128 processors 
arranged into 8 
blocks
local cache

shared 
memory

Stream Processing
Stream Processing

GPUs are stream processors [Kapasi ‘03]

(with some restrictions) [Venkatasubramanian ‘03]

input data stream

Stream register file

lower bandwidth

output data stream

kernel
SIMD

stream

kernel
SIMD

stream

kernel
SIMD

high bandwidth

high bandwidth

Local register file

Local register file

Local register file

Reconstruction Algorithms: 
Reconstruction Algorithms: 
Decomposition into Kernels
Decomposition into Kernels

P p
:  
i

=

FBP

3

N

−
1

∑

=

0

j

(

⋅

v w
j
ij

)

               

B v
:  

=

j

(

)

⋅

p w
i
ij

M

ϕ−
1

∑

=

0

i

=

v

j

∑

∈
p P
i
set

p w
i
ij

_

fdk

=

B S
( )

∑

∈
p P
i
set

S: scanner projections
I: identity projection/volume

⎛
λ
⎜
⎝

∑

∈
p P
i

⎛
⎜
⎜
⎜
ϕ
⎜
⎜
⎝

= +

v

j

−

p
i

⋅

v w
l
il

3

N

−
1

∑

=
l
0
−
1

3

N

l

=
0

∑
∑

∈
p P
ϕ
i

w
il

w
ij

⎞
⎟
⎠

⎞
⎟
⎟
⎟
⎟
⎟
⎠

w
ij

λ
B
(

−
S P V
( )
P I
( )
B I
( )

)

= +

v

j

Algebraic

v

j

OS-EM

=

v

j

j

v
∑

∈
p P
i
set

⎛
⎜
⎜
⎜
⎜
⎝

w
ij

∑

∈
p P
i
set

⎛
⎜
⎜
⎜
⎜
⎝

p
i
v w
l
il

⋅

w
ij

⎞
⎟
⎟
⎟
⎟
⎠

=

⎞
⎟
⎟
⎟
⎟
⎠

N

−
3 1

∑

=

0

l

v
j
B I
( )

∑

∈
p P
i
set

⎛
⎜
⎝

∑

∈
p P
i
set

B

(

S
P V
(

)

)

⎞
⎟
⎠

Kernel--Centric Reconstruction
Centric Reconstruction
Kernel

Algebraic
Algebraic

EMEM

FBPFBP

B

U

P

C

B

U

P

C

B

U

kernel

Projection

P
B Backprojection
C Correction
U

Update

Kernel--Centric Reconstruction
Centric Reconstruction
Kernel

Algebraic
Algebraic

EMEM

P

C

B

U

P

C

B

U

compute intensive kernel

FBPFBP

B

U

Projection

P
B Backprojection
C Correction
U

Update

BackBack--Projection Mapping Via 
Projection Mapping Via 
Transformation Matrix
Transformation Matrix

0 0 0
w
2
0
0 0
h
2
0 0 1 0
0 0 0 1

⎡
⎢
⎢
⎢
⎢
⎢
⎣

⎤
⎥
⎥
⎥
⎥
⎥
⎦

1 0 0 1.0
0 1 0 1.0
0 0 1 1.0
1
0 0 0

⎡
⎢
⎢
⎢
⎢
⎣

⎤
⎥
⎥
⎥
⎥
⎦

n
2
w
0
0
0

⎡
⎢
⎢
⎢
⎢
⎢
⎣

0
n
2
h
0
0

0
0
+
f n
−
n f
−
1

0
0
fn
2
−
n f
0

⎤
⎥
⎥
⎥
⎥
⎥
⎦

u
⎡
x
⎢
v
⎢
x
n
⎢
x
⎢
0
⎣

u
y
v
y
n
y
0

u
z
v
z
n
z
0

(cid:75) (cid:75)
− ⋅
u s
⎤
(cid:75) (cid:75)
⎥
− ⋅
v s
⎥
(cid:75) (cid:75)
− ⋅
n s
⎥
⎥
1
⎦

x
v
y
v
z
v
1

⎡
⎢
⎢
⎢
⎢
⎣

⎤
⎥
⎥
⎥
⎥
⎦

Yϕ
Yϕ

xϕ
xϕ

Yv
Yv

Zϕ
Zϕ

r
r

Zv
Zv

Xv
Xv

d
d

D
D

Ys
Ys

S
S

Zs
Zs
Xs
Xs

Implementation Via Parallel 
Implementation Via Parallel 
Fragment Processing
Fragment Processing

detector

screen

source

slice

interpolation

Graphics Pipeline Revisited
Graphics Pipeline Revisited

Geometry Stage

Vertex 
Shader

Polygon

Rasterization

Fragment Stage

Fragment 
Shader

Vertices
Vertices

Primitive Assembly
Primitive Assembly

Fragments
Fragments

Pixels
Pixels

CPU-GPU boundary

Textures
Textures

Vertices Array
Vertices Array

Input Array
Input Array

Image Array
Image Array

One pass

Pipeline 1: The GPU as a Programmable 
Pipeline 1: The GPU as a Programmable 
MultiMulti--Processor (MP

Processor (MP--GPU)GPU)

Geometry Stage

Fragments
Fragments

Vertices
Vertices

Fragment Stage
Fragment Shader

• Transformation
• Perspective divide
• Sample, weight
• Accumulate

…

…

Projection textures
Projection textures

Matrices
Matrices

Fragments contain the (x,y,z) voxel coordinates

Implementation Via Parallel 
Implementation Via Parallel 
Fragment Processing
Fragment Processing

detector

screen

source

slice

interpolation

Pipeline 2: The GPU as a Programmable 
Pipeline 2: The GPU as a Programmable 
Graphics Processor (AG--GPU)GPU)
Graphics Processor (AG

Geometry Stage

Vertex Shader

• Transformation

Fragment Stage

Fragment Shader
• Perspective divide
• Sample, weight
• Accumulate

Registers

Fragments
Fragments

Vertices
Vertices

…

…

Matrices
Matrices

Projection textures
Projection textures

Fragments contain the (u,v) detector space coordinates

Graphics Pipeline Benefits
Graphics Pipeline Benefits

Graphics-aware pipeline (AG-GPU) is considerably faster 

(~3×) than MP-GPU
• graphics facilities are hardwired!

There are further features that have their origins in 

graphics and come with GPUs:
• early fragment kill (cid:198) eliminate fragments based on some 
condition before they even enter the fragment processor

• hardwired 32-bit floating-point precision linear interpolations, 
matrix and vector arithmetic (+, -, *), frame-buffer blending 
and compositing

• RGBA parallelism 

see Xu/Mueller, Physics Medicine & Biology, vol. 52, pp. 3405–3419, 2007

RGBA Parallelism
RGBA Parallelism

Exploit geometric mapping parallelism

Volume packing

• adjacent 4 volume slices (cid:206) RGBA

Projection packing

• symmetry in projection layout
• requires all projections beforehand

Example: 
Example: 
Feldkamp ConeCone--Beam Reconstruction
Beam Reconstruction
Feldkamp

360 projections (10242, general position), 5123 volume

CPU

GPU

.

c
e
s

160
140
120
100
80
60
40
20
0

tumor profiles

135

24.8

8.9

6.8

CPU

MP-
GPU

AG-
GPU

AG-
GPU+

performance

Expressed in Projections/Sec.
Expressed in Projections/Sec.

360 projections, 5123 volume

.
c
e
s
/
s
n
o

j

i
t
c
e
o
r
P

60
50
40
30
20
10
0

2.6

CPU

52.5

40.4

14.5

MP-
GPU

AG-
GPU

AG-
GPU+

performance in projections/s

Original

GPU-recon

GPU Enables Streaming CT
GPU Enables Streaming CT

Real-time reconstruction at clinical rates

• reconstruct (consume) incoming (produced) projections without 

buffering 

GPU Enables Visual CT
GPU Enables Visual CT

High reconstruction frame rate enables injection of 

occasional volume rendering step

Also enables D2VR: real-time volume visualization directly 

from projection data

see Xu/Mueller, Proc. Volume Graphics Workshop, pp. 23-30, 2006

Extensions
Extensions

GPUs can not only be used to accelerate straight 

projection and back projection

They also allow more complex effects to be modeled 

• can use relatively simple fragment programs for scatter and 
• but we have recently also implemented more complex scattering 

attenuation modeling

models using lattice-based Monte-Carlo techniques

Qiu et al, Trans. Vis. Comp. Graph, 2007

RapidCT Reconstruction Cockpit 
Reconstruction Cockpit 
RapidCT

Edit/tune on the fly:

• parameters
• projection sets
• algorithms

Couple with 2D/3D visualizations

RapidCT Reconstruction Cockpit 
Reconstruction Cockpit 
RapidCT

One More Example:
One More Example:
Algebraic Reconstruction of TEM Data
Algebraic Reconstruction of TEM Data

GPUs enable iterative reconstruction from large data in 

Transmission Electron Microscopy (TEM)
• 70 10242 parallel-beam projections, 130° tilt angle, 
• reconstructed with SIRT at 50 iterations into a 10243 volume
• uses RGBA parallelism and sinogram-centric fragment generation  

s
e
t
u
n
m

i

3500

3000

2500

2000

1500

1000

500

0

2880

CPU

36

GPU

chromatin

tobacco mosaic virus

performance

Questions?
Questions?

Funding by NIH, NSF, Keck Foundation

