Lecture Notes in Computer Science
Edited by G. Goos and J. Hartmanis
105
D.W. Davies E. Holler E.D.Jensen S. R. Kimbleton B. W. Lampson G. LeLann K. J. Thurber R. W. Watson
Distributed Systems Architecture and Implementation
An Advanced Course
FBMathematikTUD 58312924
Edited by B. W. Lampson, M. Paul, and H. J. Siegert
Fachbereich MathematlK
Techniscbe Koc.occhu.'e Darmstadt Bib'iothek
.nv.-Nr.g 48 SO4
Springer-Verlag Berlin Heidelberg New York 1981

Contents

1. Motivations, objectives and characterization of distributed systems Gerard LeLann, INRIA Projet Pilote Sirius

1.1. Motivations

1.1.1. Technological changes

1.1.1.1. Microelectronics technology

1.1.1.2. Interconnection and communication technology

° 1.1.2. User needs

1.2. Objectives

1.2.1. Increased performance

1.2.2. Extensibility

1.2.3. Increased availability

1.2.4. Resource sharing

...

1.2.5. Comments

1.3. Characterization

1.3.1. What is distributed?

1.3.2. What is new?

·.

2. Distributed system architecture model

:...'.

Richard W. Watson, University of California Lawrence Livermore Laboratory1

2.1. Introduction

2.2. Layers and interfaces

2.3. . Abstract objects as a unifying concept

2.4. The model layers

2.4.1. Introduction

2.4.2. Need for a distributed operating system

2.4.3. Application layer

2.4.4. Distributed operating system service layer

2.4.5. The interprocess communication layer

2.4.6. Hardware/firmware Components

2.5. Issues common to all layers

2.5.1. Introduction

-- 2.5.2. Identifiers (naming)

2.5.3. Error control

;

2.5.4. Resource management

2.5.5. Synchronization

2.5.6. Protection

.'..

2.5.7. Object representation, encoding, translation

2.5.8. Testing, debugging, and measurement

.

;

2.6. Global implementation and optimization issues

2.7. Conclusions

1
1
1 1 1 2
3
.4 .4 5 .5 5
6
6 8
10
10 12 15 17
17 18 19 21 26 31
32
32 32 33 35 37 37 39 ..42
42
43

VI CONTENTS

3. Interprocess communication layer: Introduction

Kenneth J. Thurber, Sperry Univac

3.1. Introduction

3.2. Transmission medium

3.3. 3.4. 3.5. 3.6. 3.7. 3.8. 3.9. 3.10. 3.11. 3.12.

Hardware paths

links

Intervenors

Protocols

Protocol properties

,:

Interconnection structure

Multiplexing

Arbitration

Computer networks versus distributed computers

Summary

44
44 44 45 46 47 47 50 ..-. 51 54 54 54 56

^4. Hardware interconnection technology

Kenneth J. Thurber, Sperry Univac

4.1. Introduction

4.2. 4.3. 4.4. 4.5. 4.6. 4.7. 4.8. 4.9. 4.10. 4.11. 4.12.

Topologies

Point-to-point

Multi-point

Taxonomies

Distributed system interfaces

Path allocation

Bandwidth/throughput tradeoffs

More on protocols

Buffers

1

Case studies

More on networks versus distributed computers

4.13. Summary

57
57 57 57 57 59 63 66 79 79 83 83 83 83

5. Link level Gerard LeLann, INRIA Projet Pilote Sirius
5.1 Introduction 5.2 HDLC
5.2.1 Frame structure 5.2.2 HDLC elements of procedure 5.3 The Arpanet IMP-IMP protocol 5.4 The Cyclades MV8 protocol

86
86 87 JS7 88 90 92

6. Hierarchy

94

Donald W. Davies, Computing Technology Unit, National Physical Laboratory (6.1-6.5) Richard W. Watson, University of California Lawrence Livermore Laboratoryl (6.6-6.8)

6.1. Introduction 6.1.1. The problems of a hierarchy
6.2. Arpanet as an example 6.3. Addressing, routing and congestion in large mesh networks

94 97 102 104

CONTENTS

VU

6.4. Topology optimization

6.5. Packet versus circuit switching

6.6. Datagrams and virtual circuits

6.6.1. 6.6.2. 6.6.3.

Datagrams Virtual circuits Datagrams vs virtual circuits

6.7. Network interfaces

'.

6.7.1. Introduction

6.7.2. The pseudo device interface strategy

6.7.3. Importance of symmetry

6.7.4. Need for error checking at all levels

6.7.5. Flow and congestion control

6.7.6. Full duplex interface

6.7.7. Datagram versus virtual circuit interfaces

6.7.8. Xerox PUP as an example datagram interface and service

6.7.9. X.25 as an example vc interface

6.7.10. Implications of X.25 for distributed systems

6.7.11. Network

frontends

6.8. Distributed systems and internetwork design issues 6.8.1. Introduction 6.8.2. Levels of network interconnection 6.8.3. Conclusions

107
108
109 110 112 115
118 118 119 120 120 120 121 121 121 121 124 127
129 129 129 J.38

7. IPC interface and end-to-end protocols

140

Richard W. Watson, University of California Lawrence Livermore Laboratory1

7.1. Introduction

7.2. IPC service 7.2.1. Desired IPC characteristics 7.2.2. The IPC interface

..<.

7.3. Example IPC service model

'.

7.4. Underlying IPC environment

7.5. Services required by an EEP of the next lower level

7.6. Levels of end-to-end services

7.7. · Origin, destination identifiers

7.8. EEP data objects and data stream synchronization marks

7.9. Error control and EEP state synchronization

7.9.1. Introduction 7.9.2. Error types and implications 7.9.3. Need for end-to-end error assurance

7.9.4. 7.9.5. 7.9.6. 7.9.7. 7.9.8.

Error control mechanisms used while a connection exists Connection management Comparison of three-way-handshake and timer approaches Bounding maximum-packet-lifetime Reliable control information

7.10. Protection

140
141 141 141 145
147 149
149
151
152
153 153 154 156 156 161 166 167 168
169

7.11.

Resource management 7.11.1. Introduction 7.11.2. Identifier space 7.11.3. Segmentation and reassembly 7.11.4. Flow control 7.11.5. Priority

·. :

169 169 169 169 171 .173

Vlll CONTENTS

7.12. Measurement and diagnostics 7.13. Conclusions

173 174

8. Distributed control

175

E. Douglas Jensen, Computer Science Department, Carnegie-Mellon University

8.1. Abstract 8.2. Introduction 8.3. The control space 8.4. Communication and the decentralization of control 8.5. Acknowledgement

175 175 178 187 190

9. Identifiers (naming) in distributed systems Richard W. Watson, University of California Lawrence Livermore Laboratoryl

191

9.1. Introduction

191

9.2. Identifier goals and implications ^ 9.3. Unique machine-oriented identifiers
9.4. Human-oriented names 9.5. Addresses and routing 9.6. Conclusion

195 197 203 206 210

10. Protection Donald W. Davies, Computing Technology Unit, National Physical Laboratory

10.1. 10.2.
10.3. 10.4.
10.5.

Basic protection needs

10.1.1. Protection in distributed systems

Single key cryptography and the Data Encryption Standard

10.2.1. Measuring the strength of a cipher system

10.2.2. The data encryption standard

10.2.3. Block and stream ciphers...;

10.2.4. Block chaining :

Application of a cipher system at different levels in the hierarchy

10.3.1. Key distribution

Public key cipher systems

10.4.1. The discrete exponential function

10.4.2. The power function and its use in cryptography

10.4.3. The public key cipher of Rivest, Shamir and Adleman

10.4.4. The need for a digital signature

10.4.5. The registry of public keys

10.4.6. Other public key ciphers and signatures

Access control

:.

10.5.1. The access matrix

10.5.2. The access control list

;

10.5.3. Capabilities

10.5.4. Access control lists combined with capabilities

10.5.5. A simplified model for changing access 10.5.6. Capabilities in a distributed system 10.5.7. The location of access control in a distributed system

rights

211
211
212
214 -
215 216 218 .219
220
.222
224
226 228 228 230 .-.233 234
235
.235 ..236 211 237 237 24Q 242

CONTENTS

IX

11. Atomic transactions Butler W. Lampson, Xerox Palo Alto Research Center 2
11.1. Introduction 11.2. System overview 11.3. Consistency and transactions 11.4. The physical system
11.4.1. Disk storage 11.4.2. Processors and crashes . 11.4.3. Communication 11.4.4. Simple, compound and restartable actions
11.5. The stable system
11.5.1. Stable storage 11.5.2. Stable processors 11.5.3. Remote procedures
11.6. Stable sets and compound actions
11.6.1. Stable sets 11.6.2. Compound atomic actions
° 11.7. Transactions 11.8. Refinements
11.8.1. File representation 11.8.2. Ordering of actions 11.8.3. Aborts

.-.

246
246 247 248 249
250 251 252 253
254
254 256 257
257
.258 259
260 263
263 264 264

12. Synchronization., Gerard LeLann, INRIA Projet Pilote Sirius

12.1. Introduction 12.2. Consistency and atomicity 12.3. Event ordering and atomicity
12.3.1. Partial and total orderings

.:.

12.3.2. Atomic operations
12.4. Synchronization 12.5. Synchronization and types of computing systems
.12.5.1. Fully replicated computing 12.5.2. Strictly partitioned computing 12.5.3. Partitioned and partially replicated computing
12.6. Event ordering--examples
12.6.1. Link protocols 12.6.2. Executives 12.6.3. Database system nucleus
12.7. Synchronization mechanisms for distributed systems
12.7.1. Centralized versus decentralized synchronization 12.7.2. Centralized mechanisms 12.7.3. Decentralized mechanisms
12.8. Evaluation criteria

266
266 266 267
267 268
268 270
270 270 271
271
272 272 272
273
273 274 276
282

13. Multiple copy update

284

Elmar Holler, Instiiutfu'r Datenverarbeitung, Kernforschungszentrum Karlsruhe

13.1. Introduction

..;

13.2. Basic architecture of multiple copy update mechanisms

13.3. Solutions to the multiple copy update problem

284 286 289

X CONTENTS

D.4. 13.5.

13.3.1. Voting solutions 13.3.2. Non voting solutions
Verification of solutions Evaluation of solutions

291 : 300
302 303

14. Applications and protocols
Stephen R. Kimbleton and Pearl Wang, National Bureau of Standards 3 (14.1-14.6)
Butler W. Lampson, Xerox Palo Alto Research Center (14.7-14.9)

308

14.1. 14.2.
14.3.
14.4.
14.5. 14.6. 14.7. 14.8.

Introduction 14.1.1. Supporting program access to data

14.1.2. Distributed applications

Database management systems (DBMSs)

14.2.1. The need for DBMSs

14.2.2. DBMS differences

14.2.3. Datamodels

;

14.2.3.1. The relational data model

14.2.3.2. The hierarchical data model 14.2.3.3. The Codasyl data model

14.2.4. Data manipulation languages

Network virtual data managers

14.3.1. NVDM desirability and structure

14.3.2. Constructing the network-wide view of data

14.3.3. Data integrity

14.3.3.1. Controlling access 14.3.3.2. Maintaining meaning

14.3.3.3. Simplifying specification

14.3.4. XNDM - An Experimental Network Data Manager

Translation technology

14.4.1. Nature of the translation function

14.4.2. Translation alternatives

:

14.4.3. The query translation process--an informal description

14.4.4. A taxonomy of major translation issues

14.4.5. Implementation approach

14.4.6. XNQL translator specifics

Data transfer protocols (DTPs)

14.5.1. DTP services 14.5.2. Data and its translation/transformation

14.5.3. Implementing a data translator/transformer

14.5.4. A data transfer protocol

An example-the NBS experimental network operating system

14.6.1. XNOS overview

14.6.2. Supporting uniform system-system interactions

Parameter and data representation

14.7.1. Types

14.7.2. Binding

14.7.3. Encoding :

14.7.4. Conversion

:

Debugging, testing and measurement

14.8.1. A remote debugger

14.8.2. Monitoring communication

14.8.3. Eventlogs

.:

.7. ;.

308 309 .309
310 310 311 311 311 313 314 316
318 320 322 325 326 327 328 328
330 331 333 334 336 338 339
343 344 346 347 350
352 352
353
357 358 359 360 361
361 363 364 365

14.9. Remote procedure calls

:

365

CONTENTS

14.9.1. The no-crash case 14.9.2. The crash case

15. Error recovery
Gerard LeLann, INRIA Projet Pilote Sinus

15.1. 15.2. 15.3. 15.4. 15.5.

Introduction

Basic concepts and definitions

Error recovery

The Tandem/16 computing system

Sirius-Delta

'.

15.5.1. Transaction commitment

15.5.2. Recovering from failures

15.5.3. Unrecoverable faults and failures

16. Hardware issues
Kenneth J. Thurber, Sperry Univac 4

·'=> 16.1. Introduction

16.2. Design issues

16.3. Executive control functions

16.3.1. Approach

'....

16.3.2. Hardware concept

16.3.3. Implicit primitives

16.3.4. Explicit primitives

16.4. Functionally Distributed Architectures (FDA)

16.5. Control overhead

16.6. Virtual Machines (VM) and Virtual Machine Monitors (VMM)

16.7. Local networks

.".

16.7.1. Introduction

:

16.7.2. Application embedded hardware

16.7.3. Tum key systems

i

16.7.4. Subsystem building blocks

16.7.5. Components/modules 16.7.6. Chips 16.7.7. Hardware overview

:

16.7.8. Network Systems Corporation HYPERchannel

16.8. Further issues

16.9. Conclusion

17. Hardware/software relationships in distributed systems

E. Douglas Jensen, Computer Science Department, Carnegie-Mellon University

17.1. Introduction

17.2. 17.3. 17.4.

Assigning functionality to layers

i

The implementation of functions within layers

Hardware/software relationships in distributed computer systems

17.4.1. Bus bandwidth

17.4.2. Bus medium

17.4.3. Broadcasts

17.4.4. Acknowledgment deferral

17.4.5. Transmission addressing

17.4.6. Communication support

Xi
366 368
371
371 371 372 373 374 374 375 376
377
377 378 378 378 382 390 391 395 396 399 405 .405 405 .406 .406 .406 .406 .407 408
411 411
413
413 413 415 416 .417 .417 .418 418 .419 .419

xii CONTENTS

17.4.7. Bit/word/transmission synchronization
17.5. Conclusion

18. The National Software Works (NSW)
ElmarHoller, InstitutfurDatenverarbeitung, Kernforschungszentrum Karlsruhe5

18.1. 18.2. 18.3.
18.4. 18.5.

Introduction
System architecture
NSW components 18.3.1. MSG: The NSW interprocess communication facility 18.3.2. Front end: The NSW user interface 18.3.3. Foreman: providing the tool execution environment 18.3.4. File Package: Thefilehandling facility for NSW 18.3.5. Works Manager: The NSW monitor
The NSW reliability concept DAD: A debugging tool for debugging NSW

,

420
420
421
421 422 425 426 431 433 437 .439 441 442

19. Ethernet, Pup and Violet
Butler W. Lampson, Xerox Palo Alto Research Center 6

19.1. 19.2.
19.3. 19.4.

The Alto and the Ethernet 19.1.1. Implementation

The Pup internetwork 19.2.1. Introduction 19.2.2. Design principles and issues
19.2.2.1. The basic model: networks connected with gateways 19.2.2.2. Simplicity 19.2.2.3. Datagrams versus virtual circuits 19.2.2.4. Individual networks as packet transport mechanisms

19.2.2.5. Internetwork gateways

19.2.2.6. A layered hierarchy of protocols

:

192.2.7. Naming, addressing, and routing

19.2.2.8. Flow control and congestion control

19.2.2.9. Reliable transport

19.2.2.10 Packet fragmentation

19.2.3. Implementation

19.2.3.1. Level 0: Packet transport

19.2.3.2. Level 1: Internetwork datagrams

19.2.3.3. Level 2: Interprocess communication

-

'. ;

19.2.3.4. Level 3: Application protocols

The distributed file system

19.3.1. Introduction

19.3.2. Access mechanics

19.3.3. Client responsibilities

193.3.1. Server crashes and aborted transactions

19.3.3.2 Local caches of shared data

19.3.3.3. Directories

19.3.4. Summary

'.

Violet: A distributed, replicated calendar system

19.4.1. Introduction

19.4.2. Environment

'.

19.4.3. System architecture ~.!

19.4.4. Replicated data 19.4.5. Sharing and locking

:.

19.4.6. The performance of the architecture

446
446 .449 450 .450 450 451 451 .'. 451 452 452 452 454 455 .456 457 .457 457 460 464 465
: 465 .465 467 469 469 :...470 .472 .473
...:. 473 .473 .474 .475 .479 481 482

19.4.7. Implementation notes 19.4.8. Conclusion
20. Conclusion Kenneth J. Thurber, Sperry Univac 20.1. Introduction 20.2. What we have defined.. 20.3. What we think we know 20.4. What we conjecture 20.5. What we think we don't know 20.6. What we advise 20.7. What you should know 2018. What we don't agree upon 20.9. Acknowledgements
References
Index

CONTENTS

XU1
.483 .484
486
486 487 487 489 489 490 491 492 492
493
507

