A relational approach makes this experimental data base management system unusually easy to install and use. Some of the decisions made in System R design in order to enhance usability
also offer major bonuses in other areas.

-System R:
A Relational Data Base Management System
M. M. Astrahan, M. W. Blasgen, D. D. Chamberlin, J. N. Gray, W. F. King,
B. G. Lindsay, R. A. Lorie, J. W. Mehl, T. G. Price, G. R. Putzolu, M. Schkolnick, P. P. Selinger, D. R. Slutz, H. R. Strong,
P. Tiberio, I. L. Traiger, B. W. Wade, R. A. Yost
IBM San Jose Research Laboratory

Perhaps the greatest impediments to the use of a
computerized data base management system are installation cost and complexity. At present, installation of these systems requires a staff skilled in telecommunitations, operating systems, data management and in applications. In response, our lab designed and implemented System R-an experimental data base management system allowing easy definition of data bases and data base applications without sacrificing the function and performance available in most commercial systems. Among its capabilities, the system provides a sophisticated authorization facility, and automatically handles system functions such as recovery and concurrency control. System R adopts a relational data model and supports a language called SQL for defining, ac-
cessing, and modifying various views of the data
base.
The relational data model All data base management systems represent
data in the form of records. Records, the basic unit

of storage, contain fields, which hold values. Each record represents some fact about the world. A telephone record, for example, has three fields: name, address, and telephone number. Each realworld instance of the record assigns a value to each field.
Data base management systems differ in the way they organize records. System R organizes data into tables-sequences of identically formatted records. Train schedules, price lists, tide tables, and phone books all fit this model.
A relational model was adopted because it is easy to understand and to explain and because it lends itself to powerful relational operators (such as sort, join, project, and select).2 By relational model, we mean an organization which collects data into just such uniform tables as those discussed above, and which allows a user to access data without having to specify the physical organization of the tables. Figure 1 shows a fragment of a relational data base; the various attributes-name, office, job, salarydefine a relation. Each record (row), therefore, is an instance of that relation.
Relations are combined and manipulated by various relational operators. Each operator produces

42

0018-9162!79/0500-0042$00.75 e 1979 IEEE

COM PUTER

another relation as a result. Operators apply to en-
tire relations, thereby reducing the use of constructs such as "for each record do." Operators include the following: select choses a row subset of a table based on a predicate; project removes columns of a relation; join combines two or more relations to produce a new relation; order sorts a relation by a collection of attributes; group by aggregates records by some attribute; Boolean operators provide union and intersection of relations; and aggregate operators such as sum, mi, and max collect all instances of a field into a single value.
By contrast, other systems present a hierarchical or network data model.3 In general, one must navigate through a network or hierarchy. For example, to find recent invoices of a customer, we locate the customer account record and then locate the invoice records under that customer. By contrast, a nonnavigational approach requests all account records of that customer and relies on the system to locate them. Navigation is not inherent in nonrelational systems, but to date all nonrelational systems have provided a navigational interface.
The three data models have equal power of expression. Besides being easier for the end user to visualize and understand, the tables of a relational DBMS make it somewhat easier to define a nonnavigational language. Further, it appears possible to compile code from a nonnavigational language which rivals the execution efficiency of navigational interfaces.
For these reasons, System R supports only a relational model at the external interface; that is, the user can work in a set-oriented language without describing the pathways taken to reach the data. Since efficient implementation of the relational model and operators seems to require the use of network mechanisms (pointers among related records), System R has full network support internally. However, all this is hidden by the SQL language.
High-level and host language

NAME Smith Jones Clark Kent Davis Jacob

EMPLOYEE

OFFICE

JOB

Paris SALES Bonn ALES Boise SALES

Paris London Rio

SERVICE SERVICE SALES

SALARY 15000 18000 12000 15000 13000 12000

LOCATION San Jose Paris London Bonn

OFFICE MANAGER Blasgen Portal Portal Roever

PHONE 7152 9123 3278 1287

Figure 1. A fragment of a relational data base. All data Is organized Into tables, i.e., Into sequences of records, each of which has the same format. Each row of a table (e.g., see "Jones") is a record describing one instance of a relation.

In many data base systems, data can only be accessed and manipulated by writing a program in a language such as Cobol or PL/I. Such a program contains CALL statements to subroutines performing data base functions. This has several drawbacks:
* It requires the services of a Cobol or PL/I programmer.
* It introduces a long delay between request and result (write the program, compile it, debug it, etc.).
* Using the CALL statement prohibits any compile-time optimization of the data base
services required.

A very high-level data access language (such as SQL) for data definition, manipulation, and control is important for several reasons:

* It is easy to learn and use. * It permits the use of an optimizer to improve
performance. * It provides some independence between the
application programs and the stored data, so that if the data is reorganized, the applications do not have to be rewritten.

SQL is an example of such a language. (A complete definition of that language appears in Astrahan, et al.') For instance, in the sample data base of Figure 1, we could find who does what in the Paris office by writing:

SELECT
FROM WHERE

NAME, JOB EMPLOYEE OFFICE = 'Paris';

The solution to the first two drawbacks is to introduce a query capability, that is, a mechanism supporting ad hoc requests to retrieve or modify information in the data base. For example, System R implements this query capability by providing a host-language interface as an application program called the UFI-user-friendly interface. Thus, data stored in a System R data base can be accessed and updated both through the UFI (by interactively issuing SQL statements) and by application programs written in host languages such as Cobol and PL/I (see Figure 2).
The solution to the performance problems caused
by the third drawback is to extend the host
languages to include the data sublanguage. Cobol and PL/I have been extended to permit SQL statements be imbedded in an application program. The extensions are via preprocessors which accept COBSQL and PLISQL input programs and produce Cobol and PL/I output respectively along with com-

May 1979

43

ment every time it is executed. Compiling an SQL statement captures and preserves information that an interpreter must rediscover on each invocation. Experiments indicate compilation is almost always superior to interpretation, even for SQL statements which are executed only once and which retrieve or modify only a few records (see Figures 4 and 5).
In fact, System R can be thought of as a compiler of data manipulation statements: It compiles statements in the SQL language into machine code; the code issues calls to the access method.
Prior to PL/I compilation, a PLISQL program (such as in Figure 3) is examined by a System R preprocessor which finds the SQL statements. Each SQL statement is passed to the System R parser,
optimizer, and code generator. These produce object code containing calls to a relational access method.
The PLISQL program is then translated into a pure PL/I program containing calls to this object code. As a result, the cost of supporting the high-level language SQL is paid once, at compile time, rather than at run time. If a query is used many times, its one-time cost is amortized over many invocations.
An optimizer determines which access paths to use to evaluate a SQL statement. It is the optimizer's responsibility to develop an optimal "plan" for the evaluation of each statement. This optimal plan minimizes the execution cost in terms of instructions and I/O operations. The plan is then passed to the code generator, which creates a machine language program to carry it out.

Figure 2. These diagrams show two scenarios, one using the ad hoc

interface and the other the programmer interface. In the first scenario,

a In

casual user the second

deals directly with UFI-the User Friendly Interface. scenario, a programmer installs an application pro-

gram; then Jones and Smith use that application.

piled fragments of SQL statements; these fragments are stored in the data base by the preprocessors. An example application program using PLISQL is shown in Figure 3.
The SQL language used in host languages is the same language accepted by the UFI; hence the SQL portion of application programs can be debugged using the UFI. Since the SQL statement is an integral part of the application program (and not a parameter of a CALL), it is possible to perform early binding (compilation) and thus enhance performance.

Compilation
A major criticism of nonprocedural languages is that they are inherently inefficient. If that applied to SQL, System R would be of little interest. Our work, therefore, concentrated on performance as well as on function. To achieve acceptable performance, System R compiles SQL statements into machine code containing calls to low-level accessing routines. The alternative is to interpret each state-

Nonprocedurality and automatic path selection
Nonnavigational data base languages allow data accesses and updates to be expressed without implying either the existence of specific access paths or the physical layout of data. While this makes application programs simpler, it uses the DBMS to choose an optimal strategy for evaluating the program. This system is also relatively flexible. In particular, it is hard to imagine how a system without a high-level language would allow programs to adapt to new storage structures. Using the Figure 1 example, if we wish to determine if manager Portal has a service person in his office, we just query:
SELECT NAME FROM EMPLOYEE, OFFICE WHERE EMPLOYEE.OFFICE
=OFFICE.LOCATION AND OFFICE.MANAGER= 'Portal' AND EMPLOYEE.JOB ='SERVICE';
Since the language specifies only what is desired, and now how to obtain it, the optimizer chooses among several possible plans: One strategy is to search EMPLOYEE looking for service people and, for each service person, use the corresponding OFFICE to enter into the OFFICE table to see if that employee works for Portal. Another strategy might first search OFFICE to find what LOCATIONs Portal manages and then search EMPLOYEE for

44 COMPUTER

service people at those locations. Other strategies involve sorting one or both tables.
When the System R optimizer selects the minimum-cost strategy for carrying out a statement, the cost is based on estimates of CPU and I/O requirements. Using an optimizer in this way has two benefits: First, the user need not be concerned with storage details. Second, the user is prohibited from "taking advantage" of knowledge of such details. The second benefit allows the program to continue functioning as the underlying storage structures evolve with time.

Data independence

Three techniques enhance System R performance: First, the high-level SQL allows global optimization of the query and the consequent generation of efficient code (minimum number of data base calls and I/Os). Second, the system can be tuned by defining or deleting access paths (either associative or pointer-based). Lastly, one can specify that records be clustered together in physical media for fast sequential access. All three techniques are transparent to the application programmer and the decisions can change without altering any programs.
To illustrate the point that System R gives programs some independence from data reorganization as the system is tuned, suppose there are two transactions which must be run periodically against the data base in Figure 1.
(T1) List all employees at a given office. (T2) List all employees with a certain job. These two queries need not consider how or where the records are stored nor specify the access paths for locating the records. The transactions will work correctly no matter how the data is organized. If the users expect to run Ti ninety-nine percent of the time, and T2 one percent of the time, a data base structure which results in high performance will include a fast way to find all employees in a given office, (e.g. an index on the OFFICE field of the EMPLOYEE table), with records of employees at each office clustered together in secondary storage (to minimize I/O). An index is a means of directly addressing records of a relation containing a common value in a particular column, such as EMPLOYEE, where OFFICE='Paris.' Any authorized user can define the necessary index and clustering criterion and have the data reorganized appropriately. The Ti and T2 transactions will then take advantage of this new organization. Suppose, however, that'these estimates are wrong or that the use of the system changes so that T2 runs 99 percent of the time. Performance on the above data base structure will be very poor, and the data base will have to be restructured. Namely, the OFFICE index will be dropped, and a clustering index on JOB created. An essential characteristic of a flexible system is that this restructuring not require
that programs Ti and T2 be rewritten.

Figure 3. A sample PLISQL program illustrates this high-level set.

otarbileen,tewditlhaonugtuadgeetaaiclceedssdiensgcraipntdioonperofatitnhge

on a table, or specifics of

view of a the table

organization.

cFoigmupriele4r.

Data flow
contains a

and summary of SQL statement-parser, an

compiler. optimizer,

The and

a code-generator.

May 1979

45

In general, since System R supports a very highlevel language, most data base structuring issues can be deferred until after the applications are written. This install-now-tune-later philosophy also eases application programming by deferring many performance decisions, such as the choice of indexes.
Incidentally, System R includes a utility program which evaluates a set of transactions and their relative execution frequencies and suggests good data base structurings for the user. This partially automates the data base design task. Integrated data dictionary
A data dictionary is a description of the data base. It contains both machine-readable and humanreadable descriptions of the data base tables, their attributes, interrelationships, and meaning. It is usually not very large, but it has a very rich structure.
Most systems have a data dictionary facility which stores metadata about the data base aside from the data base itself. The data dictionary is often built on top of the DBMS as a special application with a special data definition language. This approach allows the data dictionary to benefit from the facilities of the DBMS.
Separating the data dictionary from the data base raises two problems: -First, the dictionary and data base may disagree with one another unless one interface has control of both functions. Second, having a separate data dictionary implies having a separate language for the definition and manipulation of the dictionary data base.
SQL is an integrated data definition and data manipulation language. In System R, the description of the data base is stored in user-visible system tables which can be read and altered using the SQL language. The creation of a table or an access path results in new entries in these system tables. Users who define tables and other objects are encouraged to include English text to describe the meanings of the objects. Later, other users can retrieve all tables with certain attributes or can browse among the
C 0 S T
"SIZE" OF QUERY Figure 5. A comparison of interpretation, compilation, and precompilation shows the decided advantage of amortizing costs of screening and precompiling SQL statements, especially when a query will be used many times.

descriptions of defined tables (if they are so authorized). A user can modify these entries to change the attributes of an object. This approach eliminates the dual language problem and assures that the dictionary agrees with the actual system.
Views and authorization
The result of any SQL query is itself a table. A user can display such a table immediately, or store the definition of the table as a view. Views can be used just like other tables, except that some views can not be modified (will not support insert, delete, or update).
Views provide data independence. If the structure of a table is changed (columns added or permuted or a table split into two tables), the user can define a view which looks like the original table. Old programs can access the new data via the view.
Views also provide a powerful authorization mechanism. Rather than allowing access to an entire table, we can define a view which is a row and column subset of the table and only allow access to that view. For example one view might allow a manager to see records in his own department only. Further, certain fields of the view might be available for read only. This gives value-dependent authorization at a very detailed level.
Views, in combination with granting and revocation operations, provide the basis for the authorization mechanism. System R maintains special tables containing the definition of each view and the operations which selected users may perform on that view. In order to allow either centralized or distributed control of access, a special privilege called grant is included. Grant allows one user to grant any subset of capabilities to other users, who can pass on the grant as well. The compilation process checks these authorization constraints (at some cost), but this cost is paid only once, at compile time. If the query is invoked many times, a simple test at each invocation ensures that the decision is still valid. This powerful authorization system thus incurs almost no run-time overhead for compiled transactions.
In System R, there is no centralized DBA-data base administrator-function. Rather, each user group can have its own DBA to create and authorize access to that group's data. This provides a common data base shared among all users (an integrated data base) and yet allows some autonomy among the user groups.
Further, authorized users can perform almost all DBA functions at any time without interrupting the normal operation of the system. Authorized users can
* create and destroy tables, * create and destroy indexes on tables, * add a column to an existing table, * install a new transaction, * add users to the system, * change the privileges held by various users, and * define or drop a view of existing data.

46 COMPUTER

Since SQL supports these operations, they may be invoked from a terminal (via UFI) or from a program.

Installation and tuning

The installation procedure for System R consists of acquiring storage space for the code and data of a starter system, which contains a small data base (relating to employees of a hypothetical company). Once this starter system is up and running, it enables users to experiment with a working version of System R in their own environment. When they have familiarized themselves with the starter system, they can begin to define their owni data
bases and. transactions; this can be done in an in-
cremental and experimental manner. Users can quickly define and use new data bases because the system permits them to defer many data base specification problems.
After an application is coded and running, the user can tune the system with a program which, for a set of SQL statements and their probabilities of occurrence, evaluates possible data base specifications and tells the user the best ones. A proposed data base specification consists of a clustering criterion for each table and a set of indices to. be maintained on each table. The program also estimates the cost of evaluating each SQL statement and the weighted cost of the application.

Figure 6. This illustrates the three possible transaction outcomes; the transaction commits, aborts, or is aborted by the system. A transaction is a unit of recovery; it commits all outputs, or aborts and has no effect. A transaction is also a unit of consistency; it starts with consistent inputs and produces consistent outputs.

Figure 7. Five transaction types with respect to the most

recent T3 will

checkpoint and the be redone while T4

crash point. and T5 will

At be

restart, T2 and undone. Since

Ti ended before the checkpoint, its outputs already ap-

pear in the checkpoint.

Transaction management A major goal of System R is to provide a full set of
capabilities for data base management in a realistic, operational environment. Only in this way can we assess the viability of the architecture. In System R, multiple users can concurrently access data, and the system has complete facilities for transaction backout and system recovery. Recovery compensates for system failures as well as catastrophic failures of the magnetic media (e.g. a disk-head crash). We tried to avoid the need for human intervention in system recovery. In particular, recovery requires no explicit operator commands; only media recovery requires handling magnetic tapes. Almost all recovery information is kept on disk and a noncatastrophic restart does not involve operations personnel.
The transaction concept is the key to a successful recovery philosophy. A complex update of the data base involves many SQL statements. If a complex update fails or if the system crashes during the operation, the state of the data base will probably be confused. The system must be able to undo partially completed transactions. System R does this by keeping a log of all the changes a transact,ion has made. For example, it keeps the old and new value of each updated record. If the transaction gets into trouble, the system can undo the transaction by setting updated records to the old values still in the log. Transactions may be undone, by either a

system or an explicit user request. Once a transac-

tion commits its updates, they will never be undone.

Committed updates are redundantly stored in the

log so that they can be reapplied in case of system or

media failures (see Figure 6). The log is also useful in reconstructing a current

version of the data base from an archive or check-

point version. We use a new technique which pro-

vides incremental checkpointing to disk and yet per-

mits dynamic space allocation. Incremental check-

pointing allows us to use a particularly simple

system restart technique. When a system crash oc-

curs, a previous data base state is rapidly recreated

through the use of backup page maps and check-

point images of modified pages. This data base

state, coupled with transaction log information, is

then used to either redo or undo all transactions

which were in progress at the checkpoint or com-

pleted after the checkpoint (Figure 7).

The transaction concept is exposed to the user by

providing operations to begin, undo, and commit

the work of a transaction. The application program-

mer brackets a successful transaction by a BEGIN-

COMMIT pair. An aborted transaction ends with a

RESTORE (undo) verb. All other aspects of

recovery are handled by System R. Transactions also supply the key

to

concurrency

control. If multiple transactions concurrently read

and write the same data, anomalies can occur. For

example, if two transactions both want to add $100

to an account having $1000 balance, then the proper

outcome should be $1200. But if both transactions

May 1979

47

start with the $1000 balance, then the outcome will be $1100. For this reason the execution of the two transactions Ti and T2 is serialized.
System R uses a locking protocol so that: (1) the system itself never gets confused because of concurrent access to a data item by two or more transactions, and (2) the user can control the extent to which his transaction is isolated from the effects of other transactions. Each user can select one of three isolation levels:
* The lowest level permits the reading of data which has been updated by an incomplete transaction.
* The next level guarantees that only committed data is read, and
* The third level guarantees that all reads are both committed and repeatable.
At all levels, System R prevents updates on top of uncommitted updates, so that the system can undo the effects of each transaction independently. All locks are set automatically to ensure the semantics of these isolation levels. The locking subsystem handles queuing and deadlock detection. The transaction recovery mechanism resolves deadlocks by undoing one or more transactions and pre-empting their locks.

Experience also shows the importance of providing frequently used transactions with high performance by means of early binding (compilation). Consider, for example, an airline reservation application. The most common and simplest instance of this application is fetching one record (a flight) and decrementing the number of seats available. Using the access method, the cost for this operation is very low, and one cannot afford to pay the cost of optimizing and interpreting the transaction on each execution.
In general, our experience with System R indicates that the approach will yield good performance for a variety of users, along with the important ability to tune the system as performance requirements change. In addition, the system is easy for new users, who can employ high-level languages to handle both new and existing applications. U Acknowledgments
Many have contributed to the design and implementation of System R: Raymond Boyce, Arvola Chan, David Choy, Kapali Eswaran, Teo Haerder, Randy Katz, Won Kim, Leonard Liu, Paul McJones, Moscheh Mresse, Jorgen Nilsson, Scott Parker, Dominic Portal, Phyllis Reisner, Paul Roever, Robert Selinger, and Vera Watson.

Status and experience

SQL is accessible from PL/I and Cobol and runs on IBM 370 VM and MVS operating systems. System R has been operational since mid-1977. Since then, it has undergone experimentation in various environments. Experience thus far indicates that the system is indeed easy to learn, install, and use. Further, its performance, when approached at the SQL level, is comparable to other data base management systems.
Typical System R applications involve business operations such as accounting, inventory control, purchasing, and bill of materials tracking. For the most part, these applications use System R through a host programming language (one would not want to generate the monthly statements of a large corporation by using an ad hoc query terminal).
Users nevertheless make considerable use of System R's query facilities. For example, they can debug SQL statements in advance by testing them using the UFI. Another example involves table loading-to assure that the table was correctly loaded, it is easier to verify the values using the UFI than to write a complex but seldom-used verification program. These examples demonstrate that it is important to offer both query and host language support in a complete data base management system.

References
1. M. M. Astrahan, et al., "System R, A Relational Approach to Database Management," ACM Trans. Database Systems, Vol. 1, No. 2, June 1976, pp. 97-137.
2. E. F. Codd, "A Relational Model of Data for Large Shared Data Banks," CACM, Vol. 13, No. 6, June 1970, pp. 377-387.
3. Special Issue: Data-Base Management Systems, Computing Surveys, Vol. 8, No. 1, Mar. 1976.

48 COMPUTER

