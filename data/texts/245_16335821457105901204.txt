Object-oriented Analysis & Design
Lars Mathiassen, Andreas Munk-Madsen, Peter Axel Nielsen og Jan Stage ISBN: 87-7751-150-6 Udgave: 1. udgave Udgivelsesår: 2000 Antal sider: 456 Pris: Kr. 410,00
På bogens engelsksprogede sider - www.marko-publishers.com - kan du læse bogens "Reviews". Disse anmeldelser gælder også for 3. udgave af den dansksprogede bog. Bøgerne er identiske.
Michael Jackson writes
Scandinavia has a long and notable tradition in computer science and software engineering. Peter Naur was a major contributor to the development of Algol-60 and co-inventor of the Backus-Naur notation in which its syntax and that of many subsequent languages was described. The original ideas of object oriented programming came out of the work of Ole-Johan Dahl and Kristen Nygaard on Simula 67. Per Brinch Hansen did fundamental work in concurrency and operating systems and in languages for parallel programming. Bjarne Stroustrup brought object orientation to the huge community of C programmers in the C++ language.
Now Lars Mathiassen, Andreas Munk-Madsen, Peter Axel Nielsen, and Jan Stage have written this excellent book on object-oriented analysis and design. It is written in a refreshingly mild style, open-minded and gentle and easy to read. The case studies are varied: two well-known example problems, automobile cruise control and IFIPS conference management, and two less familiar, the management of a hairdressing salon and a monitoring system for a rescue station that operates fire engines, ambulances and breakdown trucks. Little illustrations of particular points abound in the text.
Their approach to development method is sensibly eclectic. They draw on ideas from Checkland's Soft Systems Methodology and from Structured Analysis and Design; they take use cases from Jacobson, and the model-function separation from JSD; they bring in design evaluation criteria from Tom Gilb and Bertrand Meyer.
In the best Scandinavian tradition they are civilized, undogmatic and humane. They emphasize the importance of user involvement, and put interface design in its proper place in their approach. They don't allow themselves to be drawn into an excessively technical treatment of each problem, forgetting its real-world context in the excitement of playing with the UML notations that, after all, are designed to represent programs. And, citing Peter Naur's delightful book Computing: A Human Activity, they remember to remind us that the most useful and important documentation is often

what is written in natural language. I am sure you will enjoy reading this book.
April 2000
Michael Jackson
Contents
Part I: Background Chapter 1: Method
1.1: Objects and Classes 1.2: Model the Context 1.3: Emphasize the Architecture 1.4: Reuse Patterns 1.5: Tailor the Method 1.6: Results 1.7: Unified Process and Notation 1.8: Principles 1.9: Exercises 1.10: Literature Chapter 2: System Choice 2.1: System Definition 2.2: Choosing the System 2.3: Describe the Situation 2.4: Create Ideas 2.5: Experiments with Prototypes 2.6: Define Systems 2.7: The FACTOR Criterion 2.8: Evaluation and Choice 2.9: Principles 2.10: Exercises 2.11: Literature Part II: Problem-Domain Analysis Chapter 3: Classes 3.1: Classification of Objects and Events 3.2: Find Classes 3.3: Find Events 3.4: Evaluate Systematically 3.5: Principles 3.6: Exercises 3.7: Literature Chapter 4: Structure 4.1: Object-Oriented Structures 4.2: Structures between Classes 4.3: Structures between Objects 4.4: Find Candidates for Structure 4.5: Explore Patterns 4.6: Evaluate Systematically 4.7: Principles 4.8: Exercises

4.9: Literature Chapter 5: Behavior
5.1: Behavioral Pattern and Attributes 5.2: Notation for Behavioral Patterns 5.3: Describe Behavioral Patterns 5.4: Explore Patterns 5.5: Consider Structure 5.6: Consider Classes 5.7: Describe Attributes 5.8: Principles 5.9: Exercises 5.10: Literature Part III: Application-Domain Analysis Chapter 6: Usage 6.1: Use Cases 6.2: Example: An Automated Payment System 6.3: Find Actors and Use Cases 6.4: Explore Patterns 6.5: Evaluate Systematically 6.6: Principles 6.7: Exercises 6.8: Literature Chapter 7: Functions 7.1: System Functions 7.2: Find Functions 7.3: Specify Complex Functions 7.4: Evaluate Systematically 7.5: Principles 7.6: Exercises 7.7: Literature Chapter 8: Interfaces 8.1: User and System Interfaces 8.2: Explore User-Interface Patterns 8.3: Determine User-Interface Elements 8.4: Describe User-Interface Elements 8.5: Explore System Interface Patterns 8.6: Describe System Interface Facilities 8.7: Evaluate the Interface 8.8: Principles 8.9: Exercises 8.10: Literature Part IV: Architectural Design Chapter 9: Criteria 9.1: Good Design 9.2: Consider General Criteria 9.3: Analyze Specific Conditions 9.4: Prioritize 9.5: Principles 9.6: Exercises 9.7: Literature Chapter 10: Components 10.1: System Components

10.2: Explore Architectural Patterns 10.3: Define Subsystems 10.4: Identify Components 10.5: Specify Relevant Component 10.6: Principles 10.7: Exercises 10.8: Literature Chapter 11: Processes 11.1: System Processes 11.2: Distribute Program Components 11.3: Explore Distribution Patterns 11.4: Identify Shared Resources 11.5: Select Coordination Mechanisms 11.6: Explore Coordination Patterns 11.7: Principles 11.8: Exercises 11.9: Literature Part V: Component Design Chapter 12: Model Component 12.1: Designing the Model Component 12.2: Represent Private Events 12.3: Represent Common Events 12.4: Restructure Classes 12.5: Principles 12.6: Exercises 12.7: Literature Chapter 13: Function Component 13.1: Designing the Function Component 13.2: Design Functions as Operations 13.3: Explore Patterns 13.4: Specify Complex Operations 13.5: Principles 13.6: Exercises 13.7: Literature Chapter 14: Connecting Components 14.1: Coupling and Cohesion 14.2: Connect Classes 14.3: Explore Patterns 14.4: Evaluate Connections 14.5: Principles 14.6: Exercises 14.7: Literature Part VI: Practice Chapter 15: Strategy 15.1: A Tailored Strategy 15.2: Urgency of Strategy 15.3: Characterize the Task 15.4: Evaluate Difficulties 15.5: Design the Strategy 15.6: Practical Application 15.7: Principles 15.8: Exercises

15.9: Literature Chapter 16: Documentation
16.1: Importance of Documentation 16.2: Documentation Standard 16.3: Good Documentation 16.4: Control and Documentation 16.5: User-Oriented Documentation 16.6: Principles 16.7: Exercises 16.8: Literature Chapter 17: Implementation 17.1: Object-Oriented Platform 17.2: Relational Database System 17.3: Principles 17.4: Exercises 17.5: Literature Chapter 18:Notation 18.1: Purpose 374 18.2: Unified Modeling Language 18.3: OOA&D's Notation 18.4: Rich Picture 18.5: Class Diagram 18.6: Deployment Diagram 18.7: Sequence Diagram 18.8: Statechart Diagram 18.9: Use-Case Diagram 18.10: Navigation diagram 18.11: Window Diagram 18.12: Principles 18.13: Literature Part VII: Examples Chapter 19:Conference Planning 19.1: Analysis Document 19.2: Design Document Chapter 20:Hair Salon 20.1: The Situation 20.2: The Development Task 20.3: Prototype Experiments 20.4: System Definition 20.5: Problem-Domain Analysis 20.6: Application-Domain Analysis Chapter 21:Rescue Station 21.1: Situation and Task 21.2: System Choice 21.3: First Model 21.4: Behavioral Patterns 21.5: Revised Model 21.6: Functions 21.7: Conclusion Chapter 22:Cruise Control 22.1: Cruise Control for a Car 22.2: Strategy

22.3: Architecture 22.4: The System Interface 22.5: The Kernel 22.6: User Interface 22.7: Process Architecture 22.8: Component Architecture 22.9: Conclusion Bibliography Index
Slides, news, technical notes and updates can be found on this homepage look for the buttom "Opgaver og rettelser"
Customers outside Denmark can't order the book from here - please order in the English languaged pages.
Pris DKK
410,00
Priserne er salgspriser incl. moms. Boghandlere og skoler får normal boghandlerrabat. Se salgs- og leveringsbetingelser.

