AILP  .  Abductive  Inductive  Logic  Programming 

H i l de  A de  and  M a rc  D e n e c k er 

Department  of  Computer  Science,  K  U  Leuven 
Celestijnenlaan  200  A,  B-3001  Heverlee,  Belgium 

A b s t r a ct 

Inductive  Logic  Programming  (ILP)  is  often 
situated  as  a  research  area  emerging  at  the  in(cid:173)
tersection  of Machine  Learning  and  Logic  Pro(cid:173)
gramming  (LP)  This  paper  makes  the  link 
more  clear  between  ILP  and  LP,  in  particular, 
between  ILP  and  Abductive  Logic  Program(cid:173)
ming  (ALP),  1 e  ,  LP  extended  with  abduc(cid:173)
tive  reasoning  We  formulate  a  generic  frame-
work  for  handling  incomplete  knowledge  This 
framework  can  be  instantiated  both  to  ALP 
and  ILP  approaches  By  doing  so  more  light 
is  shed  on  the  relationship  between  abduction 
and  induction  As  an  example  we  consider  the 
abductive  procedure  SLDNFA,  and  modify  it 
into an inductive procedure  which  we call SLD-
NFAI 

Keywords 
Logic  Programming, 
Incomplete  Knowledge, 
Knowledge  Base  Updating,  Theory  Revision 

Inductive  Logic  Programming,  Abductive 
Intensional 

I n t r o d u c t i on 

1 
It  is  often  argued  that  the  use  of -  a  subset  of -  first  or(cid:173)
der  logic  as  a  representation  language situates  Inductive 
Logic  Programming  (ILP)  at  the  intersection  of  Logic 
Programming  and  Machine  Learning  The  research  in 
ILP  IB  concerned  with  the  derivation  of logic  programs 
from  (positive  and  negative)  evidence  in  the  presence  of 
background  knowledge  Characteristic  for  this  approach 
is  the  use  of  induction,  i e ,a  form  of synthetic  reasoning 
that  infers  general  laws  from  observations 
[Muggleton 
and  De  Raedt,  1994]  reviews  theoretical  results,  imple(cid:173)
mented  systems  and  practical  applications  in  this  area 
Two major  problems  tackled  in  ILP  are  predicate  learn(cid:173)
ing  and  theory  revision  The  former  is  concerned  with 
the  induction  of  rules  for  an  undefined  or  partially  de(cid:173)
fined  predicate  from  examples,  whereas  the  latter  con(cid:173)
cerns  the  updating of a theory  (a logic  program)  when  it 
is  inconsistent  with  newly  incoming  information  Proto-
type  systems  are  -  amongst  others  -  the  predicate  learn-
era  MIS  [Shapiro,  1983],  FOIL  [Qumlan,  1990],  GOLEM 
[Muggleton  and  Feng,  1990],  CLINT  [De  Raedt,  1992], 
and  the  theory  revision  systems  RX  [Tankitvanitch  and 

Shimura,  1992],  KR-FOCL  [P  BiEani  and  Brunk,  199l] 
and  RUTH  [Ade  et  al,  1994] 

In  the  area  of Logic  Programming (LP)  abduction  has 
been  recognised  as  an  important  form  of non-monotonic 
reasoning 
It  IB  a  form  of  synthetic  reasoning,  which 
-  as  opposed  to  induction 
infers  explanations  for  ob(cid:173)
served  facte,  according  to known  (general)  lawH  Abduc(cid:173)
tion  has  been  shown  useful  for fault  diagnosis  [Charmak 
and  McDermott,  1985],  planning  and  temporaj  reason(cid:173)
ing  [Denecker  et  al,  1992]  and  knowledge  assimilation 
[Kakas  and  Mancarella,  1990],  and  it  has  also  been  suc(cid:173)
cessfully  applied  in  Intensional  Knowledge  Base  Updat(cid:173)
ing approaches  such  as  [Bry,  1990],  [Kakas  and  Mancar(cid:173)
ella,  1990]  and  [Guessoum  and  Lloyd,  1990]  A  critical 
survey  on  the extension oflogic  programming to perform 
abductive  reasoning can  be  found  in  [Kakas  et  al,  1993] 
In  this  paper  we  argue  that  both  abduction  and  in(cid:173)
duction  are  different,  yet  related  forms  of  reasoning  on 
incomplete  knowledge  They  are  both  forms of hypothet(cid:173)
ical reasoning and  attempt  to  "complete"  the  knowledge 
by  proposing  additional  hypotheses  However,  they  dif(cid:173)
fer  in  the  sort  of hypotheses 

According  to  the  "declarative  semantics",  a  logic  pro-
gram  can  be  seen  as  a  Bet  of  definitions  for  a  number 
of  concepts 
This  interpretation  is  already  present  m 
Clark's work on completion semantics  [Clark,  1978]  Un(cid:173)
der  Clark's  interpretation,  a  program  consists  of  a  set 
of  possibly  empty  definitions  for  all  predicates,  predi(cid:173)
cates  are  defined  by  enumerating  exhaustively  the  cases 
in which  they are true  Under this interpretation,  a prob-
lem  with  the  use  of logic  programs  for  knowledge  repre(cid:173)
sentation,  is  that  an  expert  needs  to  provide  complete 
definitions  for  all predicates 
In  many applications,  such 
complete information is not  available  A natural  solution 
IB  to extend  the  logic program  formalism such  that  only 
a  subset  of  the  predicates  is  to  be  defined  while  other 
predicates  can  be  left  undefined 
In  addition,  partial 
knowledge about these  undefined  predicates can be given 
using  FOL  axioms  The  role  of these  FOL  axioms  is  in(cid:173)
timately tied  to  the  representation  of uncertainty  when 
a number  of concepts  cannot  be  defined,  then  other,  less 
precise  information  may  be  available  which  can  be  rep(cid:173)
resented  as  a  set  of  assertions  E  g  ,  if  the  predicates 
father/1  and  mother/1  are  declared  as  being  undefined, 
the  axiom  mother(X)  V  father(X)  <—  parent(X)  expresses 
the  weaker  partial  knowledge  that  it  cannot  be  the  case 

ADE AND DENECKER 

1201 

that  someone  is  a  parent  without  being  a  mother  or  a 
father 

The  actual  procedures  for  "completing"  incomplete 
knowledge  developed  in  the  ALP  and  ILP  area,  are  -
as  to  be  expected  -  quite  different  The  ALP  approaches 
construct  hypotheses  in  the  form  of ground  facts  for  the 
undefined  predicates  These  factB  are  seen  as  the  de(cid:173)
scription  of a  scenario  that  explains  a  given  observation 
As  opposed  to  this,  ILP  systems  in  general  -  even  in 
case  of a  specific-to-general  search  -  disallow  facts  The 
hypotheses  they  generate  are  sets  of  rules  that  express 
general  -  scenario  independent  -  information  on  the  un(cid:173)
defined  predicates  AB  such  an  ALP  approach  is  appro(cid:173)
priate  when  the  expert has great confidence in his general 
knowledge,  but  wants  to  find  a  concrete  explanation  for 
an  observation  On  the  other  hand,  an  ILP  approach  is 
more  appropriate  when  the  expert  searches  for  general 
rules  that  compact  the  positive  and  negative  evidence, 
and  that  later  can  be  reused  to  classify  new  examples 

A  first  step  towards  integration  of  techniques  from 
both  domains  was  taken  by  [De  Raedt  and  Bruynooghe, 
1992]  De  Raedt  and  Bruynooghe  argue  that  -  when  re(cid:173)
formulated  within a logical framework -  both  intenBional 
knowledge  base  updating  and  predicate  learning  are  in(cid:173)
stances  of the  belief  updating  problem  As  a  proof  for 
this  claim  they  present  an  adapted  version  of  Shapiro's 
MIS  system  in  which  techniques  from  both  parent  do(cid:173)
mains  are  integrated 
These  ideas  were  later  further 
elaborated  and  implemented  in  the  theory  revision  sys(cid:173)
tem  RUTH  [Ade  et  al,  1994] 

The  contribution  of  our  work  is  that  we  reformulate 
the  ALP  and  ILP  approaches  as  instances  of  a  generic 
version  of  Bry's  framework  [Bry,  1990]  for  intensional 
knowledge base  updating 
In  doing so we show  that there 
is  a  clear  relationship  between  inductive  and  abductive 
reasoning  Moreover,  this  setting  enables  UB  to  intro(cid:173)
duce  inductive reasoning  into an  abductive  schema,  thus 
resulting  in  a Betting  which  one  could  call  Abductive  In(cid:173)
ductive  Logic  Programming  (AILP)  As  an  example  we 
transform  a  typical  abductive  procedure,  namely  SLD-
NFA  into  a  new  procedure  SLDNFAI  (SLDNFA-with-
Induction)  by enhancing  it  with  a general-to-specific  pro-
cedure  for  inducing  clauses  Furthermore,  this  enhance(cid:173)
ment could  also be  beneficial  for  the  ILP  approach,  since 
SLDNFA  is  a  procedure  for  normal  clauses,  whereas  the 
ILP  setting  used  to  be  restricted  to  definite  clauses 

This  paper  is  organized  as  follows 

In  Section  2  we 
introduce  a  generic  framework  that  formalizes  different 
forms  of  hypothetical  reasoning  on  incomplete  knowl(cid:173)
edge 
In  Section  3  we  map  both  the  ALP  and  ILP  ap(cid:173)
proaches  to  this  framework,  and  discuss  the  similarities 
and  differences 
In  Section  4  we  elaborate  an  abductive 
procedure  for  ILP,  by  introducing  inductive  reasoning 
into  the  abductive  procedure  SLDNFA  Finally,  in  Sec(cid:173)
tion  5  we  formulate  our  conclusions 

P r o b l em  f o r m a l i z a t i on 

2 
Intuitively  one  can  outline  the  problem  of  handling  in 
complete  knowledge  as  follows  Given  is  a  logic  program 
P,  which  is  declaratively  read  as  the  descnption  of  the 
problem  domain  One  part  of  this  program  is  regarded 

1202 

LEARNING 

In  [Bry,  1990]  a  non-Horn  theory  JV  for  the  meta-
predicate  new  is  defined  in  terms  of  operations  on  the 
object  program  facts  and  clauses 
In  Definition  4  we 
give  a  'generic'  version  of  this  theory,  in  that  we  re(cid:173)
placed  the  actual  operations  on  the  object  program  by 
the  predicates  eval.pos-atom  and  cvaLneg.atom  that  are 
to  be  instantiated  The  rules  rely  on  a  meta-predicate 
clause  that  ranges  over  the  clauses  of C(P)  defining  the 
predicates  that  are  not  in  U{P)  More  specifically,  de(cid:173)
fine  Clause(P)  as  the  meta  program  consisting  of factB 
clause(A <—  B) for each rule A ■*—  B in C(P) and of facts 
undefined(A)  for  all  atoms  A  containing  a  predicate  of 
U{P) 
logic  program  P  u  a 
D e f i n i t i on  2  An  update  of  a 
form  eval_pos_atom(A)  or 
set  of  expressions  of  the 
eval_neg_atom(A)  where  A  is  an  atom 
D 
D e f i n i t i on  3  Lei P  be  a logic program  and  U an  -update 
of P  The  procedure  update  is  a function  that  n  aps  P  and 
U  to  a  logic  program,  such  that  the  following  correctness 
criterion 

fulfilled 

is 

A b d u c t i on  v e r s us 

3 
In  this  section  we  diacuss  the  ALP  and  ILP  approaches 
in  terms  of the  generic  problem  setting  of Figure  1  and 
the  rewrite  rules  for  the  meta-predicate  new 

I n d u c t i on 

A LP 

3  1 
In  general,  abductive  reasoning  is  concerned  with  the 
construction  of explanations  for  observations  using  gen(cid:173)
eral  laws  These  explanations  are  expressed  in  terms  of 
a  predetermined  set  of predicates,  called  abducible pred(cid:173)
icates  Moreover,  most  ALP  approaches  require  the  ex(cid:173)
planations to  be a set  of ground facts  First,  this  restricts 
the  number of possibilities, and Becond,  in ALP one is in(cid:173)
terested  in  constructing  a  concrete  scenario  rather  than 
general  rules  As  a  consequence  updates  of  a  logic  pro(cid:173)
gram  P  are  restricted  to  removing  and  inserting  ground 
facts  for  the  abducible  predicates 

In  the  formalization of the  previous section  this means 
that  ALP  regards  the  logic  program  P  as  having  a  fixed 
part,  consisting  of  C{P)  and 
the  set  U(P) 
containing  the  names  of  the  abducible  predicates  All 
of  C(P)  belongs  to  the  complete  part, 
the  incomplete 
part  defining  the  predicates  of  U{P)  is  empty  Once 
evidence  E  is  given,  it  is  translated  into  operations  on 
the  abducible  predicates 

I(P),  and 

The  effect  of  the  meta-predicate  abduce  operating  on 
the  program  P  is  that  the  atom  A  is  added  to  the  pro(cid:173)
gram  as  (part  of)  the  definition  for  the  abducible  predi(cid:173)
cate  The  meta-predicate  avoid -unification has  as  effect 
that it continuously constrains  the atom  A so  that it  can(cid:173)
not unify  with any of the  abduced atoms  Note that  both 
predicates  abduce  and  avoid-unification  are  still  generic 
in  the  sense  that  they  do  not  give  any  exact  procedural 
information  Every  abductive  system  implements  these 
predicates  in  its  own  particular  way 

I LP 

3  2 
In general  ILP approaches are  concerned  with  the deriva(cid:173)
tion  of  logic  programs  from  positive  and  negative  evi(cid:173)
dence  in the presence  of background  knowledge 
In  most 
systems evidence  is  a  set  of positive  and  negative  exam(cid:173)
ples of predicates  for  which  no  or only  incomplete defini(cid:173)
tions  are  given  We  will  call  these  predicates  inducible 
ILP aims at  constructing  general rules  that  define the  in(cid:173)
ducible  predicates,  since  one  is  interested  in  compacting 
the  knowledge  represented  by  the  positive  and  negative 
examples  Furthermore,  one  wants  to  be  able  to  reuse 
the  induced  rules  for  the  classification  of  unknown  ex(cid:173)
amples 

In  the  formaheation  of  Section  2  this  means  that  the 
background  knowledge  is  a  part  of C(P) 
It  is  the  fixed 
part  of  P  that  is  correct  and  complete,  and  that  can 
be  used  as  a  logic  program  W(P)  is  the  set  of  ITI-
ducible  predicates  C(P)  can  contain  clauses  for  these 

ADE AND DENECKER 

1203 

already  abduced  atoms,  and  only  abduce  a  new  fact 
when  unification  fails 

Notice  that  an  analogue  duality  can  be  found  in  the 
rules 
(2)ALP  and  (2)lLP  The  first  conjunct  of  the  right 
hand  side  expresses  that  once  a  negative  atomic  goal 
unifies  with  the  head  of a  clause,  the  instantiated  body 
should  not  be  true  in  Pnew  The  second  conjunct  ex(cid:173)
presses  what should be done when the negative goal con(cid:173)
tains  a  predicate  p  of U{P)  The  difference  between  the 
ALP  and  the  ILP  approach  lies  in  the  fact  that  in  ALP 
one  must  avoid  unification  with  the  abduced  atoms  for 
the predicate  p,  whereas  in  ILP  one  must  avoid  coverage 
by  the  (induced)  clauses  for  p 

4 

S L D N F AI 
for  ILP 

an  a b d u c t i ve  p r o c e d u re 

the  abductive  procedure, 
In  this  section  we  consider 
SLDNFA  [Denecker  ti  a\,  1992],  and  show  that  replacing 
the  reasoning  on  the  level  of  ground  facts  by  an  induc(cid:173)
tive  reasoning  schema,  transforms  it  into  an  inductive 
procedure,  which  we  call  SLDNFAI 

A  call  to  the  meta-predicatc  induce  has  the  following 
effect  First  it  ia  checked  whether  there  is  a  clause  in 
C{P)  that  covere  the  atom  A3 
If  this  is  the  case,  noth(cid:173)
ing  needs  to  be  done  Else,  a  clause  is  constructed  that 
covere  the  atom  A  and  that  IB consistent  with  the  nega(cid:173)
tive evidence  Been so far  We formulate the  requirements 
for  such  a  clause  only  in  a  very  general  way,  since  each 
approach  has  its  own  particular  way  of  implementing 
the  induction  of  a  clause 
For  example  in  a  specific-
to-general  approach  one  would  start  with  a  most  spe(cid:173)
cific clause,  which can then  later be generalised,  whereas 
a  general-to-specific  approach  would  rather  construct  a 
most general  clause  covering  the  example  and  consistent 
with  the  negative  evidence 

The  meta-predicate  refine  is  called  when  a  negative 
example  is  covered  by  one  or  more  clauses  in  the  par-
tial  definitions  for  the  inducible  predicates 
In  that  case 
these  clauses  are  refined,  1 e  ,  made  more  specific,  such 
that  they  no  longer  cover  the  negative  example  Making 
a  clause  more  specific  is  usually  done  by  adding  one  or 
more  literals  to  its  body,  although  this  is  not  the  only 
way  to  implement  refine  E  g  ,  MIS  [Shapiro,  1983] just 
removes  the  whole  clause,  and  if  necessary,  replaces  it 
later  by  a  more  specific  clause 

D i s c u s s i on 

3  3 
Taking  a  closer  look  at  the  rules  (1)A L P,  (2)A L P,  (l)ILP 
and 
{2)ILP,  one  can  see  some  important  similarities  in 
the  reasoning  mechanisms  of  the  ALP  and  ILP  ap-
proaches 
Consider  for  example  the  rules  (1)ALP  and 
( 1 )I LP  The  first  disjunct  of  the  right  hand  side  looks 
very  much  the  same 
reduction  of  a  goal  via  resolution 
with  a  clause  of  P  The  main  difference  of  course  lies 
in  the  second  disjunct  of  the  rules,  namely  in  the  meta-
predicates  abduce  and  induce  The  meta-predicate  ab­
duce  reasons  on  the  level  of  ground  facts,  whereas  the 
meta-predicatc 
induce  is  concerned  w i th  definite  Horn 
clauses  However,  there  still is a certain  analogy in  these 
predicates 
induce  first  backtracks  over  the  possibly  in(cid:173)
complete  definition  of the  inducible  predicate,  and  only 
if the  atom  is  not  covered  a new  clause  in  induced  Most 
abductive  systems  realise  abduce  by  just  inserting  the 
atom  as  a  new  fact,  but  there  exist  more  sophisticated 
abductive  approaches  that  also  first  backtrack  over  the 

2  A  clause  C  covers  an  atom  A  if  P  U  {C}  \=  A 

1204 

LEARNING 

its  variables  by  Bkolem  constants  -  and  adding  the  re(cid:173)
sult  to 
In  order  to  solve  problems  with  unification 
with  skolem  constants,  classical  unification  is  extended 
In  a  first  phase,  extended  unification  treats  skolem con(cid:173)
stants  as  variables,  in  a  second  phase,  it  Bkolemnes  the 
terms  bound  to  the  original  skolem  constants  This  IB 
illustrated  in  Example  1 

The  predicate  avoid.unification,  which  handles 

the 
case  where  an  abductive  atom  A  is  selected  in  a  neg(cid:173)
ative  goal  Q,  is  more  complex  One  must  compute  the 
failure  tree  obtained  by  resolving  the  goal  with  each  of 
the  abduced  atoms  in ,  
A  problem  is  that  the  final  A 
may  not  be  totally  known  when  A  \s  selected  SLDNFA 
solves this  by  interleaving  the  computation  of the failure 
tree  with  the  construction  of  
This  is  implemented 
by  storing  for  each  negative  abductive  goal  the  triplet 
where  Q  is  the  negative  abductive  goal,  Aq 
is the  abductive  atom Belected  in 
is the set of 
abduced  atoms  that  have  been  resolved  with  Q  When 
a new  fact  is abduced,  the stored  goal is retrieved  and  is 
resolved  with  the  new  fact 

and 

Finally,  SLDNFA  has  a  special  negative  unification 
procedure  for  handling  the  case  where  skolem  constants 
occur  in  negative goals  We will not  go into detail on this 
procedure  We just  mention that  it  produces  expressions 
of  the  f o r mt e rm  as  constraints  on  the  generated 
solutions 

In  [Denecker,  1993]  the  SLDNFA  procedure  is formal(cid:173)
ized  and  it  is  proven  to  be  sound  w rt  completion  se(cid:173)
mantics  comp 
IB proven  that if the  computation  terminates,  then  SLD(cid:173)
NFA  generates  at  least  all  minimal  solutions 

A.s  a completeness  result  it 

4  2  A  simple  inductive  procedure 
We  design  a  simple  inductive  procedure  which  can  be 
seen  as  prototypical  for  a  general-to-specific  incremen(cid:173)
tal  ILP  approach  to  predicate  learning 
In  termB  of the 
formalization of Section  2,  our procedure  handles the fol(cid:173)
lowing  problem 
G i v en 

'Note  that  in  a classical HP  setting 

under  FOL 
•emanticB should  entail  the positive  examples  and  should  be 
consistent  with  the  negative  examples  When 
is  a 

As  representation  language  we  use  functor-free,  linked 
The  procedure  starts  with  an  empty 
Horn  clauses 
and  handles  the  examples  incrementally 
hypothesis 
Clauses  in 
are  represented  as  couples  of  the  form 
(c, coverage),  where  C  is  a  clause  and  coverage  is  the 
set  of positive  examples encountered  so  far  that  are  cov(cid:173)
ered  by  c  The  clauses  of  C(P)  denning  predicates  of 
U{P)  are  considered  to  belong  tc 
Their  coverage  is 
initialised  to  the  empty  Bet  We use  a  set  N  to  Htore  the 
negative examples handled BO far 

We  now  specify  how  the  predicates  induce  and  refine 
are  implemented  in  our  inductive  procedure  The  predi(cid:173)
cate  induce is  called  when  a positive  example  is  encoun(cid:173)
tered  When  it  is  already  covered  by  one  or  more of the 
clauses  in  H,  it  is  added  to  the  coverage  of each  of these 
clauses  When  the  example  is not covered  by  the  current 
H,  a  most  general  clause  is  constructed  that  covers  the 
example,  and  does  not  cover  any  of  the  negative  exam(cid:173)
ples  in  N  The  actual  construction  of such a  clause  goes 
as  follows  The  procedure  starts  with  a  clause  with  an 
empty  body,  and  with  as  head  a  variabilized  version  of 
the  positive  example  This  very  general  clause  is  then 
gradually  refined  until  it does  not  cover  any  of the  nega(cid:173)
tive examples in the current  N  Refining a clause is done 
either  by  unifying  two  distinct  variables,  or  by  adding  a 
literal  to  the  body  The  arguments  of this  literal  should 
be  distinct  variables,  with  at  least  one  variable  in  com(cid:173)
mon  with  the  original clause  The  predicate  can  be  any 
predicate  of  P 
The  meta-predicate  refine  is  called  for  handling  a  nega(cid:173)
tive  example 
If  the  example  is  covered  by  one  or  more 
clauses  in  H,  each  of  these  clauses  is  refined  auch  that  it 
no longer covers  the negative example  Next  it IB checked 
for  each  of these  refined  clauses  which  examples  in  their 
coverage  are  no  longer  covered  The  examples  that  are 
no  longer  covered  by  any  of  the  clauses  in  H  are  then 
again  added  to  E 
4  3 

Introducing  induction  in  SLDNFA 
SLDNFAI 

The  basic  idea  is  to  maintain  the  overall  structure  of 
the  SLDNFA  procedure  and  to  replace  the  abduction  of 
the  set  of  ground  facts  A  by  the  induction  of  a  set  of 
clauses  H  using  the  inductive  procedure  of Section  4  2 
For doing BO, we will consider positive abductive goals as 
positive examples, and negative abductive goals as nega-
tive examples6  The  set  H  is  initialized with  the  clauses 
of C(P)  defining  predicates  of U(P),  with  an  empty  cov(cid:173)
erage  for  each  of  these  clauses  As  in  SLDNFA  we  use 
sets  PG  and  NG  to  store  positive  and  negative  goals 
For  a  posit  ve  abductive  goal,  SLDNFAI  extends  
-  if 
necessary  -  with  a new  clause  that  is  consistent  with  the 
negative  examples  encountered  so  far  These  negative 
examples  are  stored  in  the  set  N 
Interleaving the  com(cid:173)
putation  of the  failure  tree  for  a  negative  abductive  goal 

definite  program,  this  is  equivalent  with 
under  least 
Herbrand  Model  semantics  entails  both  the  positive  and  the 
negated negative  example! 

6 A  positive,  reap  negative,  abductive  goal is an  atom for 
an abduncible predicate,  selected in  a positive,  reap  negative, 
goal 

ADE AND DENECKER 

1206 

and  the  construction  of  the  set  A  is  replaced  by  refin(cid:173)
ing  H  each  time a  new  negative  example  is  encountered 
We  clarify  this  idea  by  illustrating  SLDNFAI  on  a  small 
example 
E x a m p le  2  Consider  the  following  fault  diagnosis  prob­
lem  for  lamps 

The  predicate  conn_to_empty_battery  is  inducible  Note 
thai  this  implies  that  clause  (8)  is  not  necessarily  com 
plete  and  correct 
The  following  enumeration  describes 
how  SLDNFAI  operates  in  order  to  make  the  initial  query 
succeed 
In  each  step  we  indicate  the  operation  and  the 
updated  datasiructures 

Let  us 

for 

take 

in  example  2  stay 

the  same  for  SLDNFA 

First,  SLDNFA  would  not 

the  Bake  of  comparison  discuss  how 
the  same  exam(cid:173)
SLDNFA  would  have  operated  on 
ple 
into  account 
clause  (6),  since  it  assumes  that  initially  there  is  no 
definition  for  the  abducible  predicates  The  first  three 
steps 
In 
step  4  howeveT,  SLDNFA  would  abduce 
the  atom 
with  sk1  a  skolem  con(cid:173)
conn-to-empty-battery 
stant,  and  add  it 
the 
same  as  for  SLDNFAI,  but  step  7  is  again  different 
Since  conn-to 
is  a  negative  abduc-
tive  goal,  unification  with  eonn-to.empty.battery { 
should  be  avoided  Therefore  SLDNFA  adds  the  con(cid:173)
straint  sk1  
The  result  is  that  SLDNFA  has  ab-
duced  that  lamp  l1  has  an  empty  battery  sk1  which  is 
different  from  b2 

to  A  Step  5  and  6  stay 

-empty.battery 

Which  of  both  solutions  -  i e,  the  one  produced  by 
SLDNFA  or  the  one  produced  by  SLDNFAI  -  is  prefer 
able  of course  depends  on  the  actual  problem  situation, 
I e  ,  whether  one  is  interested  in  general  rules,  or  in  a 
concrete  scenario 

Finally, we  want  to  make two  important  remarks  con(cid:173)
cerning  SLDNFAI  First,  we  claim  that  in  a  "degener(cid:173)
ate"  case,  SLDNFAI  reduces  to  the  inductive  procedure 
of Section  4  2 
Indeed,  when  SLDNFAI  is  given  as  ini(cid:173)
tial  query  the  conjunction  of  all  positive  and  negative 
examples,  it  will  behave  as  the  inductive  procedure  we 
described,  and produce  a set of clauses  that covers all the 
positive  examples,  and  none  of the  negative  examples 
And  second,  we  claim  that  by  using  the  SLDNFA  ap(cid:173)
proach,  SLDNFAI  provides  an  elegant  way  of  extending 
ILP  approaches  to  handle  normal  clauses  The  use  of 
completion - as  in SLDNFA - allows to extend  the  covers 
relation  in  a  straightforward  way  to  cope  with  negated 
atoms  in  the  body  of  clauses  This  approach  was  also 
taken  by  [Taylor,  1993]  in  their  extension  of a  particular 
generalization  operator,  nl  absorption,  towards  normal 
clauses  in  an  inductive learning context  Moreover,  since 
SLDNFA can cope both with positive and negative goals, 
it  functions  in  a  very  natural  way  as  an  example  gen(cid:173)
erator  for  both  positive  and  negative  examples  for  the 
inducible  predicates,  as  can  be  seen  in  Example  2 

C o n c l u s i o ns 

5 
In  this  paper  we  have  made  the  link  more  clear  between 
ALP  and  ILP  We  have  argued  that  both  induction  and 
abduction  are  different,  yet  related  forms of hypothetical 
reasoning  on  incomplete  knowledge  On  the  one  hand, 
abductive  procedures  complete  this  incomplete  knowl 
edge  by  hypotheses  containing  ground  facts  Such  a 
solution  is  appropriate  when  one  has  confidence  in  the 
available  general  laws,  and  one  is  interested  in  finding 
a  concrete  scenario  that  explains  certain  observations 
On  the  other  hand,  inductive  procedures  produce  gen(cid:173)
eral  rules  to  complete  the  incomplete  knowledge  This 
is interesting in  case  one  is  interested  in  compacting the 
positive  and  negative  evidence,  and  in  later  reusing  the 
rules  for  classifying  new  examples 

Borrowing  ideas  of Bry's  setting  [Bry,  1990]  for  inten 
sional  knowledge  base  updating,  we  have  developed  a 
generic  framework  that  formalises  the  problem  of  com-

1206 

LEARNING 

pleting  incomplete  knowledge 
In  thin  framework  a 
declarative  expression  of an  update  of a logic program  P 
resulting  in  a  logic  program  Pne,w  is  a  set  of logical  for(cid:173)
mulas using  a  meta-predicate  new that  applies  on  atoms 
and  negated  atoms  A  set  of  rewrite  rules  translates 
these  formulas  into  operations  on  the  object  level  pro(cid:173)
gram 

Next,  we  mapped  our  framework  both  to  the  ALP 
and  ILP  approaches 
In  doing  so,  more  light  is  shed  on 
the  relationship  between  abduction  and  induction  As 
an  illustration  we  considered  the  abductive  procedure 
SLDNFA  of [Denecker  and  De  Schreye,  1992]  "We refor(cid:173)
mulated this  procedure  as  an  instantiation  of our  generic 
approach  and  showed  that  this  enabled US to  replace  in 
a  straightforward  way  the  abduction  of ground  facts  by 
a  general-to-specific  procedure  for  inducing  clauses  We 
call the resulting procedure  SLDNFAI,  1 e  , SLDNFA ex(cid:173)
tended  with  induction  Finally,  we  claim  that  this  en(cid:173)
hancement  of SLDNFA  can also be  beneficial for  the ILP 
approach,  since  SLDNFA  works  with  normal  program 
clauses,  whereas  ILP  is  restricted  to  definite  clauses 

As  a  general  conclusion  we  can  say  that  our  paper 
has  established  a  clear  relationship  between  ALP  and 
ILP  We  pointed  out  that  it  is  worthwhile  transferring 
results  and  techniques  from  one  domain  to  the  other 
E g  ,  ILP  could  benefit  from  formal  and  theoretical  re(cid:173)
sults  obtained  in  ALP,  whereas  ALP  could  benefit  from 
inductive  techniques  to alleviate the restriction  to abduc-
ing  only  ground  facts  We  are  convinced  that  the  first 
promising results  achieved  in  this paper suggest  that fur(cid:173)
ther  research  on  this issue can lead  to interesting results 

Acknowledgements 
We  wish  to  thank  Maurice  Bruynooghe,  Gunther  Sablon 
and  Luc  De  Raedt for  their  comments on earlier  versions 
of  this  paper,  and for the inspiring discussions  Research 
for  this  paper  was  partially  supported  by  the  Esprit  Bra 
nr  6020  (ILP)  We  are  also  grateful  to  the  anonymous 
reviewers  for  their  encouraging  comments 

References 
[Ade  et  al,  1994]  H  Ade,  B  Malfait,  and  L  De  Raedt 
In  Proceed­
RUTH  an  ILP  Theory  Revision  System 
ings  of  ike  8th  International  Symposium  on  Method 
ologies  for  Intelligent  Systems  (ISMIS94),  1994 

[Bry,  1990]  Francois  Bty 

Intensional  updates  abduc(cid:173)
tion  via  deduction 
In  D  Warren  and  P  Szeredi, 
editore,  Proceedings  of  the  7th  International  Confer 
ence  on  Logic  Programming,  pages  561-578  The  M IT 
Press,  1990 

[Charniak  and  McDermott,  1985]  E 

Charmak 

and 
to  Artifical  Intelligence 

D  McDermott 
Addison  Wesley,  1985 

Introduction 

[Clark,  1978]  K  L  Clark  Negation as failure  In H  Gal-
laire  and  J  Minker,  editors,  Logic  and  Databases, 
pages  293-322  Plenum  Press,  1978 

[De  Raedt  and  Bruynooghe,  1992]  L  De  Raedt  and 
M  Bruynooghe  Belief  updating  from  integrity  con(cid:173)
straints  and  queries 
Artificial  Intelligence,  53  291-
307,  1992 

[De  Raedt,  1992]  L  De  Raedt 

Interactive  Theory  Re­
Inductive  Logic  Programming  Approach. 

vision 
Academic  Press,  1992 

an 

[Denecker  and  De  Schreye,  1992]  M 

Denecker 
and  D  De  Schreye  SLDNFA  an abductive  procedure 
for  normal  abductive  programs 
In  K  R  Apt,  editor, 
Proc  of  the  International  Joint  Conference  and  Sym 
posium  on  Logic  Programming,  pages  686-700,  1992 
[Denecker  ei  al,  1992]  M  Denecker,  L  Missiaen,  and 
M  Bruynooghe  Temporal  reasoning  with  abductive 
In  B  Neumann,  editor,  Proceedings 
event  calculus 
of  the  10th  European  Conference  on  Artificial  Intelli 
gence,  pages  384-388  John  Wiley  &  Sons,  1992 

[Denecker,  1993]  M  Denecker 

Knowledge  Represen 
tation  and  Reasoning 
in  Incomplete  Logic  Program­
ming  PhD  thesis,  Department  of  Computer  Science, 
K  U  Leuven,  1993 

[Guesspum  and  Lloyd,  1990]  A  Guessoum  and  JW 
Lloyd  Updating  knowledge  bases  New  Generation 
Computing,  8  71-88,  1990 

[Kakae  and  Mancarella,  1990]  A  C  Kakas  and  P  Man(cid:173)
carella  Database updates through  abduction  In  Proc 
of  the  16th  Very  large  Database  Conference,  pages 
650-661,  1990 

[Kakas  et  al,  1993]  A  C  Kakas,  R A  Kowalski,  and 
Journal  of 

F  Tom  Abductive  Logic  Programming 
Logic  and  Computation,  2(6)  719-770,  1993 

[Muggleton  and  De  Raedt,  1994]  S 

ton  and  L  De  Raedt 
Theory  and  methods 
19,20 629-679,  1994 

Muggle-
Inductive  logic  programming 
Journal  of  Logic  Programming, 

[Muggleton  and  Feng,  1990]  S  Muggleton  and  C  Feng 
In  Proceedings 
Efficient  induction  of  logic  programs 
of  the  1si  conference  on  algorithmic  learning  theory, 
pages  368-381  Ohmsma, Tokyo,  Japan,  1990 

[Pazzam  and  Brunk,  199l]  M  Pazzani  and  C  Brunk 
Detecting  and  correcting  errors  in  rule-based  expert 
systems  an  integration  of empirical  and  explanation-
Knowledge  Acquisition,  3  157-173, 
based 
1991 

learning 

[Quinlan,  1990]  J  R  Quinlan  Learning  logical  defini(cid:173)
tions  from  relations  Machine  Learning,  5  239-266, 
1990 

[Shapiro,  1983]  EY  Shapiro  Algorithmic  Program  De 

bugging  The  M IT  Press,  1983 

[Tankitvamtch and  Shimura,  1992] 

S  Tankmanitch  and  M  Shimura  Refining  a  rela(cid:173)
tional  theory  with  multiple  faults  in  the  concept  and 
In  Proceedings  of  the  9th  International 
subconceptB 
Workshop  on  Machine  Learning,  pages  436-444  Mor(cid:173)
gan  Kaufmann,  1992 
[Taylor,  1993]  K  Taylor 

Inverse  Resolution  of  Normal 
In  Proceedings  of the  3rd  International  Work­
Clauses 
shop  on  Inductive  Logic  Programming,  pages  165-177, 
1993 

ADE AND DENECKER 

1207 

