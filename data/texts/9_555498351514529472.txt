System Issues in Crowd Simulation using Massively Multi-Agent Systems
Ramachandra Kota, Vidit Bansal, Kamalakar Karlapalem
Center for Data Engineering International Institute of Information Technology
Hyderabad, India. {ramachandra,vidit}@students.iiit.ac.in, kamal@iiit.ac.in
1 Introduction
Crowd Simulation has emerged as an interesting and challenging research domain in recent years. A number of multi-agent based simulation systems have been proposed notably RoboRescue. In this paper we focus on the scalability issues for such a rescue simulation system. Simulating large crowds in rescue systems throws up many challenges. Crowd events and their associated phenomenon are difficult to model. Different types of crowd simulation systems have been developed, ranging from force-modelling approaches, cellular automata based simulations and rule-based architectures. However, multi-agent paradigm is particularly suitable for modelling human behaviour, as human characteristics can be objectively mapped to agent behaviour. In this paper we analyze the scalability issues for multi-agent based crowd simulation systems. Scalability of a such a system is vital as the system is required to simulate very large-sized crowds. To realistically model a disaster scenario for a large city the system should ideally scale up to accommodate hundreds of thousands of agents.
2 Related Work
While a lot of work has been done in simulating crowd behavior through multi-agent systems, focus has not generally been on the scalability aspect. Amongst the different models that have been proposed to model crowd behaviour, one which has been widely put to use is the force based model developed by Dirk Helbing et al. This model tries to simulate the motion of each civilian under forces that are exerted by other civilians and boundaries. A major problem with Helbing's model is that of computational complexity. We'd like to refer to two different approaches which have been used to simulate huge crowds in a city-wide rescue simulation environment. Koto and Takeuchi proposed a distributed simulation environment for the RoboCupRescue project, where the simulation is carried out on a PC cluster. A quite different approach to represent large numbers of civilians was proposed by Michael Brenner et al. The basic premise of their formulation is that crowds behave as single entities. they suggest a quantitative location-based representation of civilians with a probabilistic model of their behavior. The computational complexity of the model does not depend on the number of civilians but only on the number of locations.
3 Background
We have attempted to develop a crowd simulation model which preserves the granularity of simulation at the individual level, and at the same time is scalable and can simulate combined behaviour of huge crowds. To achieve realistic simulation we should ideally be able to model the activities of every individual, even when there are thousands of such individuals.
3.1 Micro-Agent Architecture
The architecture that we discuss in this section is a representative of the common architecture which is employed in multi-agent based crowd simulation systems. In this architecture, each civilian is modelled as an agent. Hence, each civilian has a thread dedicated to it. The CPU would run as many threads as there

are civilians. Also, if the memory required for one civilian is Mx, then the total memory required would be

nM
x

where

n

is

the

number

of

civilians.

Evidently

this

architecture

is

not

scalable

as

there

will

be

two

key

factors which could limit scalability the size of the RAM, which determines the number of agents that can

be kept in the main memory and the number of threads that can be handled by the processor. Threads by

themselves strain both the main memory and the CPU usage, thereby imposing a dual constraint.

4 Macro-Micro Agent Architecture
We propose a novel architecture, which we call the Macro-Micro architecture. This architecture uses the database to bypass the limitations of the memory, and at the same time uses the abstraction of a crowd to reduce the complexity.
A crowd can be loosely defined as a temporary group of individuals, sharing some common space and environment and moving together, with all individuals having nearly the same velocity. Individuals who are deep within a crowd have a restricted freedom of movement. Their movement is decided by the movement of their neighbours. However the individuals who are at the periphery of the crowd are considerably more free to move. Thus the individuals on the periphery shape its boundary and dictate the movement of the crowd. Further the crowd can be considered as a single entity moving in a certain direction with a certain velocity, with individuals inside the crowd sharing the same motion characteristics.
In our simulation, we maintain a database table of all civilians. We identify clusters of civilians which can be considered as a crowd. This crowd can be considered to be a single entity and we represent it by a Crowd agent. Since the individuals at the boundary play an important role in determining the shape and movement of the crowd, we consider them as distinct from their respective Crowd agent and represent them as Boundary agents.
In our architecture, we essentially differentiate between those civilians who are within a crowd and share the motion of the crowd, and those which are at the periphery and may have significant motion characteristics of their own. Our architecture has two basic components, the database and a set of agents running on the system. We use the database to store the state of all the civilians, who at any point of time might be activated as a boundary agent if they come to lie at the periphery of a crowd. Apart from the database we have two distinct sets of agents- Crowd agents which model the behaviour of the crowds and a set of Boundary agents who are essentially the activated civilians from the database. If at any point of time, a boundary agent is displaced inwards such that it comes to lie deep within the crowd, we deactivate the agent and it continues its existence as just a tuple in the database table. In effect, our whole approach is centered at activating and deactivating agents as the simulation proceeds. We are able to achieve scalability as the agents running on the system are only the civilians at the periphery or the crowd agents. However, we are still able to retain the granularity at the individual level since each individual's characteristics are stored in the database.

Fig. 1. The system architecture

5 Conclusion
We were successful in simulating crowds having civilians to the order of hundred thousand. However, a basic analysis of the architecture would reveal that the complexity of the system depends upon the number of boundary agents rather than the number of civilians. The total time taken depends on the thickness of the crowd clusters. One thing that we have been able to achieve is keep track of all the individual civilians all throughout the simulation. We have only conducted the simulations on simple scenarios. We need to evaluate the performance in more complex environments like RoboCupRescue. At a semantic level, boundary agents can be looked at as the leaders in the crowd. Future research in crowd evacuation can concentrate on developing the role of these leaders as rescue agents. Future research can also critically examine how database systems can be effectively used in scaling up multi-agent systems.
A paper describing our appraoch will be presented at the MMAS workshop which is being held in conjunction with AAMAS 06.

