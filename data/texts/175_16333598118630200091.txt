Discontinuity Meshing for Radiosity
Paul S. Heckbert Department of Technical Mathematics & Informatics
Delft University of Technology Julianalaan 132 2628 BL Delft Netherlands
email: ph@duticg.tudelft.nl 16 April 1992
Abstract
The radiosity method is the most popular algorithm for simulating interre ection of light between di use surfaces. Most existing radiosity algorithms employ simple meshes and piecewise constant approximations, thereby constraining the radiosity function to be constant across each polygonal element. Much more accurate simulations are possible if linear, quadratic, or higher degree approximations are used. In order to realize the potential accuracy of higher-degree approximations, however, it is necessary for the radiosity mesh to resolve discontinuities such as shadow edges in the radiosity function. A discontinuity meshing algorithm is presented that places mesh boundaries directly along discontinuities. Such algorithms o er the potential of faster, more accurate simulations. Results are shown for three-dimensional scenes.
Keywords: global illumination, di use interre ection, adaptive mesh, shadow.
1 Introduction
One of the most challenging tasks of image synthesis in computer graphics is the accurate and e cient simulation of global illumination e ects: the illumination of surfaces in a scene by other surfaces. Early rendering algorithms used a local illumination model, assuming that surfaces could be shaded independently, typically using a nite set of point light sources. Global illumination models, on the other hand, recognize the true interdependency of the shading problem: the radiance of a surface point is determined by the radiance of all the surfaces visible from that point.
Global illumination simulation is relevant to a number of scienti c and engineering elds: lighting design in architecture, shape-from-shading in computer vision, neutron transport in physics, and thermal radiation in mechanical engineering.
The visual artifacts of global illumination are familiar in the everyday world, even if they are sometimes subtle: we see penumbras or soft shadows from area light sources, color bleeding between surfaces, and indirect lighting.
From Third Eurographics Workshop on Rendering, Bristol, UK, May 1992, pp. 203-216.
1

2 Discontinuity Meshing for Radiosity
In this work, we restrict our attention to di use materials: those with a matte surface that appears equally bright from all directions. More general global illumination algorithms simulate specular, or glossy, materials and participating media such as fog and other translucent media. Because of our assumptions, light radiance is a function of wavelength and the two surface parameters only.
1.1 Previous Work
Existing techniques for simulating global illumination generally fall into two classes: ray tracing methods and radiosity methods. In general, ray tracing is best at simulating specular surfaces and radiosity is best at simulating di use surfaces.
Ray tracing simulates light transport by tracing the paths of photons through the scene in one of two directions: either from the lights into the scene or from the eye into the scene. With the addition of Monte Carlo techniques, it is possible to simulate di use interre ection Kajiya86]. This can be done e ciently by caching the slowly-varying di use component of radiance Ward et al. 88].
1.1.1 Radiosity Algorithms
Radiosity methods have their roots in the simulation of thermal radiation in mechanical engineering Sparrow63], and were extended and optimized for the simulation of complex scenes in computer graphics Cohen-Greenberg85,Cohen et al. 88]. The radiosity method subdivides the scene into elements (subsurfaces) and creates a system of equations whose solution is the radiosity (the sum of emitted and re ected radiance, integrated over a hemisphere) of each element.
Early radiosity papers devoted little attention to meshing, the subdivision of surfaces into elements. They often performed meshing in a very simple manner: using a grid of congruent rectangular or triangular elements and approximating the true radiosity function with a function that is constant over each element. We call such an approximation a uniform mesh with constant elements. Though Gouraud shading is typically used for display, linear variation in radiosity is not taken into account during form factor calculation, with a few exceptions Max-Allison92,Heckbert-Winget91]. The true radiosity function is not constant across each element, of course Tampieri-Lischinski91]. Meshes with constant elements result in jaggy shadow boundaries and other artifacts.
Better meshes can be created by user intervention, a posteriori methods, and a priori methods.
A posteriori meshing constructs a rst approximation using a coarse, uniform mesh, and then re nes the mesh where the gradient appears to be large. Re nement can be done using quadtree subdivision Cohen et al. 86]. Such methods help signi cantly, but they can miss small features (shadows of small objects), and they exhibit jagged shadow edges unless subdivision is extremely ne.
A priori meshing employs object-space techniques to predict, before solution, where shadow edges and other discontinuities will occur. A mesh is then constructed accordingly, and a solution found. Campbell's a priori meshing split the scene with planes through light source points and edges of occluding polygons, thereby approximating some shadow edges Campbell-Fussell90]. A later improvement by Campbell found the discontinuities along the boundaries of the penumbra Campbell91]. Baum split surfaces where they intersected or touched to resolve the most severe discontinuities Baum et al. 91]. Rigorous meshing of 2-D scenes has also been explored Heckbert91,Heckbert92,Lischinski et al. 91].

Discontinuity Meshing for Radiosity

3

Another meshing improvement is to vary the mesh resolution according to the range of the interaction: a ne mesh is needed for nearby elements but a coarse mesh su ces for distant elements Hanrahan et al. 91]. Hanrahan found, surprisingly, that many radiosity algorithms waste much of their time computing tiny form factors. He found that closer attention to the numerics of the simulation can sometimes result in great speedups.
1.1.2 Shadow Algorithms
Many of the techniques employed by a priori meshing were pioneered in object space shadow algorithms. The simplest shadow algorithms simulate only point light sources, computing the shadowed and unshadowed polygons using \cookie cutter" algorithms Atherton et al. 78], or binary space partitioning (BSP) trees Chin-Feiner90]. Nishita went further, computing penumbra boundaries from area light sources Nishita-Nakamae83], thereby producing some amazingly realistic pictures without simulating interre ection. Chin has recently done the same using BSP trees Chin-Feiner92].
1.2 Motivation
Current radiosity algorithms work well for some scenes: the progressive radiosity algorithm Cohen et al. 88] is relatively fast and its artifacts are often imperceptible. Sometimes, however, existing algorithms are very slow, they exhibit objectionable artifacts, and they are inaccurate.
The computational requirements for radiosity on complex scenes can be prohibitive: a scene of about 5,000 polygons (broken into 1,000,000 elements) requires about 6 CPU-days on a fast (6 mega op) computer using some of the best existing software Baum et al. 91]. By comparison, Ward's ray tracing algorithm Ward et al. 88] renders the same scene in about 2 days on a comparable machine. The relative errors of the two methods are not known, so this comparison is approximate. The fact that a di use-speci c radiosity algorithm appears to be slower than a more general ray tracing algorithm suggests that faster radiosity algorithms must exist, however.
The artifacts of radiosity algorithms are sometimes annoying: small or distant light sources such as the Sun cause blocky shadow edges and animation with moving objects su ers from severe popping as meshes change.
The nal motivation for research on improved radiosity algorithms is the increasing importance of \physically-based" modeling and rendering: for many applications, pretty pictures are less important than accurate simulations. For simulations in mechanical engineering, for example, the primary output of a radiosity program is not a picture but a set of numbers or functions.
Hanrahan's results suggest that current radiosity methods may be much more brute force than necessary. He achieved great speedups for some scenes by improving the form factor computation algorithm perhaps similar speedups are possible by better adaptive meshing.
1.3 Lessons from Two Dimensions
A thorough study of radiosity in a two-dimensional \ atland" world was made in order to better understand radiosity functions and the radiosity methods that approximate them Heckbert91,Heckbert92].
Radiosity functions were shown to have discontinuities of value (degree 0 discontinuities) at touching surfaces, intersections, creases, and along shadow edges from point light sources

4 Discontinuity Meshing for Radiosity

p1 p2

uniform constant uniform Gouraud uniform linear
1

discontinuity-meshed constant discontinuity-meshed Gouraud discontinuity-meshed linear

.1

a
a2' a1' radiosity

b b2' b1'

c c1',c2'

.01 .001

error

a2' a1'

b2' b1'

c1',c2'

.0001 s .0001

.001 .01
element size (h)

.1

1

Figure 1: Degree 1 and degree 0 disconti- Figure 2: Log-log plot of element size nuities caused by linear light source at top vs. error for six di erent solution methods. (edge p1-p2) illuminating an occluded edge Note that discontinuity meshing with linear at bottom (edge a-b). Degree 1 discontinu- elements is far more accurate than the other ities delimit the penumbras at a2', a1', b2', methods, and that Gouraud elements are litand b1'. Degree 0 discontinuity at the hard tle better than constant elements. shadow edge c1'.

and rst derivative (degree 1) discontinuities along shadow edges from linear light sources ( gure 1). Radiosity algorithms employing uniform meshes were found to be inaccurate because they failed to resolve these discontinuities their meshes prevented the discontinuities from being represented by the approximation.
An a priori adaptive meshing technique called discontinuity meshing was introduced that predicts the locations of discontinuities and places mesh boundaries at those points. Figure 2 shows a plot of error versus element size in a simple test scene for six di erent solution algorithms, formed by taking combinations of one of the two meshing techniques, uniform meshing or discontinuity meshing, and one of three element types.
The three element types used were constant elements (box basis), linear elements (hat basis), and what we call Gouraud elements. Gouraud elements are constant elements for form factor calculation, followed by linear interpolation for the `display' step. We call them Gouraud elements by analogy with the computer graphics shading technique. Gouraud elements are the most commonly used approximation technique in existing radiosity algorithms. The error estimate here is an objective one: the square root of the integral of the squared di erence between the approximation and a reference solution (obtained using an extremely ne mesh). Qualitatively similar plots result for other scenes in which occlusion occurs.
The results show that constant and Gouraud elements have nearly the same (low) accuracy. Convergence with decreasing element size is faster with linear elements than with

Discontinuity Meshing for Radiosity

5

constant or Gouraud elements, and convergence rate is highly dependent on discontinuities. Without discontinuity meshing, solution with any of the three element types converges slowly, but with discontinuity meshing, convergence can be relatively fast. Discontinuity meshing with linear elements gives results over 10 times more accurate on ne meshes, in these experiments.
The use of constant elements during problem formulation and solution followed by Gouraud interpolation for display gives results that are objectively no more accurate than the use of constant elements throughout (though they may look better).
Timing tests showed that, for these scenes, discontinuity meshing and linear elements are cost-e ective they gave the best accuracy for a given amount of total CPU time, and the fastest results at a given accuracy. In one test run, discontinuity meshing with linear elements gave results of the same quality as uniform meshing using about 1/60th the total time and 1/60th the memory.
The principal lesson of the 2-D research is that discontinuity meshing and higher degree elements can increase the accuracy and/or speed of radiosity algorithms, but the techniques should be used together. Neither technique, by itself, gives sig-
ni cantly better results than standard methods. The use of higher degree elements in 3-D is straightforward, if no discontinuity meshing
is done. In fact, it is possible to compute the form factors for linear element radiosity using a variant of the hemicube algorithm Max-Allison92]. Since discontinuity meshing seems much more challenging than the use of higher degree elements, we devote the bulk of our attention to discontinuity meshing.

2 Discontinuity Meshing in 3-D
Discontinuity meshing is an approach to meshing that attempts to accurately resolve the most signi cant discontinuities in the solution by optimal positioning of element boundaries. For the two-dimensional elements of 3-D radiosity, element boundaries are curves.
2.1 Visibility
Discontinuities in the radiosity solution are caused by changes in visibility called events. Changes in visibility occur along critical surfaces, and potential discontinuities occur along critical curves where these surfaces intersect the faces (polygons) of the scene. For a scene of polygons, there are two types of events: vertex-edge (VE) events and edge-edge-edge (EEE) events Gigus-Malik90].
VE events result from an inter-visible vertex v and edge e. The critical surface for this event is a subset of the plane containing the vertex and the edge. More precisely, it is the set of points collinear with vertex v and a point p of edge e, that are not between v and p. We call this surface a wedge ( gure 3). The critical curves caused by a VE event are line segments they are the points of the intersection of the wedge with the faces of the scene that are visible to v and p.
EEE events result from three inter-visible, skew edges ( gure 4). The critical surface is the set of points simultaneously collinear with one point from each edge but not between any two of these three points. This surface is a subset of a quadric Gigus-Malik90]. The critical curves caused by an EEE event are conic segments they are the face points on the critical surface that are visible to the three edge points on the line.

6 Discontinuity Meshing for Radiosity

ve

Figure 3: The wedge de ned by vertex v Figure 4: EEE event caused by three skew

and edge e.

edges at right creates a quadric critical sur-

face and a conic critical curve on face at

left.

emitter occluder
receiver

umbra penumbra
Figure 5: Discontinuities caused by a triangular emitter, rectangular occluder, and receiver in parallel planes (after NishitaNakamae83]).

D2 discontinuity curves

D1 discontinuity curve

Figure 6: Discontinuities from a triangular emitter and rectangular occluder, for three di erent rotations of the emitter. When edges of emitter and occluder become coplanar, two degree 2 discontinuity curves coincide, yielding a degree 1 discontinuity.

2.2 Discontinuities
Touching or intersecting surfaces usually yield degree 0 discontinuities along their common curve. Shadow edges from point, linear, and area light sources are in general of degree 0, 1, and 2, respectively, but when two discontinuities coincide, the degree of the discontinuity can decrease Heckbert91]. The lowest degree discontinuities generally cause the greatest error, if not resolved by an approximation.
Many of the characteristics of VE discontinuities are shown in gure 5. A top view of these discontinuities is shown in gure 6. When rotation of the occluder in its plane causes an edge of the emitter and an edge of the occluder to become coplanar, two degree 2 discontinuity curves coincide, yielding a degree 1 discontinuity.1
1This can be observed empirically by holding a sti piece of paper horizontally below a rectangular lamp xture and a few inches above a white tabletop. Rotate the piece of paper in its plane, and observe the

Discontinuity Meshing for Radiosity

7

The number of VE critical surfaces is O(m2) worst case, and the number of EEE critical surfaces is O(m3) worst case, for a scene of m faces. These give the upper bounds of O(m3) VE critical curves and O(m4) EEE critical curves, respectively, since each critical surface can intersect at most m faces. These may not be least upper bounds. They are pessimistic for practical scenes, which often have parallel (and therefore coplanar) edges leading to many coincident critical surfaces and a far lower number of critical curves.
The vast majority of discontinuities are imperceptible. The most signi cant discontinuities are what we perceive as shadows the least signi cant ones result from changes in visibility with respect to non-emitting surfaces. Except in special circumstances (e.g. moonshadows), shadows from secondary light sources are negligible.
Earlier adaptive meshing schemes have resolved some of the discontinuities in radiosity solutions. Baum's system resolved the degree 0 discontinuities from touching or intersecting surfaces, but not degree 0 discontinuities from point light sources, or degree 1 or 2 discontinuities. As mentioned previously, the meshes in Campbell-Fussell90] approximately resolved some discontinuities. Campbell's more recent algorithm, Campbell91], resolves the discontinuities along the boundaries of the penumbra, but not the discontinuities within the penumbra.
2.3 Discontinuity Meshing Algorithm
Discontinuity meshing can be done in a three phase process: rst, critical curves are found and stored with the faces on which they lie, then a mesh that follows the critical lines is created for each face, and nally, basis functions are chosen for the elements. Critical curves are accumulated in a linked list of line segments kept with each face in the scene. The degree of the expected discontinuity is stored with each critical curve. to aid the choice of basis functions later.
There are three classes of critical curves to be generated: those due to touching or intersecting surfaces, VE critical lines, and EEE critical curves. We discuss VE lines in this paper. EEE curves are more di cult to handle Teller92]. Baum discussed touching and intersecting surfaces in Baum et al. 91].
Figure 5 suggests an algorithm for determining all VE critical line segments. Half of the critical segments can be generated by projecting the occluders from each of the vertices of the emitter onto each of the other faces in the scene. The other half of the critical segments are generated by projecting the emitter from each of the vertices of the occluders onto each of the faces in the scene. (When we say \emitter" here, it could mean a secondary light source). In Campbell-Fussell90], the rst half of these segments are approximated, but not the second half.
For each triplet of emitter, occluder, and receiver leading to a discontinuity that is deemed to be signi cant, we nd the VE wedge de ned by a vertex of the emitter and an edge of the occluder, and the VE wedge from a vertex of the occluder and an edge of the emitter, determine the unoccluded portions of these wedges ( gure 7), and compute the critical line segments of their intersection with the receiver.
To process each wedge, the line segments of intersection between the wedge plane and each polygon are found, and then a 2-D object-space visible edge algorithm is used to determine the edges visible from the point of view of the vertex. The algorithm used here is a 2-D variant of the Weiler-Atherton visible surface algorithm Atherton et al. 78] that
increased crispness of the shadows when edges of the paper are parallel to edges of the light source. The radiance function has degree 1 discontinuities at parallel orientations, but degree 2 otherwise.

8 Discontinuity Meshing for Radiosity

ve

e v

Figure 7: Critical line segments due to vertex v and edge e shown bold.

Figure 8: Visible edge determination in the plane of the wedge. The visible portions of the line segments of intersection between the wedge and the faces in scene are the critical line segments.

Figure 9: Left: node and link data structure for critical lines. Right: topological data structure for the planar subdivision. maintains a linked list of unoccluded intervals, from which the intersection line segments are subtracted in front to back order ( gure 8).
Once all of the critical line segments have been computed, a mesh for each face must be generated that subdivides along the critical line segments. These meshes are signi cantly more complex than the uniform grids or quadtrees employed in early radiosity algorithms. Therefore, a data structure supporting arbitrary planar subdivisions is recommended. The data structure should allow holes, concave polygons, faces with any number of sides, vertices of arbitrary degree, ordering of edges and faces around a vertex, and fast access to adjacent objects. An extended winged edge data structure was used here Baumgart74]. BSP trees could also be used to represent the arrangement of critical lines on each face, but they split polygons unnecessarily, constraining the space of meshes, and lead to poorer quality meshes. Campbell employed BSP trees in his work Campbell-Fussell90,Campbell91], and went to great lengths to minimize excessive subdivision.
The mesh is created in a three step process. First, a node-and-link data structure is created representing the endpoints of the critical lines and their adjacency graph ( gure 9, left).
Next, the topology of the arrangement of critical line segments is computed by nding all

Discontinuity Meshing for Radiosity

9

Figure 10: Critical lines of test Figure 11: Triangle mesh resulting scene. from discontinuity meshing. Note
that it follows all of the critical lines.
intersections between critical lines, and subdividing the polygon into regions of homogeneous visibility bounded by critical lines or edges of the original polygon ( gure 9, right). This is done with a 2-D sweepline algorithm similar to a polygon clipping algorithm Weiler80]. This step creates a winged edge data structure. As the sweepline passes across each vertex or intersection point, the order of the emanating edges is found by a radial sort of the geometry. This ordering determines the local topology, which is used to update the winged edge data structure.
At this point, the topology and geometry of the arrangement of critical line segments is known, but the subdivision may be unsuitable for nite element radiosity purposes: faces of this subdivision can be concave, with holes. The nal step subdivides these regions according to a user-selected maximum element size ( gures 10 and 11). Delaunay triangulation and mesh relaxation were used here Boender92], but it appears that there is considerable exibility in this last step.
Once the mesh is constructed, basis functions are chosen for each element. If constant elements are used, then each element has one degree of freedom, and all elements are independent. If linear elements are used, then most vertices will contribute one degree of freedom, but vertices along critical lines can contribute two or more degrees of freedom depending on the discontinuity. Discontinuities in a nite element mesh are analogous to continuity constraints in a parametric curve or surface: basis functions should be selected so that the approximation function is Cd;1 across a degree d critical curve. Each degree of freedom in the nite element mesh corresponds to a radiosity coe cient in the system of equations. To discuss the few remaining steps, we must review the generalization of radiosity methods to arbitrary basis functions.
2.4 Finite Element Methods for Radiosity
There are a variety of nite element methods for solving the integral equation governing radiosity Heckbert-Winget91].
Figure 12 shows some of the available options for radiosity simulation using a nite

10 Discontinuity Meshing for Radiosity

uniform constant

integral equation problem

uniform linear

integral equation

collocation

approximation

problem

adaptive linear

Galerkin

analytic

integration problem

hemicube ray tracing

Gauss-Seidel
linear successive system overrelaxation
progressive

discrete solution

z-buffer ray tracing

MESH & BASIS

CONSTRAIN

INTEGRATE

SOLVE

DISPLAY

Figure 12: Steps of nite element simulation of radiosity.

picture

element approach: one much choose a mesh and basis functions, constraint and integration methods to reduce the problem to a linear system of equations, a system solution method, and a display algorithm. For general references on nite element methods and integral equations, see the texts Becker et al. 81] and Delves-Mohamed85], respectively.
ZRadiosity obeys the integral equation Heckbert-Winget91,Kajiya86]: b(x) = e(x) + dx0 (x x0)b(x0) ; where b(x) denotes the radiosity at 3-D point x, e(x) is radiant emitted ux density, and ;
is the two-dimensional domain of all surfaces in the scene. The kernel of the integral equation is

(x x0) =

h(x) cos

cos r2

0v

wx,he0reisxt0hies

another angle at

xsu0,rfracise

point, h(x)
the distance

biesttwheeenhexmaisnpdhxer0,icaanl drev,etchtaenvcies,ibiliistythfuenacntigolne,

at is

1 if points x and x0 are inter-visible 0 if occluded. , 0, v, and r are functions of x and x0.

To solve this integral equation numerically, the exact solution b(x) is approximated by

a linear combination of basis functions:
X^b(x) = n biWi(x)

i=1

where bi are the unknown coe cients and Wi are the basis functions. The collocation method for approximation, which most current radiosity algorithms
employ, yields the following system of equations:

(M ; K)b = e

where M and K are n n matrices and b and e are n-element column vectors:

ZMij = Wj(xi)

Kij =

dx0
;

(xi x0)Wj(x0)

ei = e(xi)

where xi, the collocation points, are typically the centers or vertices of the elements. The
\form factors" here are the same as those of standard radiosity algorithms, except for the non-constant basis functions.
The most di cult factor in these integrations is the visibility function v, but this can be evaluated using a hemicube Cohen-Greenberg85] or ray tracing. Hemicube algorithms can be generalized to evaluate linear basis functions using Gouraud shading Max-Allison92].

Discontinuity Meshing for Radiosity

11

A variety of system solution methods can be used, as indicated in gure 12, including generic methods such as Gauss-Seidel iteration, its faster variant successive overrelaxation, or specialized methods such as progressive radiosity. Display can be done using z-bu er algorithms or ray tracing, similar to integration.
2.5 Results
To test these ideas, a simple matrix radiosity program using ray traced form factors was modi ed. A matrix radiosity algorithm was used, rather than a progressive radiosity algorithm, so that the errors of progressive radiosity would not mask the errors introduced by the mesh. The linear system was solved by successive overrelaxation, a faster variant of Gauss-Seidel iteration Golub-Van Loan89]. The program was written in C. The original small and simplistic uniform meshing module of about 150 lines of code was replaced by a much larger, more sophisticated discontinuity meshing module of about 8000 lines. (Baum's a posteriori adaptive mesh code was of similar size.) The modi cations to the rest of the program were minor. Only constant and Gouraud elements have been implemented to date.
Figure 13 shows the shadow of a touching occluder simulated with uniform meshing and discontinuity meshing. The latter resolves the discontinuities much more accurately. These pictures were made with Gouraud elements, which probably accounts for the rough approximation of the shadows on the right. Much more accurate results could be expected with linear, quadratic, or higher degree elements in combination with discontinuity meshing.
Figure 14 (top row), shows the shadow of a triangle from a square light source. Note that the uniform mesh solution is quite blocky, while the discontinuity mesh solution is much smoother, exhibiting major discontinuities only where they really exist. Figure 11 shows the arrangement of critical lines and the mesh used for this approximation. Relative to the uniform mesh solution, discontinuity meshing used one fourth the number of elements (it used 112) and half the CPU time. If a posteriori quadtree adaptive meshing to this level were used, the number of elements and CPU time could be reduced, but the blocky artifacts would still remain.
Note that the elements now follow the shadow edges, and the approximation resolves the discontinuities in the true solution function more accurately. Because the mesh follows the discontinuities precisely, the error of the solution in the vicinity of the discontinuity is much reduced.
Figure 14 (bottom row), shows shadows from a distant light source (which is for all practical purposes a point light source). Uniform meshing results in an extremely blocky approximation, even with Gouraud shading, but discontinuity meshing resolves the degree 0 shadow edge exactly. Uniform meshing used 1600 elements, while discontinuity meshing used only 60. Consequently, for this simulation, uniform meshing solves a 1600 1600 system of equations, while discontinuity meshing solves a 60 60 system.
3 Conclusions and Ideas for Further Study
This work is an important step toward more rigorous treatment of radiance discontinuities in 3-D scenes. The algorithms described here should help to minimize the errors of radiosity solutions due to poor meshing. Such errors have heretofore been great.
We have shown that it is possible to nd discontinuities in 3-D scenes and create a mesh that resolves the discontinuities. Such meshes o er the potential for faster and/or more accurate radiosity simulations. Although discontinuity meshing and higher degree elements are more complex than more brute force methods, they can pay o because they allow a

12 Discontinuity Meshing for Radiosity

much coarser mesh to be used. The approach followed here allows very accurate solutions to be explored. Alternative approaches using progressive radiosity and BSP trees appear to be easier to implement Campbell91,Chin-Feiner92], but the accuracy of their results has not yet been demonstrated.
Although there are many discontinuities in most scenes, most of them are insigni cant, so it is likely that discontinuity meshing can be practical for complex scenes. Experiments are needed to discover good measures of discontinuity signi cance. The application of faster computational geometry algorithms could help as well.
Further experiments are needed to test the accuracy and speed of linear, quadratic, and higher degree elements. EEE critical curves should be treated. Finally, a thorough series of experiments should be performed to determine the error due to each phase of the radiosity algorithm.

4 Acknowledgements

Jim Winget and Keith Miller contributed many ideas to my global illumination work at UC Berkeley. In Delft, Erik Jansen has been host to my postdoctoral fellowship, Frits Post helped me get access to a computer during Christmas week, and Edwin Boender wrote the triangulation code.

References
Atherton et al. 78]
Baum et al. 91]
Baumgart74] Becker et al. 81] Boender92] Campbell91] Campbell-Fussell90]
Chin-Feiner90] Chin-Feiner92]
Cohen et al. 86]
Cohen et al. 88]

Peter R. Atherton, Kevin Weiler, and Donald P. Greenberg. Polygon shadow generation. Computer Graphics (SIGGRAPH '78 Proceedings), 12(3):275{281, Aug. 1978. Daniel R. Baum, Stephen Mann, Kevin P. Smith, and James M. Winget. Making radiosity usable: Automatic preprocessing and meshing techniques for the generation of accurate radiosity solutions. Computer Graphics (SIGGRAPH '91 Proceedings), 25(4):51{60, July 1991. Bruce G. Baumgart. Geometric Modeling for Computer Vision. PhD thesis, CS Dept, Stanford U., Oct. 1974. AIM-249, STAN-CS-74-463. Eric B. Becker, Graham F. Cary, and J. Tinsley Oden. Finite Elements: An Introduction, volume 1. Prentice-Hall, Englewood Cli s, NJ, 1981. Edwin Boender. Finite Element Mesh Generation from CSG Models. PhD thesis, Dept. of Technical Math. & Informatics, Delft U. of Tech., Netherlands, Sept. 1992. A. T. Campbell, III. Modeling Global Di use Illumination for Image Synthesis. PhD thesis, CS Dept, University of Texas at Austin, Dec. 1991. Tech. Report TR-91-39. A. T. Campbell, III and Donald S. Fussell. Adaptive mesh generation for global di use illumination. Computer Graphics (SIGGRAPH '90 Proceedings), 24(4):155{ 164, Aug. 1990. Norman Chin and Steven Feiner. Near real-time shadow generation using BSP trees. Computer Graphics (SIGGRAPH '90 Proceedings), 24(4):99{106, Aug. 1990. Norman Chin and Steven Feiner. Fast object-precision shadow generation for area light sources using BSP trees. In 1992 Symp. on Interactive 3D Graphics, Mar. 1992. Michael F. Cohen, Donald P. Greenberg, David S. Immel, and Philip J. Brock. An e cient radiosity approach for realistic image synthesis. IEEE Computer Graphics and Applications, pages 26{35, Mar. 1986. Michael F. Cohen, Shenchang Eric Chen, John R. Wallace, and Donald P. Greenberg. A progressive re nement approach to fast radiosity image generation. Computer Graphics (SIGGRAPH '88 Proceedings), 22(4):75{84, Aug. 1988.

Discontinuity Meshing for Radiosity

13

Cohen-Greenberg85] Michael F. Cohen and Donald P. Greenberg. The hemi-cube: A radiosity solution for complex environments. Computer Graphics (SIGGRAPH '85 Proceedings), 19(3):31{40, July 1985.

Delves-Mohamed85] L. M. Delves and J. L. Mohamed. Computational methods for integral equations. Cambridge University Press, Cambridge, U.K., 1985.

Gigus-Malik90]

Ziv Gigus and Jitendra Malik. Computing the aspect graph for line drawings of polyhedral objects. IEEE Trans. on Pattern Analysis and Machine Intelligence, 12(2):113{122, Feb. 1990.

Golub-Van Loan89] Gene H. Golub and Charles F. Van Loan. Matrix Computations. Johns Hopkins University Press, Baltimore, MD, 1989.

Hanrahan et al. 91] Pat Hanrahan, David Salzman, and Larry Aupperle. A rapid hierarchical radiosity algorithm. Computer Graphics (SIGGRAPH '91 Proceedings), 25(4):197{206, July 1991.

Heckbert91]

Paul S. Heckbert. Simulating Global Illumination Using Adaptive Meshing. PhD thesis, CS Division, UC Berkeley, June 1991. Tech. Report UCB/CSD 91/636.

Heckbert92]

Paul S. Heckbert. Radiosity in atland. Computer Graphics Forum, 11(3):181{192, 464, Sept. 1992.

Heckbert-Winget91] Paul S. Heckbert and James M. Winget. Finite element methods for global illumination. Technical report, CS Division, UC Berkeley, July 1991. UCB/CSD 91/643.

Kajiya86]

James T. Kajiya. The rendering equation. Computer Graphics (SIGGRAPH '86 Proceedings), 20(4):143{150, Aug. 1986.

Lischinski et al. 91] Dani Lischinski, Filippo Tampieri, and Donald P. Greenberg. Improving sampling and reconstruction techniques for radiosity. Technical report, CS Dept., Cornell U., Aug. 1991. TR 91-1202.

Max-Allison92]

Nelson L. Max and Michael J. Allison. Linear radiosity approximation using vertexto-vertex form factors. In David Kirk, editor, Graphics Gems III, pages 318{323. Academic Press, 1992.

Nishita-Nakamae83] Tomoyuki Nishita and Eihachiro Nakamae. Half-tone representation of 3-D objects illuminated by area sources or polyhedron sources. In COMPSAC '83, Proc. IEEE 7th Intl. Comp. Soft. and Applications Conf., pages 237{242, Nov. 1983.

Sparrow63]

Ephraim M. Sparrow. On the calculation of radiant interchange between surfaces. In Warren Ibele, editor, Modern Developments in Heat Transfer, New York, 1963. Academic Press.

Tampieri-Lischinski91] Filippo Tampieri and Dani Lischinski. The constant radiosity assumption syndrome. In Second Eurographics Workshop on Rendering, Barcelona, Spain, May 1991.

Teller92]

Seth J. Teller. Computing the antipenumbra of an area light source. Computer Graphics (SIGGRAPH '92 Proceedings), 26(2):139{148, July 1992.

Ward et al. 88]

Gregory J. Ward, Francis M. Rubinstein, and Robert D. Clear. A ray tracing solution for di use interre ection. Computer Graphics (SIGGRAPH '88 Proceedings), 22(4):85{92, Aug. 1988.

Weiler80]

Kevin Weiler. Polygon comparison using a graph representation. Computer Graphics (SIGGRAPH '80 Proceedings), 14(3):10{18, July 1980.

14 Discontinuity Meshing for Radiosity
Figure 13: Shadow of a nearly touching occluder. Left: uniform mesh solution, right: discontinuity mesh solution. Uniform meshing leads to a \light leak" under the triangle, while discontinuity meshing does not. Both solutions use Gouraud elements. Figure 14: Four pictures on left: shadow of a triangle. Top row: shadow of a triangle from a nearby square light source, bottom row: shadow of a triangle from a distant light source. Left column: uniform mesh solution, right column: discontinuity mesh solution. Picture on right: Demonstration of di use interre ection. Critical lines shown in red, sight lines connecting vertices in blue.

