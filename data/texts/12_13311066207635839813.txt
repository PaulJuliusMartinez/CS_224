Instanced
Instanced
Tessellation
Tessellation
in DirectX10

Andrei Tatarinov
Andrei Tatarinov
NVIDIA Developer Technology
February 2008

O tliOutline

(cid:33) Motivation

(cid:33) Tessellation basics

(cid:33) Future tessellation model
(cid:33) Future tessellation model

(cid:33) Instanced tessellation

(cid:33) Computing tessellation factors

(cid:33) Conclusions

C

l

i

Motivation 
behind 
tessellation
tessellation

Why do we need 
Why do we need 
tessellation?

(cid:33) To improve visual quality

(cid:33) Can add a lot of high-frequency detail
(cid:33) Can add a lot of high frequency detail

(cid:33) To improve rendering performance

(cid:33) Saves memory and bandwidth

(cid:33) Lower computation frequency of animation/skinning 

(cid:33) Natural scalability (LOD)

Increasing the number of 
Increasing the number of 
primitives
(cid:33) Makes models look more realistic

Increasing the number of 
Increasing the number of 
primitives
(cid:33) Complex shading can’t hide lack of detail
(cid:33) Complex shading can t hide lack of detail

© Mike Asquith, Valve Corporation 2007

Increasing the number of 
Increasing the number of 
primitives

© Mike Asquith, Valve Corporation 2007

Saving memory and 
Saving memory and 
bandwidth

(cid:33) High-detailed mesh can be represented with a 

coarse mesh and a displacement map
coarse mesh and a displacement map

(cid:33) ALU performance scales faster than bandwidth

=

+

Animation

(cid:33) Complex animation (morph targets  blend 
(cid:33) Complex animation (morph targets, blend 

shapes) can be done on coarse rep

Animation

Frame N

Frame N+1

Animation

Tessellation
Tessellation

Tessellation
Tessellation

Scalabilityy

C
Conclusions

l

i

(cid:33) Outstanding visual improvement
t

O t t di

  i

l i

(cid:33) More details, more primitives

(cid:33) Efficient rendering

(cid:33) Saves memory and bandwidth

(cid:33) Animation at lower rate

(cid:33) Scalabilityy

Tessellation 
basics

T
t
Tessellation concept

ll ti

 

(cid:33) A new primitive called patch

(cid:33) Patch is defined by a set of control points

(cid:33) A new type of operation called refinement

(cid:33) Generate a number of triangles from a patch

g

p

Transforming control 
Transforming control 
points
(cid:33) Animation can be performed at a lower rate

Transforming
control points

P
Per-patch operations

t h 

ti

(cid:33) LoD computation

(cid:33) Transformation to 
at o to

a s o

another basis

(cid:33) Bezier  > B spline
(cid:33) Bezier -> B-spline

(cid:33) B-spline -> NURBS

(cid:33) etc.

t

G
Generating topology

 t

ti

l

(cid:33) Generate a set of 
(u,v)-points in the 
tessellation domain

(0, 1)

(1, 1)

(0, 0)

(1, 0)

E l
i t
Evaluating points

ti

 

(0, 1)

(1, 1)

(x, y, z)

(u, v)

(0, 0)

(1, 0)

Evaluation

Future
tessellation
model
model

T
Tessellation pipeline

ll ti

  i

li

(cid:33) New input primitive  patch
(cid:33) New input primitive - patch

(cid:33) Two new shader stages:

(cid:33) Patch Shader

(cid:33) Evaluation Shader

(cid:33) One fixed function stage:

(cid:33) Tessellator
(cid:33) Tessellator

Input 

Assembler
Vertex 
Shader

Patch Shader

Tessellator

Evaluation

Shader

Geometry 

Shader

Setup/Raster

P t h  h d
Patch shader

(cid:33) Edge LODs computations
(cid:33) Edge LODs computations

(cid:33) Basis conversion for easier 

evaluation

Input 

Assembler
Vertex 
Shader

Patch Shader

Tessellator

Evaluation 

Shader
Geometry 
Geometry 

Shader

Setup/Raster

ll t

T
Tessellator
ed u ct o stage, but
(cid:33) Fixed function stage, but 

configurable

(cid:33) Generates UV coordinates in the 
 i  th  

 UV 

t

t

di
G
tessellation domain

V

Input 

Assembler
Vertex 
Shader

Patch Shader

Tessellator

Evaluation 

Shader
Geometry 
Geometry 

Shader

Setup/Raster

U

E l
Evaluation shader

  h d

ti

(cid:33) Evaluates surface given 
(cid:33) Evaluates surface given 

parametric UV coordinates

(cid:33) Sees all control points for a patch

(cid:33) Applies displacement mapping, 

space transformations, etc.

Input 

Assembler
Vertex 
Shader

Patch Shader

Tessellator

Evaluation 

Shader
Geometry 
Geometry 

Shader

Setup/Raster

Instanced 
tessellation

N t G  
t t d !
Next Gen content today!

t

(cid:33) We can approximate the tessellation pipeline 
 

t  th  t

ll ti

  i

 

W  
with DirectX 10 API

i

li

(cid:33) Instancing can be used to replicate patches

GS i  
GS is not for tessellation
(cid:33) GS outputs triangles serially
(cid:33) GS outputs triangles serially

ll ti

t f

 t

GS

Thread 

1
1

Thread 

2
2

Thread 

3
3

Thread 

4
4

…

Thread 

n
n

GS i  
GS is not for tessellation

ll ti

t f

 t

(cid:33) Limited output size (maximum 1024 scalars) 

is not always enough

(cid:33) If each vertex is 4 float’s, you can only tessellate up 

to 16x16

U  i
t d
Use instancing instead

 i

t

i

(cid:33) Render pretessellated patch with instancing
(cid:33) Render pretessellated patch with instancing

(cid:33) Set the entire mesh as instance data

V

U

t d
Use instancing instead
U  i
(cid:33) Render pretessellated patch with instance count 

 i
p

i

t

p

equal to patch count in the mesh

Patch data
Patch data

Patch 0
Patch 0

Patch 1
Patch 1

Patch 2
Patch 2

Patch 3
Patch 3

   
. . .

Patch n
Patch n

Instancing
Instancing

t

i

t d
Use instancing instead
U  i
(cid:33) Pretessellated patch represents results of 
(cid:33) Pretessellated patch represents results of 

 i

tessellating every input patch

x

=

t

i

t d
Use instancing instead
U  i
(cid:33) Compute refined vertex position in the vertex 
(cid:33) Compute refined vertex position in the vertex 

 i

shader using chosen evaluation algorithm

Instanced 
tessellation

I
Input attributes limitation

t  tt ib t

 li

it ti

(cid:33) Maximum VS input size is not enough to fit 

all data required for point evaluation

(cid:33) Instead all data can be stored in buffers 

bound as shader resources
bound as shader resources

(cid:33) Use Load() instruction to fetch this data

 L d()
Using Load()
U i
(cid:33) Store mesh data in vertex buffers
(cid:33) Bind these buffers as shader resources

l 

C t
i t
Control points
Patch 1
Patch 0

Tangents
Patch 0

Patch 1

Bitangents
P t h 0
Patch 0

P t h 1
Patch 1

Patch 2

Patch 3

. . .

Patch n

Patch 2

Patch 3

. . .

Patch n

P t h 2
Patch 2

P t h 3
Patch 3

   
. . .

P t h 
Patch n

Texture coordinates
Patch 0

Patch 1

Patch 2

Patch 3

. . .

Patch n

Load() and InstanceID
Load() and InstanceID

(cid:33) Use SV InstanceID as an index to the patch 
(cid:33) Use SV_InstanceID as an index to the patch 

buffer

SV_InstanceID

Load( InstanceID )

Compute vertex 

position

Patch

0
1
2
3
44
. . .
n
n

Computing U and V coords
Computing U and V coords

(cid:33) Use SV VertexID to compute U and V coordinates 
(cid:33) Use SV_VertexID to compute U and V coordinates 

for the current vertex

SV VertexID
SV_VertexID

U = VertexID mod LoD
V = VertexID div LoD 
V = VertexID div LoD 

Compute vertex 

position

(cid:33) SV_VertexID and SV_InstanceID is the only VS 

input

A li
Application integration

 i t

ti

ti

(cid:33) Without 

tessellation

(cid:33) With tessellation

Bind_mesh_vertex_buffer();

Bind_mesh_vertex_buffer_SRV();

Bind_VS();
_ ();
Bind_PS();

Bind_tessellation_VS();
();
Bind_PS();

Draw ( primitives_count );

Draw_instanced 

( primitives_count,
( p
,

refined_vertex_count );

R
t
Results of refinement

lt   f 

fi

(cid:33) Before
(cid:33) Before

(cid:33) After
(cid:33) After

R
t
Results of refinement

lt   f 

fi

(cid:33) Before
(cid:33) Before

(cid:33) After
(cid:33) After

TiTips

(cid:33) Pack all data in float4-buffers to use Load() 
 L d() 

t4 b ff

P k  ll d t  i  fl
more efficiently

 t  

(cid:33) Use 2n x 2n tessellation and bitwise 

operations to compute U and V from 
p
Vertex_ID

p

(cid:33) Integer division is slow!
(cid:33) Integer division is slow!

Addi
t
Adding displacement

 di

l

(cid:33) Can add true per-

vertex displacement for 
vertex displacement for 
the refined mesh

Addi
t
Adding displacement

 di

l

(cid:33) Use vertex texture fetch from a height map 
 

U  
to add higher frequency details

   h i ht 

 f t h f

t

 t

t

(cid:33) Diffuse map

(cid:33) Height map

Addi
t
Adding displacement

 di

l

(cid:33) Original model

(cid:33) Displaced model

© Mike Asquith, Valve Corporation 2007

p

Computing 
g
tessellation
tessellation 
factors
factors

Wh  d  
d L D?
Why do we need LoD?

 

(cid:33) Tessellation naturally supports dynamic LoD

(cid:33) Allows to scale the number of primitives with 

distance or object size

(cid:33) Makes rendering more efficient
(cid:33) Makes rendering more efficient

L D  d i
LoD and instancing

t

i

(cid:33) Patches can use different tessellation factors

(cid:33) To match triangle sizes to pixels on a screen

(cid:33) To prevent aliasing

(cid:33) This is a problem, since in instancing we can 

p

,

g

use only one mesh which represents one 
particular tessellation factor
particular tessellation factor

Computing tessellation 
Computing tessellation 
factors
(cid:33) Adjacent patches must agree on tessellation 

factor

(cid:33) Otherwise cracks can appear

ll ti

t
 
tessellation 
factor = 1

tessellation 
factor = 2

Computing tessellation 
Computing tessellation 
factors
(cid:33) We can compute tessellation factors per edge
 

W  

ll ti

t  t

 f

t

 

  d

(cid:33) Adjacent patches will have the same factors at 

shared edges

(cid:33) Patch tessellation factor is maximum of it’s edge 

factors

tessellation 
factor = 2

tessellation 
factor = 1

tessellation 
factor = 4

tessellation 
factor = 4

Computing tessellation 
Computing tessellation 
factors
(cid:33) Vertices can be moved to accommodate new 
 
 

d t  

d t  

V ti
tessellation factors

 b  

tessFactor = 2

tessFactor = 1

tessFactor = 4

tessFactor = 4

Computing tessellation 
Computing tessellation 
factors
(cid:33) Vertices can be moved to accommodate new 
 
 

d t  

d t  

V ti
tessellation factors

 b  

tessFactor = 2

tessFactor = 1

tessFactor = 4

tessFactor = 4

Computing tessellation 
Computing tessellation 
factors
(cid:33) Use different metrics for tessellation factors

(cid:33) Distance

(cid:33) Screen projection size

(cid:33) Curvature

Computing tessellation 
Computing tessellation 
factors
(cid:33) Add an extra stream-out pass which outputs 

four factor values per patch

Patches

LoD computation

Patches
Patches

LoD data
LoD data

Instanced
Instanced
tessellation

T
Tessellation factors usage

ll ti

 

 f

t

(cid:33) Per-object factor – one tessellation factor 

applied to the whole object

(cid:33) Per-patch factor – tessellation factors change 

across the mesh
across the mesh

P
Per-object factor

t f

bj

t

(cid:33) Useful when applied to small objects and characters
(cid:33) Useful when applied to small objects and characters

(cid:33) Use a set of pretessellated patches with different factors

Factor = 1

Factor = 2

Factor = 4

(cid:33) Use a selected metric to find a tessellation factor and 

the appropriate patch
the appropriate patch

P
Per-object factor

t f

bj

t

P
Per-patch factor

t h f

t

(cid:33) Can’t use per-object factors for large meshes, such as 

landscapes

C
Computing patch factors

t h f

t

ti

 

(cid:33) Patch tessellation factor is a maximum of edge factors
(cid:33) Patch tessellation factor is a maximum of edge factors

Edge factors

Patch factor

1
1
2
1
1
4
1
1
2

2
2
2
1
1
4
1
1
4

2
2
1
1
1
2
1
1
4

2
2
2
1
1
1
1
1
2

Max( edgeFactors )

2
2
2
1
1
4
1
1
4

P
Per-patch factor

t h f

t

(cid:33) Make several instanced drawcalls – one for each factor
(cid:33) Make several instanced drawcalls
one for each factor

Patch

Factor

0
0
1
2
2
3
4
5
6

2
2
2
1
1
4
1
1
4

Patch index buffer

2

4

5

Patch index buffer
Patch index buffer

0

1

Patch index buffer

3

6

Pre-patch factor
Pre patch factor

(cid:33) Use additional index buffer to fetch from patch array
(cid:33) Use additional index buffer to fetch from patch array

SV_InstanceID

Load( InstanceID )

2
4
5
5

Load( index )
Load( index )

Patch

0
1
2
3
4
4
. . .
nn

Compute vertex 

position

P
Per-patch factor

t h f

t

LoD = 2

LoD = 4

LoD = 8

LoD = 16

Per-patch 
f
factors

t

(cid:33) After rendering patches 

g p

for all factors, we get 
the final object 
rendered with LoD 
changing per-patch

P
Per-patch factor

t h f

t

(cid:33) Example of power-of-two per-patch tessellation factor:
(cid:33) Example of power of two per patch tessellation factor:

Silhouette-aware 
tessellation
(cid:33) Increase tessellation factor when close to 
(cid:33) Increase tessellation factor when close to 

silhouette edges

(cid:33) Refine the silhouette while the rest of the mesh 
(cid:33) Refine the silhouette while the rest of the mesh 

remains coarse

(cid:33) Good for rendering shadowmaps

G d f

d

h d

Point of view

Silhouette-aware 
tessellation

ll

Performance 
and 
conclusions
conclusions

P f
Performance comparison
(cid:33) Mesh: 6118 patches, 256 vertices each, 8800 GT
(cid:33) Mesh: 6118 patches, 256 vertices each, 8800 GT

 

i

Distance
Distance

Dynamic

tessellation 
tessellation 

with LoD

Pretessellated

mesh
mesh

39.32 FPS

36.70 FPS

230.61 FPS

40.60 FPS

M
Memory consumption

ti

 

(cid:33) Mesh: 6118 patches, 256 vertices each, 8800 GT

Coarse 
h
mesh
3 728
KBs

Height map

4 096
KBs

Diffuse
map
4 096
KBs

Total size

11 920

KBs

Dynamically
tessellated 

mesh
mesh

Detailed mesh

Pretessellated

mesh

48 944

KBs

Diffuse 
map
map
4 096
KBs

Total size

53 040

KBs

C
Conclusions

i

l

ll ti

  ll

 

(cid:33) Tessellation allows to achieve outstanding 
 

T
visual appearance while increasing rendering 
efficiency

 t   hi

t t di

(cid:33) Instanced tessellation enables tessellation on 

today’s hardware, giving access to unique 
tessellation features
tessellation features

(cid:33) Start thinking and experimenting today!

Bi   h k  
Big thanks to:

(cid:33) Ignacio Castaño
(cid:33) Ignacio Castaño

(cid:33) Kirill Dmitriev

R fReferences

Generic Mesh Refinement on GPU

Tamy Boubekeur & Christophe Schlick

p

y

Efficient Tessellation on GPU through Instancing
Efficient Tessellation on GPU through Instancing

Holger Gruen

Th k !
Thanks!

