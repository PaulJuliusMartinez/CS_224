A Compression Algorithm for DNA Sequences

©1998 DIGITAL VISION STOCK CORP.

Xin Chen1, Sam Kwong2, Ming Li3
1School of Mathematical Sciences, Peking University
2Department of Computer Science, City University of Hong Kong
3Department of Computer Science, University of Waterloo
July/August 2001

Using Approximate Matching for Better Compression Ratio to Reveal the True Characteristics of DNA

With more and more complete genomes of prokaryotes and eukaryotes becoming available and the completion of Human Genome Project on the horizon, fundamental questions regarding the characteristics of these sequences arise. Life represents order. It is not chaotic or random [9]. Thus, we expect the DNA sequences that encode life to be nonrandom. In other words, they should be very compressible. There is also strong biological evidence that supports this claim: it is well known that DNA sequences, especially in higher eukaryotes, contain many (approximate) tandem repeats; it is also well known that many essential genes (like rRNAs) have many copies; it is believed that there are only about a thousand basic protein folding patterns; and it also has been conjectured that genes duplicate themselves sometimes for evolutionary or simply for "selfish" purposes. All this evidence gives more concrete support that the DNA sequences should be reasonably compressible. However, such regularities are often blurred by random mutation, translocation, crossover, and reversal events, as well as sequencing errors.
It is well recognized that the compression of DNA sequences is a very difficult task [2, 4, 13, 7, 10]. The DNA sequences only consist of four nucleotide bases {a, c, g, t}, and two bits are enough to store each base. However, if one applies standard compression tools such as the Unix "compress" and "compact" or the MS-DOS archive programs "pkzip" and "arj," they all expand the file with more than 2 bits per base, as shown in Table 1, although all these compression tools are universal compression algorithms. These tools are designed for text compression [2], while the regularities in DNA sequences are much subtler. It means that DNA sequences do not have the same properties for the traditional compression algorithms

to be counted on. This requires a better model for computing the DNA content such that better data compression results can be achieved. In fact, it is our purpose to reveal such subtleties, such as crossover and mutation, in DNA sequences by using a more appropriate compression algorithm.
In this article, we will present a DNA compression algorithm, GenCompress, based on approximate matching that gives the best compression results on standard benchmark DNA sequences. We will present the design rationale of GenCompress based on approximate matching, discuss details of the algorithm, provide experimental results, and compare the results with the two most effective compression algorithms for DNA sequences (Biocompress-2 and Cfact).
Overview
One may treat compressibility study as the ultimate generalization of the simpler (and fruitful) biological studies such as G-C contents of various species. We are acquiring more and more complete genomes from the 5-megabase-long E. coli to the 97-megabase-long C. elegans. The 3 billion bases of H. sapiens will also be available soon. More sophisticated studies on these sequences will give us deeper understanding about the nature of these sequences. Different regions on a genome, different genes, and different species may have different compression ratios. Such difference may imply, for example, different mutation rates in different genes [7].
Grumbach and Tahi [4, 5] proposed two lossless compression algorithms for DNA sequences, namely Biocompress and Biocompress-2, in the spirit of the Ziv and Lempel data compression method [16]. Biocompress-2 detects exact repeats and complementary palindromes located

IEEE ENGINEERING IN MEDICINE AND BIOLOGY

0739-5175/01/$10.00©2001IEEE

61

Compression of DNA
sequences is of
practical use to many
kinds of bioinformatic
applications.
earlier in the target sequence and then encodes them by repeat length and the position of a previous repeat occurrence. In addition, they also use arithmetic coding of order 2 (an entropy encoding method), if no significant repetition is found. In fact, the difference between Biocompress and Biocompress-2 is the addition of order-2 arithmetic coding. As a matter of fact, it is well known that the compression algorithm is composed of two distinct phases: modeling and coding. In the first phase, we need to develop a model that is good for DNA sequences. In our case, we proposed an approximate matching compression algorithm that provides a good model for DNA sequences. Secondly, a

order-2 arithmetic coder is to perform the entropy coding without knowing the modeling environment. Readers can refer to [20] to have more thorough details about the arithmetic coding.
É. Rivals et al. [12] give another compression algorithm, Cfact, which searches the longest exact matching repeat using suffix tree data structure in an entire sequence. The idea of Cfact is basically the same as Biocompress-2, except that Cfact is a two-pass algorithm. It builds the suffix tree in the first pass. In the encoding phase, the repetitions are coded with guaranteed gain; otherwise, 2-bit per base encoding will be used. This is similar to the codeword encoding condition in Biocompress-2 except that the order-2 arithmetic coding is not used in Cfact. É. Rivals et al. [13] also designed a compression algorithm as a tool to detect the approximate tandem repeats in DNA sequences.
Sadeh [14,15] has proposed lossy data compression schemes based on approximate string matching and proved some asymptotic properties with respect to ergodic stationary sources. However, we are not interested in lossy compression.
Compression of DNA sequences is of practical use to many kinds of bioinformatic applications. Aleksandar Milosavljevis [17] suggested the use of minimal length encoding could be applied to discover new subfamilies of Alu sequences. Allison et al. [18] argues that compression of DNA sequences is good for studying the intelligent sequence anal-

ysis. It is stated that sequence analysis is able to find out common and repetitions subsequences, evolution and mutation, pattern or structure. In addition to their work, we also can extend our algorithm to build the evolution tree from the complete mammalian mtDNA sequences [19]. Thus, the biological or medical relevance of DNA compression is obvious.
In this article, if not otherwise mentioned, we will use lower case letters u, v, w, x, y to denote finite strings over the alphabet a, c, g, t. |u| denotes the length of u, the number of characters in u. ui is the ith character of u. ui: j is the substring of u from position i to position j. The first character of u is u0. Thus u = u0:|u|-1. We use  to denote empty string and | | = 0.
Encoding Edit Operations
We consider three standard edit operations in our approximate matching algorithm. These are:
1) Replace. This operation is expressed as (R, p, char) which means replacing the character at position p by character char.
2) Insert. This operation is expressed as (I, p, char), meaning inserting character char at p.
3) Delete. This operation is written as (D, p), meaning deleting the character at position p.
Let C denote "copy," then the following are two ways to convert the string "gaccttca" to "gaccgtca" via different edit operation sequences:

Table 1. Compression ratios. The last column is the improvement of GenCompress-2 over Biocompress-2, which is defined as (Ratio_of_Biocompress-2 - Ratio_of_GenCompress-2)/Ratio_of_Biocompress-2*100%.

Sequence

Size

Compress Arith-2 Biocompress-2 GenCompress-1 GenComrpess-2 Improvement

MTPACGA

100314

-5.81%

6.37%

6.24%

6.96%

6.96%

11.54%

MPOMTCG

186608

-10.11%

1.72%

3.11%

5.07%

5.10%

63.99%

CHNTXX

155844

-9.36%

3.31%

19.14%

19.31%

19.31%

0.89%

CHMPXX

121024

-3.73%

8.17%

15.76%

16.53%

16.52%

4.82%

HUMGHCSA

66495

-9.68%

3.11%

34.63%

44.07%

45.14%

30.35%

HUMHBB

73323

-9.73%

4.08%

6.16%

9.37%

9.29%

50.81%

HUMHDABCD

58864

-11.48%

2.87%

6.15%

10.00%

9.54%

55.12%

HUMDYSTROP 38770

-11.66%

3.80%

3.69%

3.82%

3.84%

4.07%

HUMHPRTB

56737

-10.12%

3.56%

4.67%

8.72%

8.50%

82.01%

VACCG

191737

-8.37%

5.10%

11.93%

11.94%

11.93%

0.00%

HEHCMVCG

229354

-10.65%

1.76%

7.60%

7.64%

7.64%

0.53%

62

IEEE ENGINEERING IN MEDICINE AND BIOLOGY

July/August 2001

CCCCR CCC gaccg t ca gacc t t ca

or

CCCC I CDCC

g a c cg t

ca

gacc

t t ca

The first involves one replacement operation. The second involves one insertion and one deletion. It can be easily seen that there are infinitely many edit sequences to transform one string to another.
A list of edit operations that transform a string v to another string u is called an Edit Transcription of the two strings [9]. This will be represented by an edit operation sequence (u,v) that orderly lists the edit operations. For example, the edit operation sequence of the first edit transcription in the above example is (gaccgtca, gaccttca) = {(R,4, g)} ; and for the second edit transcription, (gaccgtca, gaccttca) = {(I,4, g),(D,6)}.
If we know the string u and an edit operation sequence (u,v) from v to u, then the string u can be constructed correctly using . There are many ways to encode one string given another. Using the above example, we describe four ways to encode "gaccgtca" using string "gaccttca" supposing that the string "gaccttca" is located earlier in the sequence.
1) 2-bits encoding method. In this case, we can simply use 2 bits to encode each character; i.e., 00 for a, 01 for c, 10 for g, 11 for t. Thus "10 00 01 01 10 11 01 00" encodes "gaccgtca." It needs 16 bits in total.
2) Exact matching method. We can use (repeat position, repeat length) to represent an exact repeat. This way, for example, if we use 3 bits to encode an integer, 2

bits to encode a character, and use 1 bit to indicate if the next part is a pair (indicating an exact repeat) or a plain character, then the string "gaccgtca" can be encoded as {(0,4), g,(5,3)}, relative to "gaccttca." Thus, a 17-bit binary string "0 000 100 1 10 0 101 011" is required to encode the {(0,4), g,(5,3)}.
3) Approximate matching method. In this case, the string "gaccgtca" can be encoded as {(0,8),(R,4, g)}, or "0 000 111 1 00 100 10" in binary, with R encoded by 00, I encoded by 01, and D encoded by 11, and 0/1 indicating whether the next item is a doubleton or triple. A total of 15 bits is needed.
4) For the approximate matching method, if we use the edit operation sequence, then the string "gaccgtca" can be encoded as {(0,8),(I,4, g),(D,6)}, or "0 000 111 1 01 100 10 1 10 110," in total 21 bits.
From the above examples, we see that the approximate matching method in the third case has the minimal number of bits to encode the string "gaccgtca" with reference to "gaccttca."
GenCompress: Systems and Methods
Lempel and Ziv proposed two algorithms in [8, 16] to compress universal data sequences. These are dictionary-based compression algorithms that rely on exact repeats. The Lempel-Ziv algorithms can be viewed as having two components: the first component is to parse the input data sequence into variable-length strings based on the history of the dictionary. The second component is to replace the variable-length prefix by a proper binary codeword--concatenation of these codewords yields the encoder's output sequence in response to the input

data sequence. We follow the same framework and generalize it to approximate matching for DNA sequences.
GenCompress is a one-pass algorithm. It proceeds as follows: For input w, assume that a part of it, say v, has already been compressed, and the remaining part is u; i.e., w = vu. GenCompress finds an "optimal prefix" of u such that it approximately matches some substring in v so that this prefix of u can be encoded economically. After outputting the code of this prefix, remove the prefix from u, and append it to the suffix of v. Continue the process until u = .
Condition C, the Compression Gain Function, and the Optimal Prefix As can be seen in the above section,
there are many ways to approximate a string from others. We therefore adopt the following constraint in GenCompress to limit the search. If the number of edit operations located in any substring of length k in the prefix s of u for an edit operation sequence ( s,t) is not larger than a threshold value b, we say that ( s,t) satisfies the condition C = (k, b) for compression. In GenCompress, we only search for approximate matches that satisfy condition C. This way, we limit our search space. Experiments show that setting C to (k, b) = (12,3) gives good results. So we set C = (12,3) in all of our experiments.
Further, we also need to define a compression gain function G in order to evaluate if a particular approximate repeat provides profit in the encoding. G is defined to be:
G( s,t, ) = max{2| s|-|(i,| s|)|
-  *| ( s,t)|-c,0}
where n s is a prefix of u;

Table 2. Compression ratios. The last column is the improvement of GenCompress-2 over Cfact, which is defined as (Ratio_of_Cfact - Ratio_of_GenCompress-2)/Ratio_of_Cfact *100%.

Sequence

Size

LZW 15

arith-2

Cfact

GenCompress-1 GenCompress-2

Improvement

Atatsgs

9647

-11.83%

2.44%

10.75%

16.78%

16.37%

52.28%

Atef1a23

6022

-14.85%

0.30%

20.77%

22.95%

23.02%

10.83%

Atrdnaf

10014

-15.00% -0.46%

9.30%

10.57%

10.69%

14.95%

Atrdnai

5287

-11.97%

0.28%

26.60%

29.03%

29.49%

10.86%

Hsg6pdgen

52173

-8.42%

3.14%

3.59%

10.76%

10.00%

178.55%

Xlxfg512

19338

-4.19%

3.86%

25.49%

31.22%

30.75%

20.64%

Mmzp3g

10833

-12.18%

2.37%

4.44%

7.32%

7.14%

60.81%

Celk07e12

58949

-5.41%

4.38%

14.33%

20.13%

19.73%

37.68%

July/August 2001

IEEE ENGINEERING IN MEDICINE AND BIOLOGY

63

n t is a substring appear at position i in v;
n 2| s| is the number of bits we otherwise use: 2 bits per base;
n (i,| s|) is a pair of repeat position and length, and|(i,| s|)| is the bit size of encoding i and | s|;
n   is the average bits to encode an edit operation;
n | ( s,t)| is the number of edit operations in ( s,t);
n c is the overhead proportional to the size of control bits.
Again, let input w = uv where v has already been processed. Given the compression gain function G( s,t, ) and C, the optimal prefix is a prefix s of u such that G( s,t, ) is maximized over all  and t where t is a substring of v and  is an edit transcription from t to s satisfying condition C. Since from any t to any s there are infinite number of edit transcriptions, in practice, we use a condition C to limit the search.
Implementation for GenCompress Based on the dictionary-based com-
pression method, the GenCompress structure is as follows:
1) Initialize the condition C for compression and the compression gain function G; and set u = w to be the complete input string and v =  to be the empty database; and initialize a data buffer B to nil.
2) Search for the optimal prefix s of u, with approximate match t in the database v. Return the one with maximum G value (details given in next subsection).
(a) If G( s,t, ) = 0, then append the first character of u into the data buffer B;
(b) Else if G( s,t, ) > 0, then i) If B is not empty, add a flag to indicate there is a zone of individual characters and encode them with the order-2 arithmetic encoding [11]; reset the data buffer B to nil; ii) Add another flag to indicate there is an approximate match and then encode the approximate match (i,| s|) by the Fibonacci representation (a self-delimiting code) of positive integers [1] and its edit operation sequence ( s,t), where i is the position t that appears in v. 3) Remove prefix s from u, and append s to the database v. If u  , goto (2); else exit. The procedure depends on the initial settings of the condition C for compression and the compression gain function G. If the condition C is set such that no edit operation is allowed in the search region of the DNA sequence, then we have an ex-

act match algorithm. In addition, if the compression gain function G is set to be | s|, i.e., the number of exact matched characters, the above parsing procedure will be similar to the Lempel-Ziv parsing procedure [16].
GenCompress also detects the approximate complemented palindrome in the DNA sequences. The method is same as the approximate matching repeat except that we use the complemented reversal of v as another database to check for the existence of complemented palindromes.
In DNA sequences, purine-purine or pyrimidine-pyrimidine (transition) base-pair substitutions are more likely than purine-pyrimidine substitutions (transversions) [3]. Hence, it may be interesting to see that we can allocate fewer bits to represent a mutation from transition than transversion.
Implementing the Optimal Prefix Search Again, assume that the input is w = vu, and we have compressed the v part already. We need to find the optimal prefix in u with v as the database, to maximize the compression gain function G. Initialize the index l to be the first position of u and j to be the first position of v. We do the approximate search from left to right as follows: compare the two characters ul and v j in the two strings, if they match, shift the two indices to the right; otherwise, select an edit operation, shift the corresponding indices to the right, and continue. The algorithm will consider all alternating options for edit operation in which condition C is applied to limit the search. In order to further reduce the search space and execution time, we first make a few observations. LEMMA 3.1. An optimal prefix u0:l with G( s,t, ) > 0 always ends right before a mismatch. Proof. Assume that u0:l matches with vi: j by an optimal edit transcription sequence . If the next character ul+1 matches with v j +1, then we can include ul+1 into the prefix to form prefix u0:l+1. So, according to the definition of compression gain function G
G(u0:l,vi: j , ) - G(u0:l+1,vi: j +1, )
=| Fibo(l +1)-| Fibo(l)|-2
where  is the natural extension of  with one extra match, Fibo(l) denotes the Fibonacci representation code [1] of integer l and | Fibo(l)| is its bit size. The last

term (2) is used because two bits are required to code each base.
We know from [12] that, for any positive integer i:





 log(i 5

 

log  1

+

-1) 

5

 

 



Fibo(i)

-1

  2 







  

log(i 5

 log

1

+

+ 1)

5

 

. 

  2 

Thus| Fibo(l +1)-| Fibo(l)|  1. Hence, we
g e t G(u0:l,vi: j , ) < G(u0:l+1,vi: j +1, ). This contradicts the fact thatu0:l is an optimal prefix. 
By Lemma 3.1, we will compute and
compare the value of the compression
gain function G(u0:l,vi: j , ) only when there is a mismatch betweenul+1 andv j +1.
LEMMA 3.2. Let  be the optimal edit
operation sequence from y to x. If xi is copied from y j in  when converting y to x, then (x0:i, y0: j ) is also the optimal edit operation sequence among all the edit op-
eration sequences from y0:i to x0: j . Proof. If (x0:i, y0: j ) is not the optimal
edit operation sequence from x0:i to y0: j , then there should exist an optimal
(x0:i, y0: j ) withG(x0:i, y0: j , (x0:i, y0: j )) < G(x0:i, y0: j , (x0:i, y0: j )). However, if we transform y to x with another edit oper-
ation sequence ( x, y ) that is equal to the
c o n c a t e n a t i o n o f (x0:i, y0: j ) a n d (xi+1:|x|-1, y j +1:| y|-1), then it can be easily inferred from the definition of compres-
sion gain function that
G(x, y, ) < G(x, y, ), which contradicts the fact that  is an optimal edit
operation sequence from y to x. 
This conclusion can easily be seen
from the principle that if  is an optimal
edit operation sequence from y to x, then
any edit operation sequences selected
from  are also optimal.
By Lemma 3.2, we will define an exact
match reference point set  to keep track
of the positions of match points with  opt between u0:lopt and vi: jopt . In order to construct , we need to select a few exact
match points ul and v j , where 0 < l < lopt , as its elements such that
(l,i, j,| (u0:l,vi: j )|) . If there exists another edit operation sequence (u0:l,vi: j ) and ul is equal to v j , then we will compute

64

IEEE ENGINEERING IN MEDICINE AND BIOLOGY

July/August 2001

| (u0:l,vi: j )|-| (u0:l,vi: j )|; if the result is greater than zero, then stop searching for optimal prefix with (u0:l,vi: j ). For example, as shown in the previous section that if (gaccgtca, gaccttca) = {(R,4, g)} is set as the current optimal edit operation
sequence, then we can select a match pointu6,v6 and (u0:6,v0:6) to construct an exact match reference point (6,0,6,| (u0:6,v0:6)|). Assume that there exists another edit operation (gaccgtca, gaccttca) = {(I,4, g),(D,6)} that can also be considered as the possible
candidate for the optimal sequence opera-
tions: the search process can stop when
the match point reaches u6 and v6 because | (u0:6,v0:6)| <| (u0:6,v0:6)|.
Observe that a deletion followed by an
insertion at any two adjacent positions is
simply a replacement operation. Also, a
deletion/insertion followed by a replace-
ment is equivalent to a replacement fol-
lowed by a deletion/insertion operation.
We therefore will reduce the search by not
considering such combinations.
Further observe that if there exists a
mismatch ui among the first several bases in uopt , it is better to append u0:i into a data buffer since this can be considered as a
zone of individual bases. Therefore, we
will first search for an exact repeat of a
small fixed length k as the prefix of each
approximate repeat. This also reduces the
search space. To implement this, a table
look-up method is used. We will first build a table with |u|-k entries that stores the prefix of length k for each ui,0  i  u - k -1. Instead of storing the prefix with k characters long, we will
translate the k-prefix into an integer; for
example, "gac" can be represented by 33
(i.e., "100001" in binary format). Thus,
we can search for exact repeats in the data-
base by comparing equivalent integer val-
ues with the entries in the table. This
method is easier than the one using the
suffix tree, which needs two suffix trees
for direct and palindrome repeats [4], re-
spectively.
Combining these observations, our al-
gorithm for optimal prefix search is out-
lined as follows. The search for
palindromes is implemented similarly.
1) Initialize lopt , iopt , jopt ,  opt and Gopt ;
2) For i = 0 to |v|-1, initialize l = 0, j = i +1, and exact match reference point
set  to nil:
(a) Determine whether u0:|u|-1 and vi:|v|-1 have the same prefix of length k. If not, goto step 2;

(b) If l |u| or j |v|, then goto (e); (c) If ul == v j , then i) If there exists an element
(l,i, j,|  opt|) in , then check it with the
current edit operation sequence . If | (u0:l,vi: j )| >|  opt (u0:l,vi: j )|, then goto (e);
ii) l = l +1 and j = j +1; (d) Otherwise, it is a mismatch, then i ) C o m p u t e G(x0:l-1, yi: j -1, ). I f G(x0:l-1, yi: j -1, ) > Gopt , A . S e t Gopt = G(x0:l-1, yi: j -1, ), iopt = i, jopt = j -1,  opt = (u0:l-1,vi: j -1) and lopt = l -1; B. Update  with  opt ;
ii) Determine whether the current edit operation sequence satisfies condition C. If not, goto (e).
iii) Otherwise, append the proper edit operation as discussed above to the current edit operation sequence updating the indices properly: j = j +1 in case of replacement and deletion, and l = l +1 in case of replacement and insertion. Go to (b).
(e) Stop the process for the current edit operation sequence; and if there exist unfinished edit operation sequences, choose one as the current edit operation sequence and go to (b); otherwise, go to step 2.

Experimental Results

We tested GenCompress on standard

benchmark data used in [4] and also in [7,

10] for entropy studies. These standard se-

quences come from a variety of sources

and include the complete genomes of two

mitochondria:

MPOMTCG,

PANMTPACGA (also called

MIPACGA); two chloroplasts:

CHNTXX and CHMPXX (also called

MPOCPCG); five sequences from hu-

mans: HUMGHCSA, HUMHBB, HUMHDABCD, HUMDYSTROP, HUMHPRTB; and finally the complete genome from two viruses: VACCG and HEHCMVCG (also called HS5HCMVCG).
We implemented two versions of GenCompress: GenCompress-1 searches for approximate repeats with replacement operations only (i.e., Hamming distance), and GenCompress-2 searches for approximate repeats based on the edit operations described above. The definition of the compression ratio is the same as in [4]; i.e., 1 - (| O|/2| I|), where |I| is number of bases in the input DNA sequence and |O| is the length (number of bits) of the output sequence. The compression ratios of GenCompress, as well as those of Biocompress-2 and some other compression algorithms, are presented in Table 1. We have also compared GenCompress with Cfact in Table 2, using the data from [12]. It is amusing to see that although Cfact looks for the best matches globally whereas our GenCompress only searches for the best approximate match from the current prefix to the part of the text seen so far, GenCompress has much better compression ratio than Cfact. From these experiments, we conclude that approximate matching plays a key role in finding similarities or regularities in DNA sequences.
GenCompress is able to detect approximate matches of any edit distance, including exact repeats. Figure 1 shows the repeat pattern for sequences HUMGHCSA and VACCG. All these repeats can be positively compressed with a proper compression gain function. When there are not enough approximate repeats in the data sequence as shown in Fig. 1 for VACCG, GenCompress fails to achieve

The Number of Approximate Repeats

20

18

16

14

12

HUMGHCSA VACCG

10

8

6

4

2

0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19

The Number of Edit Operations in an Approximate Repeat

1. The number of profitable approximate repeats, found by GenCompress, in sequence HUMGHCSA and VACCG.

July/August 2001

IEEE ENGINEERING IN MEDICINE AND BIOLOGY

65

higher compression ratio than Biocompress-2.
Conclusion
In this article, we have presented a new compression algorithm that is based on approximate matching. This compression algorithm gives a good model for compressing DNA sequences that reveals the true characteristics of DNA sequences. This algorithm can easily be extended to analyze the relatedness [15] and similarity of DNA sequences. The compression results of GenCompress for DNA sequences also indicate that our method is more effective than many others. GenCompress is able to detect more regularities in DNA sequences, such as mutation and crossover, and achieve the best compression results by using this observation.
Acknowledgments
This work was supported in part by the City University of Hong Kong Grant No. 7000875, NSERC Research Grant OGP0046506, CITO, a CGAT grant, and the Steacie Fellowship. Chen Xin's work was fully supported by the City University Research Grant 7000875, and Ming Li's work was partly done while he was visiting City University of Hong Kong. We wish to thank Professor Qing-Yun Shi for her generous support; Fariza Tahi for providing the Biocompress-2 program; and Jonathan Badger, Kevin Lanctot, and Huaichun Wang for providing some data and very helpful comments (Jonathan provided references).
Xin Chen received the B.S. and M.S. degrees from Peking University in 1995 and 1998, respectively. In 1999, he was employed by the City University of Hong Kong as a research assistant. Now he is studying for a Ph.D. degree at Peking University. His research interests include data compression and image processing.
Sam Kwong received his B.Sc. degree and M.A.Sc. degree in electrical engineering from the State University of New York at Buffalo, USA, and University of Waterloo, Canada, respectively. He later obtained his Dr.-Ing. from the University of Hagen, Germany. From 1985 to 1987,

he was a diagnostic engineer with the Control Data Canada where he designed the diagnostic software to detect the manufacture faults for the VLSI chips in the Cyber 430 machine. He later joined Bell Northern Research Canada as a member of the scientific staff. In 1990, he joined the City University of Hong Kong as a lecturer in the Department of Electronic Engineering. He is a coauthor of the book Genetic Algorithms Concepts and Designs published by Springer-Verlag 1999. He is currently an associate professor in the Department of Computer Science. His research interests are in genetic algorithms and data compression.
Ming Li is a professor of computer science at the University of California, Santa Barbara. He received his Ph.D. from Cornell University in 1985. He is a recipient of Canada's E.W.R. Steacie Fellowship Award in 1996 and the 1997 Award of Merit from the Federation of Chinese Canadian Professionals. He is a coauthor of the book An Introduction to Kolmogorov Complexity and Its Applications (Springer-Verlag, 1993; 2nd Edition, 1997). He currently serves on the editorial boards of the Journal of Computer and System Sciences, Information and Computation; the Journal of Combinatorial Optimization; and the International Journal of Foundation of Computer Science. His main research area is bioinformatics.
Address for Correspondence: Sam Kwong, Department of Computer Science, City University of Hong Kong, 83 Tatchee Ave., Kowloon, Hong Kong, China. E-mail: CSSAMK@cityu.edu.hk.
References
[1] A. Apostolico and A.S. Fraenkel, "Robust transmission of unbounded strings using Fibonacci representations," IEEE Trans. Inform. Theory, vol. 33, no. 2, pp. 238-245, 1987.
[2] R. Curnow and T. Kirkwood, "Statistical analysis of deoxyribonucleic acid sequence data-a review," J. Royal Statistical Soc., vol. 152, pp. 199-220, 1989.
[3] E.J. Gardner, M.J. Sinnoms, and D.P. Snustad, Principles of Genetics, 8th ed. New York: Wiley, 1991.
[4] S. Grumbach and F. Tahi, "A new challenge for compression algorithms: Genetic sequences,"

J. Inform. Process. Manage., vol. 30, no. 6, pp. 875-866, 1994.
[5] S. Grumbach and F. Tahi, "Compression of DNA sequences," in Proc. IEEE Symp. Data Compression, Snowbird, UT, 1993, pp. 340-350.
[6] D. Gusfield, Algorithms on Strings, Trees, and Sequences: Computer Science and Computational Biology. Cambridge, U.K.: Cambridge Univ. Press, 1997.
[7] K. Lanctot, M. Li, and E.H. Yang, "Estimating DNA sequence entropy,"in Proc. SODA 2000, to be published.
[8] A. Lempel and J. Ziv, "Compression of individual sequences via variable-rate coding," IEEE Trans. Inform. Theory, vol. 24, pp. 530-536, 1978.
[9] M. Li and P. Vitányi, An Introduction to Kolmogorov Complexity and Its Applications, 2nd ed. New York: Springer-Verlag, 1997.
[10] D. Loewenstern and P. Yianilos, "Significantly lower entropy estimates for natural DNA sequences," J. Comput. Biol., to be published (Preliminary version appeared in a DIMACS workshop, 1996.)
[11] M. Nelson, The Data Compression Book. New York: M&T Publishing Inc., 1991.
[12] É. Rivals, J.P. Delahaye, M. Dauchet, and O. Delgrange, "A Guaranteed Compression Scheme for Repetitive DNA Sequences," LIFL Lille I Univ., Tech. Rep. IT-285, 1995.
[13] É. Rivals, O. Delgrange, J.P. Delahaye, M. Dauchet, M.O. Delorme et al., "Detection of significant patterns by compression algorithms: the case of Approximate Tandem Repeats in DNA sequences," CABIOS, vol. 13, no. 2, pp. 131-136, 1997.
[14] I. Sadeh, "Universal data compression algorithm based on approximate string matching," Probability in the Eng. and Inform. Sciences, vol. 10, pp. 465-486, 1996.
[15] X. Chen, S. Kwong, and M. Li, "A compression algorithm for DNA sequences and its application in genome comparison," in BioInformatics Workshop, Tokyo, Japan, Dec. 1999, pp. 51-61.
[16] J. Ziv and A. Lempel, "A universal algorithm for sequential data compression," IEEE Trans. Inform. Theory, vol. 23, no. 3, pp. 337-343, 1977.
[17] L. Allison, L. Stern, T. Edgoose, and T.I. Dix, "Sequence complexity for biological sequence analysis," Computers & Chemistry, vol. 24, pp. 43-55, 2000.
[18] A. Milosavjevic, "Discovery by minimal length encoding: A case study in molecular evolution," Mach. Learn., vol. 12, pp. 68-87, 1993.
[19] M. Li, J. Badger, X. Chen, S. Kwong, P. Kearney, and H.Y. Zhang, "An information based distance and its application to whole mitochondrial genome phylogeny," BioInfomatics, vol. 17, no. 2, pp. 149-154, 2001.
[20] I.H. Witten, R. Neal, and J.G. Cleary, "Arithmetic coding for data compression," Commun. ACM, vol.30, pp.52-541, Jun. 1987.

66

IEEE ENGINEERING IN MEDICINE AND BIOLOGY

July/August 2001

