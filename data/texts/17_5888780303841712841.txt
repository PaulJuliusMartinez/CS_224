Brian W. Kernighan, Dennis M. Ritchie
Programovací jazyk C
Computer Press Brno 2013

Programovací jazyk C
Brian W. Kernighan, Dennis M. Ritchie
Peklad: Zbynk Sáva Odborná korektura: Miroslav Virius Obálka: Martin Sodomka Odpovdný redaktor: Martin Domes Technický redaktor: Jií Matousek
Authorized translation from the English language edition, entitled ,,C PROGRAMMING LANGUAGE, 2 nd Edition",ISBN 0131103628, by KERNINGHAN, BRIAN W.; RITCHIE, DENNIS, published by Pearson Education, Inc, publishing as Prentice Hall PTR, Copyright © 1988 All rights reserved. No part of this book may be reproduced or transmitted in any form or by by any means, electronic or mechanical, including photocopying, recording or by any information storage retrieval system, without permission from the Publisher. CZECH language edition published by Computer Press, a.s., Copyright © 2006.
Objednávky knih: http://knihy.cpress.cz www.albatrosmedia.cz eshop@albatrosmedia.cz bezplatná linka 800 555 513 ISBN 978-80-251-0897-0
Vydalo nakladatelství Computer Press v Brn roku 2013 ve spolecnosti Albatros Media a. s. se sídlem Na Pankráci 30, Praha 4. Císlo publikace 16 695. © Albatros Media a. s. Vsechna práva vyhrazena. Zádná cást této publikace nesmí být kopírována a rozmnozována za úcelem rozsiování v jakékoli form ci jakýmkoli zpsobem bez písemného souhlasu vydavatele.
Dotisk 1. vydání

Obsah
Pedmluva k ceskému vydání Pedmluva Pedmluva k prvnímu vydání Úvod
Kapitola 1 Úvodní kurz
1.1 Zacínáme 1.2 Promnné a aritmetické výrazy 1.3 Píkaz for 1.4 Symbolické konstanty 1.5 Znakový vstup a výstup
1.5.1 Kopírování souboru 1.5.2 Pocítání znak 1.5.3 Pocítání ádk 1.5.4 Pocítání slov 1.6 Pole 1.7 Funkce 1.8 Argumenty ­ pedávání hodnotou 1.9 Znaková pole 1.10 Externí promnné a oblast platnosti 1.11 Standard C99
Kapitola 2 Typy, operátory a výrazy
2.1 Jména promnných 2.2 Datové typy a velikosti 2.3 Konstanty 2.4 Deklarace 2.5 Aritmetické operátory 2.6 Relacní a logické operátory 2.7 Konverze typ 2.8 Operátory inkrementace a dekrementace 2.9 Bitové operátory 2.10 Piazovací operátory a výrazy

11 13 15 17
21
21 24 28 29 30 30 32 33 34 35 37 40 41 43 46
47
47 47 48 51 52 52 53 57 58 60

4
2.11 Podmínné výrazy 2.12 Priorita a poadí výpoctu 2.12 Standard C99
2.12.1 Celocíselné typy 2.12.2 Císla s pohyblivou ádovou cárkou 2.12.3 Komplexní císla 2.12.4 Konverze
Kapitola 3 ízení bhu programu
3.1 Píkazy a bloky 3.2 If-else 3.3 Else-if 3.4 Switch 3.5 Cykly ­ while a for 3.6 Cykly ­ do-while 3.7 Break a continue 3.8 goto a návstí 3.9 Standard C99
3.9.1 Bloky a deklarace 3.9.2 Cykly 3.9.3 Výbrové (podmínné) píkazy 3.9.4 Skok
Kapitola 4 Funkce a struktura programu
4.1 Zacínáme s funkcemi 4.2 Funkce, které nevrací celá císla 4.3 Externí promnné 4.4 Pravidla rozsahu platnosti 4.5 Hlavickové soubory 4.6 Statické promnné 4.7 Registrové promnné 4.8 Bloková struktura 4.9 Inicializace 4.10 Rekurze 4.11 Preprocesor jazyka C
4.11.1 Vkládání soubor 4.11.2 Substituce maker 4.11.3 Podmínný peklad 4.12 Standard C99

Obsah
61 62 63 64 67 69 70
73
73 73 74 76 77 80 81 82 83 83 83 84 84
85
85 88 90 96 97 98 99 100 100 101 103 103 104 105 106

Obsah
4.12.1 Funkce 4.12.2 Makra 4.12.3 #pragma
Kapitola 5 Ukazatele a pole
5.1 Ukazatele a adresy 5.2 Ukazatele a argumenty funkcí 5.3 Ukazatele a pole 5.4 Adresová aritmetika 5.5 Funkce a ukazatele na znaky 5.6 Ukazatele na pole; ukazatele na ukazatele 5.7 Vícerozmrná pole 5.8 Inicializace polí ukazatel 5.9 Ukazatele versus vícerozmrná pole 5.10 Argumenty píkazové ádky 5.11 Ukazatele na funkce 5.12 Komplikované deklarace 5.13 Standard v C99
5.13.1 Restringované (omezené) ukazatele 5.13.2 Pole 5.13.3 Pole jako parametr funkce
Kapitola 6 Struktury
6.1 Základní informace o strukturách 6.2 Struktury a funkce 6.3 Pole struktur 6.4 Ukazatele na struktury 6.5 Struktury odkazující na sebe 6.6 Vyhledávání v tabulkách 6.7 Typedef 6.9 Unie 6.9 Bitová pole 6.10 Standard C99
6.10.1 Bitová pole 6.10.2 Inicializace struktur a unií 6.10.3 Literály typu struktura a unie

5
106 108 108
111 111 113 115 117 120 123 126 128 128 129 133 136 140
140 142 143
145 145 147 149 153 155 159 161 162 163 165
165 165 165

6
Kapitola 7 Vstup a výstup
7.1 Standardní vstup a výstup 7.2 Formátovaný výstup ­ funkce printf 7.3 Seznamy argument promnné délky 7.4 Formátovaný vstup ­ funkce scanf 7.5 Pístup k souborm 7.6 Osetení chyb ­ funkce stderr a exit 7.7 Vstup a výstup po ádcích 7.8 Rzné funkce
7.8.1 Operace s etzci 7.8.2 Testování tíd znak a konverze 7.8.3 Funkce ungetc 7.8.4 Vykonání píkazu 7.8.5 Správa pamti 7.8.6 Matematické funkce 7.8.7 Generování náhodných císel 7.9 Standard C99 7.9.1 Datové proudy
Kapitola 8 Rozhraní systému UNIX
8.1 Deskriptory soubor 8.2 Nízkoúrovový vstup a výstup 8.3 Open, creat, close, unlink 8.4 Náhodný pístup ­ lseek 8.5 Píklad ­ implementace funkcí fopen a getc 8.6 Píklad ­ výpis adresá 8.7 Píklad ­ alokátor pamti
Píloha A Referencní pírucka
A1. Úvod A2. Lexikální konvence
A2.1 Symboly A2.2 Komentáe A2.3 Identifikátory A2.4 Klícová slova A2.5 Konstanty A2.6 etzcové literály

Obsah
167 167 169 171 172 175 177 179 180
180 180 181 181 181 182 182 182 183
185 185 186 187 190 190 194 199
203 203 203
203 203 204 204 204 206

Obsah
A3 Zápis syntaxe A4 Význam identifikátor
A4.1 Pamová tída A4.2 Základní typy A4.3 Odvozené typy A4.4 Kvalifikátory typ A5 Objekty a l-hodnoty A6 Konverze A6.1 Celocíselná rozsíení A6.2 Celocíselné konverze A6.3 Celá císla a císla s pohyblivou ádovou cárkou A6.4 Typy s pohyblivou ádovou cárkou A6.5 Aritmetické konverze A6.6 Ukazatele a celá císla A6.7 Void A6.8 Ukazatele na void A7 Výrazy A7.1 Vytváení ukazatel A7.2 Primární výrazy A7.3 Postfixové výrazy A7.4 Unární operátory A7.5 Petypování A7.6 Multiplikativní operátory A7.7 Aditivní operátory A7.8 Operátory posunu A7.9 Relacní operátory A7.10 Operátory rovnosti A7.11 Operátor bitové konjunkce A7.12 Operátor bitové nonekvivalence A7.13 Operátor bitové disjunkce A7.14 Operátor logické konjunkce A7.15 Operátor logické disjunkce A7.16 Podmínný operátor A7.17 Výrazy piazení A7.18 Operátor cárka A7.19 Konstantní výrazy A8 Deklarace A8.1 Specifikátory pamové tídy A8.2 Specifikátory typ A8.3 Deklarace struktur a unií A8.4 Výcty A8.5 Deklarace

7
206 207 207 207 208 208 209 209 209 209 209 210 210 210 211 211 212 212 212 213 215 217 217 217 218 218 219 219 219 219 219 220 220 220 221 221 222 222 223 224 227 228

8
A8.6 Význam deklarátor A8.7 Inicializace A8.8 Jména typ A8.9 Typedef A8.10 Ekvivalence typ A9 Píkazy A9.1 Píkazy s návstím A9.2 Výrazový píkaz A9.3 Slozený píkaz A9.4 Výbrové píkazy A9.5 Iteracní píkazy A9.6 Píkazy skoku A10 Externí deklarace A10.1 Definice funkcí A10.2 Externí deklarace A11 Rozsah platnosti a vazba A11.1 Lexikální rozsah platnosti A11.2 Vazba A12 Preprocesor A12.1 Trigrafy A12.2 Spojování ádk A12.3 Definice a rozvoj maker A12.4 Vkládání soubor A12.5 Podmínná kompilace A12.6 ízení ádk A12.7 Generování chyb A12.8 Pragma A12.9 Prázdná direktiva A12.10 Peddefinovaná jména A13 Gramatika
Píloha B Standardní knihovna
B1. Vstup a výstup: <stdio.h> B1.1 Operace se soubory B1.2 Formátovaný výstup B1.3 Formátovaný vstup B1.4 Funkce pro vstup a výstup po jednotlivých znacích B1.5 Funkce pro pímý vstup a výstup B1.6 Funkce pracující s pozicí v souboru B1.7 Chybové funkce

Obsah
228 231 233 234 234 235 235 235 235 236 237 237 238 238 239 240 240 241 241 242 242 242 244 245 246 246 246 247 247 247
255
255 256 257 259 261 262 262 262

Obsah
B2 Testy tíd znak: <ctype.h> B3. Funkce pracující s etzci <string.h> B4. Matematické funkce: <math.h> B5. Uzitecné funkce: <stdlib.h> B6. Ladní: <assert.h> B7. Seznam argument promnné délky: <stdarg.h> B8. Nelokální skoky: <setjmp.h> B9. Signály: <signal.h> B10. Funkce pro práci s datem a casem: <time.h> B11. Implementací definované meze: <limits.h> a <float.h>
Píloha C Shrnutí zmn
Píloha D Hlavní novinky standardu C99
Rejstík

9
263 264 265 266 269 269 270 270 271 273
275
279
281

Pedmluva
k ceskému vydání
Drzíte v rukou nejznámjsí knihu o jazyce C, jaká kdy byla napsána ­ knihu nejen stále aktuální, ale v mnoha ohledech také stále nepekonanou. Jedním z jejích autor je Denis Ritchie, který v roce 1972 navrhl a implementoval první verzi jazyka C; spolu s Brianem W. Kernighanem pak v roce 1978 vydali knihu The C Programming Language, která se na dlouhou dobu stala neoficiálním standardem tohoto jazyka. Jazyk popsaný v prvním vydání této knihy se dodnes oznacuje jako ,,jazyk C podle Kernighana a Ritchieho", pípadn ,,C podle K&R", a s jeho implementacemi se lze stále jest setkat. U nás je toto první vydání známo ze slovenského pekladu vydaného nakladatelstvím Alfa (Bratislava, 1988). V roce 1988 vyslo druhé, aktualizované vydání, které popisuje tehdy pipravovaný standard ANSI X3.159-1989. Peklad tohoto vydání se vám nyní dostává do rukou. Americký národní standard jazyka C byl v USA v roce 1990 stazen a nahrazen mezinárodním standardem ISO/IEC 9899-1990, dnes bzn oznacovaným jako C90. To nic nemní na skutecnosti, ze se americtí výrobci softwaru stále odvolávají na standard ANSI. Obrátíte-li se na Americký národní standardizacní institut, ANSI, prodá vám jako standard jazyka C zmínnou normu ISO. Dnesní pekladace jazyka C zpravidla pln vyhovují standardu C90. V roce 1999 byla pijata nová verze standardu jazyka C, dnes oznacovaná jako C99. Ta pinesla adu úprav a rozsíení, o nichz se dozvíte v dodatcích k jednotlivým kapitolám, nadepsaných Standard C99; jejich strucný souhrn pak najdete v dodatku D. Soucasné pekladace pistupují ke standardu C99 zatím opatrn: vtsinou implementují pouze nkteré z novinek. To se vsak v dohledné dob mze zmnit. Pi pekladu této knihy jsme zachovali pvodní text, nesnazili jsme se o úpravu podle standardu C99; pouze na místa, která by mohla pi pekladu v C99 zpsobit problémy, jsme vlozili upozornní v podob poznámek pod carou, na závr vtsiny kapitol jsme vlozili oddíl Standard C99, v nmz jsou shrnutu novinky a zmny, a na závr knihy jsme pipojili Pílohu D shrnující nejdlezitjsí zmny, které standard C99 pinesl. Spolupracovat na pekladu této knihy pro mne bylo opravdu potsením, a proto bych rád podkoval tm, kteí mi na pelomu 80. a 90. let pomohli tento krásný programovací jazyk zvládnout. Pracoval jsem v oné dob jako odborný asistent na Katede matematiky FJFI CVUT na svém prvním projektu v jazyce C. Osobní pocítace byly tehdy k dispozici pouze ve studovn a Ivo Majetic, který práv dokoncoval program ke své diplomové práci, si nasel cas a pomohl mi zorientovat se nejen v novinkách jazyka, které nebyly popsány v prvním vydání Kernighana a Ritchieho, ale pedevsím v knihovnách tohoto jazyka.

12 Pedmluva k ceskému vydání
Poté, co Ivo úspsn dostudoval, mi s jazykem C pomáhal dalsí z tehdejsích student, Mirek Minárik, který mne naucil lustit disasemblované programy a spolu se mnou hledal chyby jednoho z tehdy populárních pekladac jazyka C a C++. Obma jim patí dík.
Miroslav Virius Katedra softwarového inzenýrství FJFI CVUT

Pedmluva
Od vydání The C Programming Language v roce 1978 prosel svt výpocetní techniky revolucí. Velké pocítace jest nabraly na velikosti a osobní pocítace disponují schopnostmi, které mohou smle soupeit se sálovými pocítaci uplynulé dekády. Bhem této doby se zmnil i programovací jazyk C (i kdyz jen mírn) a rozsíil se daleko mimo své pvodní psobist ­ operacní systém UNIX.
Rostoucí popularita jazyka C, jeho zmny v uplynulých letech a vytvoení kompilátor skupinami, které se nepodílely na jeho návrhu, jsou dvodem, proc je nutná precizní a aktuálnjsí definice jazyka, nez jakou poskytlo první vydání této knihy. V roce 1983 sestavila organizace American National Standards Institute (ANSI) komisi, jejímz úkolem bylo vytvoit ,,bezespornou a strojov nezávislou definici jazyka C", která by zachovávala pvodní myslenky jazyka. Výsledkem byl standard ANSI jazyka C.
Standard formalizuje konstrukce naznacené ale nepopsané v prvním vydání, zejména výcty a piazování struktur. Pinásí nový zpsob deklarace funkcí, jez umozuje provádt kízovou kontrolu definice funkce a jejího pouzití. Specifikuje standardní knihovnu s rozsáhlou mnozinou funkcí pro práci se vstupy a výstupy, správu pamti, manipulaci s etzci a podobné úkoly. Pesn urcuje chování vlastností, jez nebylo detailn vysvtleno v pvodní definici, a soucasn explicitn jmenuje aspekty jazyka, které zstávají strojov závislé.
Toto druhé vydání The C Programming Language popisuje jazyk C tak, jak je definován standardem ANSI. Programy jsme se rozhodli psát výhradn v novém tvaru zápisu, i kdyz zmiujeme místa, kde se jazyk zmnil. Vtsinou nedoslo k zádným podstatným zmnám; nejviditelnjsí zmnou je nový zpsob deklarace a definice funkcí. Moderní kompilátory jiz vtsinu rys standardu podporují.
Snazili jsme se zachovat strucnost prvního vydání. C není objemným jazykem, a proto mu nesvdcí objemné knihy. Zapracovali jsme na výkladu kritických vlastností jazyka, jako jsou ukazatele, jez jsou stedem programování v jazyce C. Vyladili jsme pvodní píklady a do nkolika kapitol jsme dodali píklady nové. Cásti s komplikovanými deklaracemi jsou napíklad rozsíeny o programy, které pevádí deklarace do slov a naopak. Stejn jako díve i nyní jsme testovali pímo vsechny píklady z textu, který je ve strojov citelné form.
Píloha A, referencní pírucka, není standardem, ale nasí snahou sdlit vám klícové základy standardu na mensím prostoru. Je urcena programátorm pro snadnjsí pochopení jazyka, ale nemze slouzit jako definice pro autory kompilátor ­ tato role po právu nálezí samotnému standardu. Píloha B je shrnutím prostedk, které poskytuje standardní knihovna. Stejn jako píloha A je zamýslena jako referencní pírucka pro programátory a ne pro implementátory. Píloha C je strucným výctem zmn oproti pvodní verzi.
Jak jsme ekli v pedmluv k prvnímu vydání, C ,,slouzí tím lépe, cím více rostou vase zkusenosti s ním." S deseti roky nových zkuseností to cítíme stále stejn. Doufáme, ze vám tato kniha pomze naucit se jazyk C a správn ho pouzívat v kazdodenní praxi.

14 Pedmluva
Jsme hluboce zavázáni pátelm, kteí nám pomohli s tímto druhým vydáním. Jon Bentley, Doug Gwyn, Doug McIlroy, Peter Nelson a Rob Pike nám poskytli komentáe k tém kazdé stránce pvodních návrh. Za peclivé ctení dkujeme Alovi Ahovi, Dennisi Allisonovi, Joeovi Campbellovi, G. R. Emlinovi, Karen Fortgangové, Allenovi Holubovi, Andrewovi Humemu, Davu Kristolovi, Johnu Lindermanovi, Daveovi Prosserovi, Geneovi Spaffordovi a Chrisi Van Wykovi. Uzitecné rady jsme dostali také od Billa Cheswicka, Marka Kernighana, Andyho Koeniga, Robin Lakeové, Toma Londona, Jima Reedse, Clovise Tonda a Petera Weinbergera. Dave Prosser nám zodpovdl mnoho otázek ohledn standardu ANSI. Pro lokální testování nasich program jsme casto vyuzívali pekladac C++ Bjarne Stroustrupa a Dave Kristol nám poskytl kompilátor ANSI C pro finální testování. Se sazbou nám velice pomohl Rich Drechsler.
Upimn dkujeme vsem. Brian W. Kernighan Dennis M. Ritchie

Pedmluva
k prvnímu vydání
C je univerzální programovací jazyk, vyznacující se úspornými výrazy, moderním ízením bhu, moderními datovými strukturami a bohatou mnozinou operátor. C není ,,jazykem vysoké úrovn", ani ,,velkým" jazykem a není specializován pro zádnou konkrétní oblast nasazení. Ale nepítomnost omezení a jeho obecnost ho dlají vhodnjsím a efektivnjsím pro vtsinu úloh, nez jiné ,,mocnjsí" jazyky.
Jazyk C byl pvodn navrzen a také implementován Dennisem Ritchiem na operacním systému UNIX na pocítaci DEC PDP-11. Operacní systém, kompilátor jazyka C a prakticky vsechny aplikace pro UNIX (vcetn softwaru, jenz byl pouzit pi píprav této knihy) byly napsány v C. Produkcní kompilátory existují také pro nkolik dalsích pocítac vcetn IBM System/370, Honeywell 6000 a Interdata 8/32. Avsak jazyk C není svázán s konkrétním hardwarem nebo systémem a je snadné psát programy, které budou fungovat beze zmn na kterémkoli pocítaci podporujícím C.
Tato kniha si klade za cíl pomoci ctenái naucit se programovat v jazyce C. Obsahuje úvodní kurz jazyka, který umozuje novým uzivatelm zacít tak rychle, jak to jen jde, a dále samostatné kapitoly pro kazdý z dlezitých rys jazyka a referencní pírucku. Vtsina výkladu je zalozena na ctení, psaní a revizi píklad spíse nez na výctu pravidel. Ve vtsin pípad jsou jako píklady uvedeny kompletní skutecné programy, nikoli izolované fragmenty kódu. Vsechny píklady byly testovány pímo z textu, který je ve strojov citelné form. Krom ukázek efektivního pouzívání jazyka jsme se také snazili, kde to bylo mozné, ilustrovat uzitecné algoritmy a principy dobrého programátorského stylu a kvalitního návrhu.
Tato kniha není úvodem do programování; pedpokládá jistou zkusenost se základními koncepty programování jako jsou promnné, piazovací píkazy, cykly a funkce. Nicmén ani programátor zacátecník by neml mít problémy s chápáním výkladu, i kdyz rady zkusenjsího kolegy mohou samozejm pomoci.
Nase zkusenosti ukázaly, ze C je píjemný, expresivní a vsestranný jazyk s sirokým vyuzitím. Snadno se ucí a slouzí tím lépe, cím více rostou vase zkusenosti s ním. Doufáme, ze tato kniha vám pomze ho správn pouzívat.
Této knize a nasí radosti z jejího psaní velice pomohly rady a konstruktivní kritika mnoha pátel a koleg. Zejména Mike Bianchi, Jim Blue, Stu Feldman, Doug McIlroy, Bill Rome, Bob Rosin a Larry Rosler pecliv pecetli nkolik verzí této knihy. Jsme také zavázáni Alovi Ahovi, Steveovi Bournemu, Danu Dvorakovi, Chucku Haleyimu, Debbie Haleyové, Marion Harrisnové, Dicku Holtovi, Steveovi Johnsonovi, Johnu Masheyimu, Bobovi Mitzemu, Ralphovi Muhaovi, Peterovi Nelsonovi, Elliotovi Pinsonovi, Billovi Plaugerovi, Jerrymy Spivackovi, Kenovi Thompsonovi a Peterovi Weibergerovi za uzi-

16 Pedmluva k prvnímu vydání
tecné pipomínky k rzným stadiím knihy a Mikeovi Leskovi a Joeovi Ossannaovi za neocenitelnou pomoc pi sazb.
Brian W. Kernighan Dennis M. Ritchie

Úvod
C je univerzální programovací jazyk. Jeho historie je úzce spjata s operacním systémem UNIX, kde byl vyvinut, protoze jak systém, tak i vtsina program, které na nm bzí, jsou napsány v C. Avsak jazyk sám není svázán s zádným operacním systémem nebo hardwarovou platformou; a i kdyz byl nazýván ,,systémovým programovacím jazykem", protoze se hodí pro psaní kompilátor a operacních systém, byl stejn dobe vyuzíván pro psaní dlezitých program v mnoha rzných odvtvích.
Mnoho dlezitých myslenek jazyka C vychází z jazyka BCPL, který vyvinul Martin Richards. Vliv BCPL na C probíhal nepímo skrze jazyk B vytvoený Kenem Thompsonem v roce 1970 pro první systém UNIX na pocítaci DEC PDP-7.
BCPL a B jsou ,,netypované" jazyky. Naproti tomu C nabízí mnozství datových typ. Základními typy jsou znaky, celá císla a císla s pohyblivou desetinnou cárkou. Jazyk C navíc obsahuje hierarchii odvozených datových typ vytvoených pomocí ukazatel, polí, struktur a unií. Výrazy se skládají z operátor a operand; jakýkoli výraz vcetn piazení nebo volání funkce mze být píkazem. Díky ukazatelm lze v jazyce C pouzívat strojov nezávislou adresovou aritmetiku.
Jazyk C nabízí základní konstrukce pro ízení bhu, které jsou nezbytné pro správn strukturované programy: seskupování píkaz, rozhodování (if-else), výbr z mnoziny mozných pípad (switch), cykly s testem ukoncení na pocátku (while, for) nebo na konci (do) a pedcasný skok z cyklu (break).
Funkce mohou vracet hodnoty základních typ, struktury, unie nebo ukazatele. Jakoukoli funkci lze volat rekurzivn. Lokální promnné jsou obvykle ,,automatické" a jsou znovu vytváeny pi kazdém zavolání funkce. Definice funkcí nesmí být vnoené, ale deklarace promnných se ídí blokovou strukturou. Funkce programu v jazyce C mohou existovat v oddlených zdrojových souborech, které jsou kompilovány zvlás . Promnné mohou být viditelné jen v dané funkci, mimo funkci, ale pouze v jednom zdrojovém souboru, nebo v celém programu.
Preprocesor provádí náhradu maker v textu programu, vkládání dalsích zdrojových soubor a podmínnou kompilaci.
C je relativn ,,nízkoúrovový" jazyk. To není mysleno pejorativn; tím chceme íci, ze C pracuje se stejnými objekty jako vtsina pocítac, jmenovit se znaky, císly a adresami. S tím vsím je mozno pracovat pomocí aritmetických a logických operátor implementovaných skutecnými pocítaci.
C nenabízí zádné operace, které by pímo pracovaly se slozenými objekty, jako jsou znakové etzce, mnoziny, seznamy nebo pole. Neobsahuje zádné operace, které manipulují s celým polem nebo etzcem, i kdyz struktury lze kopírovat jako atomické objekty. Jazyk nedefinuje jiný nástroj pro alokaci pamti nez statické definice a definice lokálních promnných ve funkcích, které pouzívají zásobník; není zde automatická správa pamti (garbage collector). Konecn, samotný jazyk C nemá zádné nástroje pro vstup a výstup; neobsahuje zádné píkazy READ nebo WRITE a zádné zabudované metody pro pístup

18 Úvod
k souborm. Nicmén vtsina implementací jazyka C obsahuje pro tyto úkoly rozumn standardní sbírku funkcí.
Podobn, C nabízí pouze jednoduché, jednovláknové ízení bhu programu: testy, cykly, seskupování a podprogramy, ale ne multiprogramování, paralelní operace, synchronizaci nebo rutiny.
I kdyz se absence nkterých tchto nástroj mze jevit jako zásadní nedostatek (,,Chcete íct, ze musím zavolat funkci, abych porovnal dva znakové etzce?"), malá velikost jazyka pinásí skutecné výhody. Protoze jazyk C je relativn malý, mze být popsán na malém prostoru a je mozné se jej rychle naucit. Programátor tak mze rozumn pedpokládat, ze zná a chápe celý jazyk a mze jej pravideln pouzívat.
Po mnoho let byla definicí jazyka C jeho referencní pírucka ­ v prvním vydání The C Programming Language. V roce 1983 organizace American National Standards Committee (ANSI) ustanovila komisi, jejímz úkolem bylo vytvoit moderní, úplnou definici jazyka C. Výsledná definice, standard ANSI neboli ,,ANSI C", byla dokoncena koncem roku 1988. Moderní kompilátory uz v té dob podporovaly vtsinu rys standardu.
Standard vychází z pvodní referencní pírucky. Jazyk je zmnn jen nepatrn; jedním z cíl standardu bylo zajistit, ze vtsina existujících program zstane platná, nebo, v pípad ze se program stane neplatným, budou kompilátory varovat ped novým chováním.
Pro vtsinu programátor byla nejdlezitjsí zmnou nová syntaxe deklarace a definice funkcí. Deklarace funkce nyní mze obsahovat popis argument funkce; syntaxe definice se zmnila stejným zpsobem. Tato informace navíc velice usnaduje kompilátorm práci pi detekci chyb zpsobených neodpovídajícími argumenty; podle nasí zkusenosti jde o velice uzitecné rozsíení jazyka.
V jazyce doslo i k jiným mensím zmnám. Výcty a piazení struktur, které patily k bzným rozsíením, jsou nyní oficiáln soucástí jazyka. Výpocty s pohyblivou desetinnou cárkou lze nyní provádt s jednoduchou pesností. Vlastnosti aritmetiky, zvlást pro typy bez znaménka, byly upesnny. Preprocesor je propracovanjsí. Vtsina tchto zmn má pouze malý vliv na vtsinu programátor.
Druhým dlezitým pínosem standardu je specifikace knihovny, která doprovází jazyk C. Specifikace definuje funkce pro pístup k operacnímu systému (napíklad pro ctení ze soubor a zápis do nich), formátovaný vstup a výstup, alokaci pamti, manipulaci s etzci a dalsí. Sbírka standardních hlavickových soubor pedstavuje jednotný pístup k deklaracím funkcí a datových typ. Programy, které pouzívají tuto knihovnu pro komunikaci s hostitelským systémem, mají zajistno kompatibilní chování. Vtsí cást knihovny vychází ze ,,standardní knihovny V/V" systému UNIX. Zde opt pro vtsinu programátor nedochází k tém zádným zmnám.
Díky tomu, ze jsou datové typy a ídicí struktury poskytované jazykem C podporovány pímo vtsinou pocítac, je knihovna nutná pro implementaci sobstacných program velice malá. Funkce standardní knihovny jsou volány pouze explicitn, takze se jim lze vyhnout, nejsou-li poteba. Vtsina z nich mze být napsána v C a jsou penositelné s výjimkou detail operacního systému, které zakrývají,.
I kdyz C odpovídá schopnostem mnoha pocítac, je nezávislý na jakékoli konkrétní hardwarové architektue. I s vynalozením malého úsilí je mozné psát penositelné programy, tedy programy, které mohou bzet bez úprav na rzných hardwarových platformách. Stan-

Úvod

19

dard jednoznacn hovoí o problémech s penositelností a pedepisuje seznam konstant charakterizujících pocítac, na nmz má program bzet.
C není siln typovaným jazykem, ale bhem jeho vývoje zesílila i jeho typová kontrola. Pvodní definice jazyka C sice nerada vidla zámnu ukazatel a celých císel, ale povolovala ji; to jiz déle neplatí a standard nyní pozaduje správné deklarace a explicitní konverze, které jiz díve vyzadovaly kvalitní kompilátory. Nové deklarace funkcí jsou dalsím krokem tímto smrem. Kompilátory varují pi vtsin typových chyb a neexistují automatické konverze nekompatibilních datových typ. Nicmén C si uchovává základní filozofii, ze programátoi vdí, co dlají; pouze pozaduje, aby své zámry uvádli explicitn.
C má stejn jako ostatní jazyky i své nedostatky. Nkteré operátory mají spatnou prioritu; obcas by syntaxe mohla být lepsí. Pesto se ukázalo, ze C je nesmírn efektivní a expresivní jazyk, který nasel uplatnní pi vývoji sirokého spektra aplikací.
Kniha je organizována následujícím zpsobem. Kapitola 1 pedstavuje kurz základ jazyka C. Smyslem této kapitoly je umoznit ctenái co nejrychlejsí start, protoze jsme pevn pesvdceni, ze nejlépe se lze nový jazyk naucit psaním program. Výuka pedpokládá základní znalost programování; nevysvtlujeme zde pojmy, jako je pocítac nebo kompilace (peklad programu) ani význam výrazu typu n=n+1. I kdyz jsme se snazili pedvádt uzitecné techniky programování kde jen to bylo mozné, kniha není koncipována jako referencní práce o datových strukturách a algoritmech; kdyz jsme byli pinuceni volit, soustedili jsme se na jazyk.
Kapitoly 2 az 6 detailnji vysvtlují rzné aspekty jazyka C formálnji nez první kapitola, i kdyz draz je stále kladen na píklady kompletních program, nikoli na izolované fragmenty. Kapitola 2 pojednává o základních typech dat, operátorech a výrazech. Kapitola 3 se zabývá ízením bhu programu: if-else, switch, while, for atd. Kapitola 4 probírá funkce a strukturu programu ­ externí promnné, oblasti platnosti, práci s nkolika zdrojovými soubory atp., a také se zmiuje o preprocesoru. V kapitole 5 jsou vysvtleny ukazatele a aritmetika ukazatel. V kapitole 6 jsou vysvtleny struktury a unie.
Kapitola 7 popisuje standardní knihovnu, která poskytuje jednotné rozhraní operacního systému. Knihovnu definuje standard ANSI a mla by být podporována kazdým pocítacem, který podporuje jazyk C, aby programy pouzívající vstup a výstup mohly být penáseny beze zmny z jednoho systému na druhý.
Kapitola 8 popisuje rozhraní mezi programy v jazyce C a operacním systémem UNIX. Zamuje se na vstup a výstup, systém soubor a alokaci pamti. I pesto, ze cást této kapitoly je specifická pro operacní systém UNIX, programátoi pouzívající jiné systémy v ní naleznou uzitecné informace vcetn vhledu do problematiky implementace jedné verze standardní knihovny a postehy týkající se penositelnosti.
Píloha A obsahuje referencní pírucku jazyka. Oficiální definici syntaxe a sémantiky jazyka C pedstavuje samotný standard ANSI. Nicmén tento dokument je urcen pedevsím pro autory kompilátor. Zdejsí referencní pírucka definuje jazyk strucnji, bez pehnan formálního stylu. Píloha B je shrnutím funkcí standardní knihovny, opt spíse pro uzivatele nez pro implementátory. Píloha C je krátkým shrnutím zmn oproti pvodnímu jazyku. Budete-li na pochybách, zstává konecnou autoritou standard a vás kompilátor.

