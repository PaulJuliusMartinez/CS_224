IMPROVED SHADING PERFORMANCE BY AVOIDING VECTOR NORMALIZATION
Anders Hast
Creative Media Lab University of Gavle, Kungsbacksvagen 47, S-801 76 Gavle, Sweden. aht@hig.se
Tony Barrera
Cycore AB Dragarbrunnsgatan 35, P.O. Box 1401, S-751 44 Uppsala, Sweden
Ewert Bengtsson
Centre for Image Analysis University of Uppsala, Lagerhyddsvagen 17. S-752 37, Uppsala, Sweden. ewert@cb.uu.se

ABSTRACT
Phongs illumination model requires unit length vectors. The surface normal has to be normalized due to the linear interpolation, and if we use single point light sources or a xed view point, we have to normalize the vectors pointing to the light source and to the viewer. Unfortunately, normalization is a relatively costly operation. One of the main reasons for this is the square root involved. But when we calculate the re ection vector, we actually do not need a normalized normal. This fact can be used in order to get an approximation for the vector we want when we interpolate between normals. The result is faster Phong shading and faster lighting calculations when we are using a single point light source or having a viewer which is not placed at in nity.
Keywords: Shading, Illumination, Normalization

1 INTRODUCTION
Shading makes facetted objects appear smoothly curved. An illumination model is applied in the shading process in order to achieve this e ect. When realism is important, we use a global illumination model like ray tracing or radiosity, which take interre ections between facets into account. But when speed is important, a local illumination model is used. We shall see how the latter could be optimized for di erent shading techniques. In Phongs illumination model Phong75 , the intensity at a point on the surface of an object can be modeled by summing intensities of the di use and specular components, respectively:
I = KdN  L + KsR  Vn; 1

fwporhroeptrheeertKsypdoefcisuthlaaersmpuarroftaepcreiera,tlyKcosofnistshtaaenmstuarftofearrciaethl, ecNodniisstauthnseet normal vector for the surface, L is a vector pointing in the direction to the light source, R is the
vector in the direction of the perfect re ection
from the light source, V is the vector pointing
to the viewer, and nally n is the shininess value which a ects the size of the highlighted area.

Similar models can be used, and some include am-

bient light and the intensity of the light source.

Sometimes a distance term is used, since the in-

tensity of light becomes smaller with increased

distance. We shall look closer at how the dif-

fuse term
Is = R 

VId

= N  L and the
could be e ciently

specular term computed. It

should be pointed out that we then have to raise

the specular term to the power n which is a costly

operation. We also have to multiply the terms

with their material constants, and nally add

them together. In subsequent sections, when we

will count operations in the inner shading loop,

we will not take into account these operations

since they have to be done, regardless of what-

ever and

technique Is.

we

choose

in

order

to

compute

Id

When we use this illumination model to shade pixels, there are basically two techniques we can use. They are known as Gouraud- Goura71 and Phong shading Phong75 , named after their inventors. In Gouraud shading, the intensities at the vertices of the polygon are calculated rst. Then bilinear interpolation is used to calculate the intensity of interior pixels. This method is fast, but has its limitations. One examples is when the intensity at the vertices happen to be the same. Then the intensity will be the same over the whole polygon. Phong shading overcomes this problem by interpolating the normals at the vertices. Hence, we will have a linearly interpolated normal at each pixel, which we can use to calculate the intensity by using the illumination model. The drawback is that this takes more time, and one reason for this is the normalization process and the square root involved. Another reason why we prefer Phong shading is that we get more accurate highlights on a surface. Gouraud shading tend to smear out the highlight over a polygon because the intensity is interpolated over the polygon. That is, if the highlight falls close enough to a vertex. But if it falls on to the interior of a polygon, it will not be visible at all, if the vertexes are too far away from that point. Another disadvantage with Gouraud shading is that it tend to produce more mach bands than Phong shading.

1.1 Normalization
Normalization is a 'necessary evil' in many situations. One example is Phong shading, where we have to normalize the linearly interpolated normal, otherwise it will be too short and that will a ect the lighting calculations. The interpolation
of N = 1 , N1 + N2 is often done as a re-
currence sequence:

N=N_1 dN=N_2-N_1 n for i=1:n
N=N+dN end

The drawback is that normalization is a costly

operation, not at least depending on the square

root operation needed, as seen in the following

equation, where N is an unnormalized vector in

3D space.

N0

=

k

N N

k

=

pNN

N:

2

1.2 Fast Phong Shading

Du Du 79 showed
malized and N is not,

tchoautldkNbNeLk

, where L is
evaluated for

norsuc-

cessive values of x with 3 additions, 1 division and

one square root per pixel. We will show why this

is so and later compare it to our new algorithm,

which we will implement using this scheme. It

should be pointed out that there exists a num-

ber of other techniques to do fast Phong shading,

like the ones introduced by Bishop and Weimer

Bisho86 and Ouyang and Maynard Ouyan96 ,

but in this paper we shall limit our selves to com-

pare it to Du 's method only.

As we saw earlier we can interpolate from normal
xeNavl2o1a,nltugoaxtNt1eh, 2eNkbs=ycLaunsiNninlsi2gtne,eaadrfNr,eoc1amus=rDrnxeun1acnteddo. idLmx,e2tt,=hNewnNh=we1r.keexhInf+avwm=ee:

N  L = Ax + B = p;

3

where A = k  L and B = m  L. We must not
forget the normalization. Let

N  N = Cx2 + Dx + E = q; 4

where C = k2, D = 2k  m and E = m2. Note

that E = 1, since m = N1 has unit length. Then

we have:

NL kNk

=

pCxA2 x++DBx

+E

=

ppq :

5

Now we can set up the following recurrence:

pi+1 = pi + dpi qi+1 = qi + dqi dqi+1 = dqi + d2q

6 7
8

awnhderde2pq0==2BC,. dp = A, q0 = E = 1, dq0 = C + D

tThheisscraenculrinreen, caeloinsgevwailtuhatIedd=inpt=hpeqi,nwnehriclhooisp

for the

di use intensity for the pixel. For each new scan

line and

wd2eq.must

recalculate

A,

B,

C,

D,

p0,

q0,

dq0

As we can see, this recurrence could be evaluated for successive values of x along a scan line with 3 additions, 1 division and one square root per pixel.

2 THE REFLECTION VECTOR

In many papers and computer graphics text books the following equation is used for calcu-
lating the re ection vector R:

R = 2N0L  N0 , L:

9

Note that N0 must have unit length. This equa-
tion is often derived by using the equation for projecting a vector onto another, as in Foley97 and Hearn97 . But they use the form where the vector which is project onto is normalized. We shall remake their derivation by using the form where it is not normalized. Hence, we do not need to use
a normalized N. This fact is rarely mentioned in
computer graphics text books, but it is nothing new. As an example it could be mentioned that this fact is used by Voorhies and Foran Voorh94 in their environment mapping technique.

Proposition 2.1. If we have a normal N of ar-
bitrary length, and a light source in the direction
of unit vector L, then the unit vector R in the
direction of a perfect re ection is

R

=

2N

N N

 

L N

,

L:

10

Proof. Let P be the projection of L onto N. Then

P

=

N kN

L k2

N:

11

Let K be the vector from P to L, then

K = L , P:

12

We know that

R = P , K;

13

thus

R = P , L , P 

R = 2P , L 

R

=

2

N kN

L k2

N

,

L:

14 15
16

Finally Eq.2 gives:

R

=

2N

N N

 

L N

,

L:

3 HYBRID SHADING Proposition 2.1 says that we can get R with-
out normalizing the normal. This means that

we can get a faster method for calculating high-

lights, that is, if we do not calculate the dif-

fuse light by using these normals, since it would

mean that we had to normalize them anyway.

Instead we use Gouraud shading for the di use

light only. Our new hybrid algorithm would thus

use the KdN  L for the di use light at the ver-

texes which we then bilinearly interpolate over

the polygon. Then we specular light, where

RuseisKosbRtainVednbtyo

get the linearly

interpolating the normals, and using proposition

2.1. This implies that we have to compute all

normals at the edges by interpolation, but we do

not have to normalize them.

If we assume that V = 0; 0; ,1 and remembering that N is interpolated and thus not normal-
ized, then

R



V

=

Lz

,

2Nz

N N

 

L N

:

17

We can rewrite this equation by using Du 's
scheme. Let A1 = k  L, B1 = m  L, A2 = 2kz,
and B2 = 2mz, then

N  L = A1x + B1;

18

and

2Nz = A2x + B2;

19

thus
2NzN  L =
A1x + B1A2x + B2 = A1A2x2 + A1B2 + A2B1x + B1B2:

20

We can multiply LZ with the denominator to get rid of the subtraction. Let the denominator be:

N  N = Dx2 + Ex + F = q: 21

Then, the numerator can be rewritten as:

Ax2 + Bx + C;

22

wanhderCe A==LLzFzD,,BA11BA22.,

B = LzE Now we

,A1B2 ,A2B1
can set up the

following recurrence:

pi+1 = pi + dpi dpi+1 = dpi + d2p qi+1 = qi + dqi dqi+1 = dqi + d2q

23
24 25 26

wFh=eremp0m=,

C, dq0

dp0 = A + B, = D + E and

d2p d2q

= 2A, = 2D.

q0 = If we

Figure 1: The Venus de Milo statue, hybrid shaded
have normalized normals on the edges we could set F = 1. This recurrence is evaluated in the inner loop for the scan line, along with Is = p=q, which is the specular intensity for the pixel. As we can see this recurrence could be evaluated for successive values of x along a scan line with 4 additions and 1 division per pixel for the specular light and 1 addition for linearly interpolating the intensity of the di use light. Fig.1 shows the famous Venus de Milo statue which has been modeled with 1416 triangles. Here it is shaded using the hybrid shading technique.

4 REFLECTION SHADING

Here we will introduce another way to calculate

NL without having to Normalize N. The idea is

that if we could nd a vector H which is exactly

halfway between our interpolated, and unnormal-

ized normal N and a vector n which is normal-

ized, then
n around

we could
H to get

Nus0ewphroicphoswitililonbe2i.n1thtoe

wrap same

directions as N but will be normalized. The nice

thing is that we do not have to use the square

root in this method. Even though the equation

will be later.

longer, we can The problem is

reduce it, as that we will

wneotshanlldsHee

without using a square root. But we could ob-

tain approximations of H in several ways. One

very easy and many times su ciently good way

liesttoHle=t

nn

+beNt.heRneomremmabl eorf

the polygon, and to that we do not have

to normalize H:

N0

=

2H

H H

 

n H

,

n:

27

One nice thing about computing H this way is that we can interpolate H instead of N. We can

easily prove that

1 , N1 + N2 + n = 1 , N1 + n + N2 + n:

28

Now, let us see what happens with Eq.27 when we use the same scheme to evaluate:

N0



L

=

2H

 LH HH



n

,

n



L:

29

We could evaluate each of the two factors in the numerator for them selves, which will require 2 additions and 1 multiplication. But we could also evaluate the product itself:

2H  LH  n =
2A1x + B1A2x + B2 = Ax2 + Bx + C = p;

30

2fwoBhr1eABre12A,. A=T2h,2eABn11wAae2n,cdBanB=2se2tasAu1wpBes2idm+idiAla2erBaer1lxieparrneidsnsCiothn=es previous section.

The point is that the numerator could be evalu-

ated in 2 additions. The denominator is basically

the same as the last time so it will again be eval-

unatLed.

in 2 This

additions. But we could be done in 1

must also evaluate addition as we saw

earlier. And we shall not forget that we have to

subtract this value from the result of the division.

We could even get rid of this subtraction by mul-

tiplying n  L by the denominator and subtract

the result from the numerator. We will show the

principle. Let the denominator be:

H  H = Dx2 + Ex + F = q; 31

and

n  L = G:

32

TGhDenx,2t+heBnu,meGrEatoxr

can be
+ C ,

rewritten as: A , GF : If we use this

scheme, we could evaluate this expression in 4

additions and 1 division. Compare this to the 3

additions, 1 division and 1 square root of Du 's

fast Phong shading. Hence, we substituted the

square root by 1 addition in the inner loop. This

method is faster in the inner loop, but requires a

bit more computation in the setup for each scan

line.

4.1 Quality of the new Method

What about the error introduced by choosing a vector which is not halfway between the two vectors? Fig.2 and 3 shows that it is very hard for the human eye to distinguish any di erences between re ection shading and Phong shading. The
interpolation of the normal between N1 and N2
gives us an error itself, since the angle between the normals will not be the same on a scan line. The point is, linear interpolation does not give us the correct normal, neither does re ection shading.

But why is it a good idea to choose n as the nor-

mal of the polygon? The reason for this is that

n + N should not be 0 the zero vector or too

close. There is of course no guarantee that n + N

will not be 0, but if the surface is not too curved

we can use this scheme. Choosing, for example,

L or V as n will produce bad results when n + N

comes close to 0. Of course this means that we

must have the normal of the polygon available.

If we are rotating our object, this means that we

have to rotate this 'extra' normal, which obvi-

nopurossoblyltehimsatabHydics=haodNovas0ninn,tg1ag+teh.eNWpnr.eevciaonusgNet0

around as our

this new

4.2 Highlights

If we want to add highlights to Du 's method

iuwsBlealaircndoinnou7ttl8ednpHusriostedy=utIchksteLL=j++euVVxsNptkraaeHssnsdIiodftonhirsei,ennatwercevohadrplueuiacxaeletidzel.etbShtyhienaBsctpleiewnIcnse-

could compute the specular component with the

same amount of work as for the di use compo-

nalerneta.dByuctomwepuctoeudldpeqxpwlohiitchthwe efawctiltlhuastewteo

have nor-

malize both N  L and N  H. Since a division

ctaaknecsamlcuuclahtelo1n=gpertqimerstthaanndatmheunltmipulilctaiptiloynthwies

quote with p and r, where r is the recurrence vari-

able for the specular re ection, and p is the re-

currence variable for the di use re ection. Hence,

our total computation for both di use and spec-

ular light will be 4 additions, 2 multiplications 1

division and 1 square root.

What if we will use Eq.17 instead? If we would use the fast form for calculating Is that we developed in the 'Hybrid Shading' section, then we have to calculate the numerator for Id separately, yielding a total of 5 additions, 2 divisions and 1 square root.

We could also exploit the fact that the numerator and the denominator is the same as in Du 's method, except that we have no square root:

R  V = Lz ,

Lz

,

2Nz

p q

:

2Nz

NL NN

=

33

tWfdahrceeit=crtaehc2nauktmr.r2aeTNknhecz0eet=qhruei+2oe1txkep=xpr=e+rsqismic+oonud.lrsdhiT,,ohawresthnewrerweiefeswarcw0eou=uelasder2lmutiehsr0ee,,
be evaluated in 3 additions and 1 division. Our new recurrence can be evaluated in 1 addition and we also have 1 multiplication and 1 subtraction in the original expression. So the total cost of the calculations of Id and Is will be 4 additions, 1 subtraction, 1 multiplication, 2 divisions and 1 square root.

What is the di erence between using Eq.17 and

Eq.9? Actually, as we will see, we will end up

with the same equation. Let us use Eq.9, then

we can use the Precalculate s

s=am1e=pinitqialinvaoluredserfotrorgaest

above. rid of

one division, but we get two extra multiplications

instead

Is = Lz , rsps:

34

But ss = 1=pq2 = 1=q, so we have the same

expression as in Eq.17, as we said earlier. The

total cost of calculating Id and Is will be 4 ad-

ditions, 1 subtraction, 3 multiplications, 1 divi-

sion and 1 square root. This version is probably

faster than the previous one since a multiplica-

tion is many times faster than a division on most

computers. By using this method, we only need

1 subtraction and 1 multiplication more, in or-

der to calculate R  V, than we would use if we

were about to calculate N  H. So the advantage

of using the latter is not that great. Especially

since the latter will produce a value that is greater

than the rst one, and thus, have to be raised to

a higher power to produce the same result. This

is the case, since the angle between N and H is

always smaller than the angle between R and V.

Fig.2 shows the Venus de Milo statue again. This time it is Phong shaded and Eq.34 has been used to get the highlights.

4.3 Adding Highlights to the Re ection Shading
If we would like to use Blinn's method in order to add highlights to our re ection shading technique, then we could easily use equation 29 to evaluate

Figure 2: The Venus de Milo statue, Phong shaded with highlights
NH instead of NL, where H is the halfway vec-
tor. The denominator will be the same as when we compute the di use intensity so the total cost will thus be 6 additions 2 multiplications and 1
RdivisVionin. sItfewade,ownethceooutldheornhcaendagwaainntutsoectohmepfuatset
version from the 'Hybrid Shading' section with the re ection shading method for the di use intensity. Hence, we will have a total of 8 additions and 2 divisions. This time we can not use any of the values from the other calculations to make the computation faster. But if we choose to use Eq.34 we can evaluate it in 6 additions 1 subtraction, 3 multiplications and 1 division. Note that r must be computed with Eq.27, hence the extra additions. Fig.3 shows the Venus de Milo statue re ection shaded, using this technique for the highlights. The normals along the edges and along the scan lines are interpolated using the 'reection' technique.
5 POINT LIGHT SOURCES
A simpli cation often used in applications where speed is crucial, like in games, is to use a paral-
lel light vector L, which means that we can use
the same vector over the polygon since it does not change. But if we want to use a single point light source like a spotlight, then we must obtain the vector between the point light source and the pixel that we are currently shading. Once again we need to normalize it, using Eq.2. If our light source is placed at point F , and our pixel is at

Figure 3: The Venus de Milo statue, re ection shaded with highlights

point P , then

L

=

k

F F

, ,

P P

k:

35

If our light source is a spotlight, then it has a main

direction P can be

S, then the
multiplied

winitthensSity,LIdn+, wIshe,reatnpwixielll

a ect the width of the spot which the spot light

generates when it shines on an object. This is ba-

sically the model introduced by Warn Warn83 .

If our single point light source is not a spotlight,

then it shines equally bright in all directions.

As shown in Eq.28 we could interpolate F , P directly, which is faster, then interpolating P and then subtracting F afterwards. This vector
must then be normalized. Of course, we will use a recurrence to do the computations.

5.1 Faster Computation

The trick introduced earlier in the 'Re ection Shading' section could also be used for single point light sources. Once again we must choose a vector that we will wrap around our vector which will lie almost halfway between this vector and
the unnormalized vector L = F , P . The obvious choice is S. Therefore, we set H = S+L, and
equation 27 gives

L0

=

2H

HS HH

,

S:

36

Once again we will be in trouble whenever S + L

is close to 0. One way to get around this problem

is to choose the discussed before.

previous
Thus H

L
=

Linn0s,te1a+d,Lans.

we

have

IEpabsyrqc,e.omsbsn3uius6olttntaissntp.hhtlyoeILuinfnl,wdgwtehtbeheecenwhuoiiwsnloeltesdeegncewotstoiuhtleqymdnuwoiswttdietieelhllccopaISmdlrcoupadLllnuai0cdctaeneIt.IesaddTwsahpeinetoxhdnt-
we can use Eq.36 to get:

S



L0

=

2

H H

 

S2 H

,

1:

37

Similar recurrences could be set up for evaluating this equation as we have done before. One of the consequences of using this method is that the width of the spot generated by a spotlight will be smaller than we would get by using ordinary nor-
malization. This is due to the fact that H is not halfway between L and S. This is an advantage
since we thus could use a smaller n.

6 FIXED VIEW POINT

Another simpli cation that is often used is having

the view vector V at in nity. If we want the view

vector to be at a xed point, we must calculate

the vector from this point to each pixel we are

shading. Hence, we must normalize this vector

too. view

IvfewcteorhaVvepaoinxteindgvaietwthpeoivnitewaterF,

with the we could

use the same scheme introduced in the previous

section. We set the vector to the viewer from

the pixel P on the polygon vie are shading as

V = F , P . Once again we can use our method

to to

normalize V.
wrap around?

WThheicbhesvtecchtooricsehiosuplrdobwaebclyhovos=e

0; 0; ,1 since it is in the middle of our view eld,

pvo+inVtin:g straight into the scene. We set H =

V0

=

2H

H H

 

v H

,

v:

38

7 CONCLUSIONS
We have shown that the equation for prefect reection could be rewritten in a form that does not need an unit length normal. When we implement both forms of the re ection equations, by using Du 's method, we actually get the same expression. A very fast shading method is to use Gouraud shading for the di use intensity and

compute the specular intensity by using the equation that does not need a unit length normal. Thus, it is a hybrid between Gouraud and Phong shading.
Re ection shading was introduced that utilizes the fact that we do not need a unit length normal in the re ection equation. When we fold a unit length vector around a vector halfway between this vector and the unnormalized vector we get the same vector but with unit length. The problem is to nd that vector halfway in between. But we showed that we could easily get an approximation that will produce satisfactory results.
This trick could also be used to obtain unit length vectors when we are using single point light sources or a xed point view vector.
REFERENCES
Du 79 T. Du , Smoothly Shaded Renderings of Polyhedral Objects on Raster Displays ACM, Computer Graphics, Vol. 13, 1979, 270-275.
Bisho86 G. Bishop, D. M. Weimer, Fast Phong Shading Computer Graphics vol. 20, No 4, 1986.
Blinn78 J. F. Blinn, Models of Light Re ection for Computer Synthesized Pictures Proc. 5th Conference on Computer Graphics and Interactive Techniques, 1978.
Foley97 J. D. Foley, A. van Dam, S. K. Feiner, J. F. Hughes, Computer Graphics - Principles and Practice Addison-Wesley, 1997.
Goura71 H. Gouraud, Continuos Shading of Curved Surfaces, IEEE transactions on computers vol. c-20, No 6, June 1971.
Hearn97 D. Hearn, M. P. Baker, Computer Graphics Prentice Hall, 1997.
Ouyan96 S. Ouyang, D. E. Maynard, Phong Shading by Binary Interpolation Comput. & Graphics vol. 20, No 6, 1996, pp.839-848.
Phong75 B. T. Phong, Illumination for Computer Generated Pictures Communications of the ACM, Vol. 18, No 6, June 1975.
Voorh94 D. Voorhies, J. Foran, Re ection Vector Shading Hardware Proceedings of SIGGraph, 1994, pp. 163-166.
Warn83 D. R. Warn, Lighting Controls for Synthetic Images ACM, Computer Graphics, Vol. 17, No. 3, 1983, 13-21.

