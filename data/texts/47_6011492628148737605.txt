Dsplaays eqDispla

The Origins of the Teapot
Frank Crow, Xerox PARC (from conversations with Martin Newell and Jim Blinn)

(o0.) (2.1) (l)

pl
midpoint

((x- 1)2.(y+ 1)/2)

p2 (1,y/2)

Figure 2. The original sketch of the Teapot.

(1.0)
Figure 3. Bezier approximation to a quarter-circle.

Figure 1. Digitizing circa 1971. In the early 1970s at the Univer-
sity of Utah, there was substantial activity in the development of rendering algorithms. However, there was a constant shortage of data for interesting shapes to be displayed with these algorithms. Tiring quickly of spheres, cubes, tubes, and other easily generated shapes, interesting efforts were often mounted to capture more elaborate data.

One set of efforts took the form of developing automated methods for capturing physical measurements. 3-D digitizers using mechanical means, photogrammetry, and even lasers were developed. However, much of the interesting data was completely handcrafted. In 1971 Ivan Sutherland had his computer graphics class digitize his VW beetle (see Figure 1). This took weeks, during which time the VW could be seen here and there in Salt Lake City covered with paint used for reference marks.
In a similar spirit, Martin Newell, in 1975, noticed the pleasing shape of the teapot he kept on his desk. Taking some square-grid graph paper, he made a rough sketch of the profile of the teapot as seen from the side (see Figure 2), capturing the essence of the shape, but not the precise dimensions (differences can be seen around the spout and the knob on the lid). From the sketch he guessed at the location of suitable control points for cubic Bezier splines,'2 and then measured these points using the graph paper grid.

Having the control points for a profile of the teapot, it remained to

develop a three-dimensional sur-

face. The lid, rim, and body of the

teapot were treated as surfaces of

revolution, while the spout and han-

dle were developed as three-

dimensional tubes.

From Figure 2 it can be seen that

the body and rim are formed from

three Bezier segments sketched

along the right side of the profile.

Four points are needed to define a

cubic segment. The rim is defined

by points forming a leftward-leaning

trapezoid sitting above the horizon-

tbgaiolndggyrtiihdseldipenrefoifmniaelrdekbwehydifl"oe3u.rr"upnoTnihinetnsguphfpurgeo-rm

gridline 3 to gridline 1. The lower

body is then defined by the remain-

ing four points running down to the

bottom.

Once you have a set of Bezier con-

trol points which generate a close

approximation to a circle, a surface

of revolution can be built by

replicating the circle, scaled and

translated, for each of the control

points on the this produces

profile.
a mesh

For the teapot of control

points with each vertical path con-

taining the control points for three

Bezier segments and each horizon-

8

0272-1716/87/0100-0008$01.00 01987 IEEE

IEEE CG&A

Figure 4. Teapot patch boundaries (rim and body removed for clarity).

Working backwards from the midpoint:
sqrt(2)/2 = (plx+p2x)/2,
plx = (x/2+(x+1)/2)/2 = (2x+1)/4,
and
p2, = ((x+1)/2+1)/2 = (x+3)/4.
Substituting gives:
sqrt(2)/2 = (pl,+p2j)/2 = (3+4)/8.
Then, solving for x:
x = 4/3(sqrt(2)-1), or roughly 0.5523.

tal path containing four Bezier segments, each approximating a quarter-circle. The patch structure of the surface is then implicit in that patch corners occur where a control point lies on segment boundaries on both vertical and horizontal paths.
To approximate a quarter-circle, we know that the polygon formed by the four control points for a Bezier cubic (the control polygon) must obey some constraints (see Figure 3). It must be symmetric about its midpoint. The line segments at the ends must be at right angles to one another. Finally, the midpoint of the resulting curve should lie on the circle defined by the endpoints and the slopes at the endpoints. From these constraints the coordinates of the inner knots can be derived.
Let's look at the quarter-circle
from (0,1) to (1,0). Its midpoint lies
at (sqrt(2)/2, sqrt(2)/2). Using the standard de Casteljau subdivision construction3 to find the mid point of the curve, we can work back to find the control points that will give us the right midpoint. Recall that the midpoint of the curve is the midpoint of the line, pl-p2. pl and p2 are themselves constructed from the midpoints of lines connecting midpoints of edges of the control polygon.
We know that the first and last edges of the control polygon must be perpendicular to one another. Since the polygon must also be symmetric, we can find the control point coordinates as follows:
The four control points must be (0,1), (x,1), (1,y), (1,0), where x = y. Let's look just at the x coordinate.

Figure 5. Teapot control points (rim and body removed for clarity).
The spout and handle, each formed from four patches, were made by guessing at the positions of control points to form the inner and outer profiles as seen in Figure 2 The x and y coordinates of the control points were then digitized from the sketch. For the handle, a second set of profiles was specified by providing a near and a far zcoordinate for each digitized point. The pairs of profiles are defined by a constant displacement as can be seen in Figure 5. The control points for the spout were similarly defined, except that the displacement was varied to allow a tapering shape. In Figure 2 a top-view sketch of the spout can be seen above its profile sketch. This formed the basis for the displacements in z. The top view also shows how the tip of the spout is turned in upon itself.
Once the data were generated, a line-drawing program, similar to the code provided in this issue, was used to display the resulting patches on an early storage tube display.
The teapot itself, and the original

January 1987

Figure 6. The original teapot from Newell's desk.
data, are somewhat taller than the shape we recognize today. As can be seen from notes on the original sketch, the original data showed the bottom of the rim to be three units above the origin. The rim in the current data is 2.4 units above the origin, or 80 percent as high. The original data was scaled a number of times in its early life. Jim Blinn recalls that the current shape was felt to be the most esthetic at some point. Figure 6, an illustration from Martin Newell's PhD dissertation, shows the teapot in its original form.
The teapot's first major appearance was in a paper at SIGGRAPH 76 (reprinted in the October 1976 issue of the Communications of the ACM). Much of the teapot's fame comes from this use and subsequent, ever more spectacular, images by Jim Blinn. Blinn found the shape to be a particularly good test object. It has both positive and negative curvature on the surface. The neck of the knob on the lid is a saddle shape, a particularly difficult form for some algorithms to render. Note also that the handle and spout both intersect the surface of the body, forcing intersecting surfaces to be handled properly.
The original data had only 28 patches. The additional four patches in the data used here add a bottom to the teapot. Since the real teapot served primarily to hold water, it seemed only proper that its numerically defined analog should be equally capable.
Martin Newell's teapot now resides in the Computer Museum in Boston, where it is displayed next to its computer-generated likeness. It is unlikely that it will ever again need to hold water.
9

References on Bezier curves and surfaces

1. James D. Foley, Andries van Dam. Fundamentals of Interactive Computer Graphics (Chapter 13). Addison-Wesley, Reading, Mass., 1982.

2. William M. Newman, Robert F. Sproull. Principles of Interactive Computer Graphics, 2nd Ed. (Chapter 21). McGraw-Hill, New York, 1973.

3. Wolfgang Boehm, Gerald Farin, Jurgen Kahmann. "A Survey of Curve and Surface Methods in CAGD," ComputerAided Geometric Design, Vol. 1, No. 1. July 1984, pp. 1-60.

The Computer Museum and the Teapot
The original ceramic teapot that inspired Martin Newell's computer creation is now on display at The Computer Museum in Boston, Massachusetts, where it is in a prominent display in one of the four galleries that showcase the most extensive collection of historically significant computer technology ever assembled. These galleries focus on "The Vacuum Tube Era," "The Transistor Era," "The Integrated Circuit Era," and "The Computer and the Image."
The museum began with the effort to rescue the Whirlwindthe world's first real-time, parallel, vacuum tube computer with a core memory. This led to the opening of the museum in 1979 by Digital Equipment Corporation in its Marlboro, Massachusetts, facility. The museum became an independent nonprofit institution in 1982 and moved to its present facilities on Museum Wharf in 1984.

Today, the visitor can wander through the museum and see a collection of photomurals, timelines, and vintage computers installed in re-creations of their original setting. Dozens of interactive exhibits, including a gallery of personal computers and state-of-the-art graphics display processors, invite the visitor to do more than look. Such special exhibits as the current "On One Hand...Pocket Calculators Then and Now" supplement the permanent exhibits.
The museum also sponsors a variety of special events and contests. Recent ones include a contest to find the earliest personal computer and "The First International Core War Tournament." The personal computer contest brought 137 new machines to the museum's collection, including one thought to be the first commercial personal computer, the Kenback-1 (1971). In the tournament 29 programs paired off in battle for supremacy within a computer in the game created by A.K.

Dewdney and described in his Computer Recreations column in the May 1984 issue of Scientific American.
The Computer Museum Report, a quarterly publication, provides fascinating and informal looks into the history of computing as well as details of activities at the museum. In 1986 the report carried articles by such distinguished authors as J. Presper Eckert on the genesis of the Eniac, Daniel Bricklin on the origins of VisiCalc, and Stephen Wozniack on his career in electronics and the development of the Apple 1.
The Computer Museum is located at Museum Wharf, 300 Congress Street, Boston. Its hours are 10 a.m. to 6 p.m. Tuesday through Sundayand until9p.m.on Friday. Membership in The Computer Museum brings you The Computer Museum Report, free admission, invitations to previews, and a 10 percent discount at the museum's store. Write to the Membership Coordinator or call (617) 426-2800.
a-

Pascal Code to Display Wire Frame Model

{ The following Pascal procedure, "Display Patches," will draw a wire frame representation of the Besier patch data in the arrays "Ducks" and "Patches." The loading of the data into the arrays is not shown. The following global declarations are assumed:

CONST Degree = 3; { The degree of the Bezier spline used } Duck}Count = 306; { The number of control points, "Ducks" } Patch-Count = 32; { The number of surface patches }

TYPE

Duck-Type =
DuckJndex-Type

RECORD X , Y, Z = 1 .. Duck-Count;

:

Real

;

END;

{ Each duck is a three-vector }

Duck}Array-Type Patch-Type =

=ARARRARYAY[ 0[.1..D.egDruecek-,C0o.u.ntDe]grOeFe

Duck-Type; ] OF Duck1ndex-Type;

{ Each patch points to 16 ducks }

PatchArray-Type = ARRAY [ I .. Patch-Count ] OF Patch-Type;

VAR

Ducks Patches

: Duck}Array_Type; : Patch-Array_Type;

{ store ducks here I
{ which ducks go with which patches }

{ The procedure "Display-Patches' and its support procedures are given below. Note that the parameter "Steps" controls the granularity of the subdivision of each patch for display. Try a value of 6 to start, then experiment. The procedures "Move" and "Draw" should be replaced with the graphics procedures appropriate for your system. }

10 IEEE CG&A~~~~~~~~~~~~~~~
10 IEEE CG&A

PROCEDURE Blend-Vector (DO, Dl , D2 , D3: Duck-Type ; T: Real ; VAR Result: DuclkType);

BEGIN { Calculate vector cubic Besier spline value at parameter T }

Result.X Result.Y Result.Z

:= := :=

DO.X*(I-T)*(I-T)*(I-T)
DO.Y*(l-T)*(l-T)*(l-T) DO.Z*(l-T)*(1-T)*(l-T)

+ + +

Dl.X*3*T*(l-T)*(l-T) + D2.X*3*T*T*(1-T) + D3.X*T*T*T Dl.Y*3*T*(l-T)*(l-T) + D2.Y*3*T*T*(1-T) + D3.Y*T*T*T Dl.Z*3*T*(l-T)*(l-T) + D2.Z*3*T*T*(1-T) + D3.Z*T*T*T;

END ; { procedure blend-vector }

PROCEDURE Display-Curve (DO, DI, D2, D3: Duck-Type; Steps: Integer);

VAR { Find "Steps+l" points on the spline and }

T, Step: Real;

{ draw "Steps" line segments }

Temp : Duck-Type;

BEGIN

Step := I / Steps

T := Step;

Move (DO.X, DO.Y, DO.Z);

{ move to start of spline }

WHILE T < I + Step / 2 DO

BEGIN

Blend-Vector (DO, DI, D2, D3, T, Temp);

Draw (Temp.X, Temp.Y, Temp.Z); { draw line segment to next point }

T := T + Step;

END ; { while t < }

END ; { procedure display-curve }

PROCEDURE Display-Patch (VAR Patch: Patch-Type ; Steps: Integer);

VAR T :Real; Step: Real; DO, DI, D2, D3: Duck}Type; { ducks for a particular constant U or V value }

BEGIN

Step := 1 / Steps

T := 0;

WHILE T < 1 + Step / 2 DO

BEGIN

{ splines of constant U }

Blend-Vector Blend-Vector Blend-Vector Blend-Vector

(Ducks (Ducks (Ducks (Ducks

[ [ [ [

Patch[O, Patch[l, Patch[2, Patch[3,

0]], 0]], 0]], 0]],

Ducks Ducks Ducks Ducks

[ [ [ [

Patch[O, Patch[l, Patch[2, Patch[3,

1]], 1]], 1]], 1]],

Ducks Ducks Ducks Ducks

[ [ [ [

Patch[O, Patch[l, Patch[2, Patch[3,

2]], 2]], 2]], 2]],

Ducks Ducks Ducks Ducks

[ [ [ [

Patch[O, Patch[l, Patch[2, Patch[3,

3]], 3]], 3]], 3]],

T, T, T, T,

DO) DI) D2)
D3)

Display-Curve (DO, Dl, D2, D3, Steps);

Blend-Vector Blend Vector Blend-Vector Blend-Vector

(Ducks (Ducks (Ducks (Ducks

{ splines of constant

[ Patch[O, 0]], Ducks

[ Patch[o, l] ], Ducks

[ [

PPaattcchh[[OO,,

2]], 3]],

Ducks Ducks

V} [ Patch[l, [ Patch[l, [ Patch[l,
[ Patch[l,

0]], 1]], 2]], 3]],

Ducks Ducks Ducks Ducks

[ [ [ [

Patch[2, Patch[2, Patch[2, Patch[2,

0]], 1]], 2]], 3]],

Ducks Ducks Ducks Ducks

[ [ [ [

Patch[3,
Patch[3,
Patch[3, Patch[3,

0]], 1] 2]], 3]],

T, T, T, T,

DO); D1);
DD23));;

Display-Curve (DO, DI, D2, D3, Steps) T := T + Step; END ; { while t < } END ; { procedure display-patch }

PROCEDURE Display-Patches (Steps: Integer);

VAR Index: Integer

{ "Steps" tells how much to divide up the patches }

BEGIN

FOR Index := I TO Patch-Count DO

BEGIN Display-Patch

(Patches[Index],

Steps);

END ; { for index } END ; { procedure display-patches }

{ by Charles W. Grant, Lawrence Livermore National Laboratory }

January 1987

January 1987

11~~~~~~~~~
11

Teapot Data - Patch Definitions

Patch Number

16 Indices Into
Table of z,y,z Values

rim - 1

1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16

2 4 17 18 19 8 20 21 22 12 23 24 25 16 26 27 28

3 19 29 30 31 22 32 33 34 25 35 36 37 28 38 39 40

4 31 41 42 1 34 43 44 5 37 45 46 9 40 47 48 13

body -

5 13 14 15 16 49 50 51 52 53 54 55 56 57 58 59 60

6 16 26 27 28 52 61 62 63 56 64 65 66 60 67 68 69

7 28 38 39 40 63 70 71 72 66 73 74 75 69 76 77 78

8 40 47 48 13 72 79 80 49 75 81 82 53 78 83 84 57

9 57 58 59 60 85 86 87 88 89 90 91 92 93 94 95 96

10 60 67 68 69 88 97 98 99 92 100 101 102 96 103 104 105

11 69 76 77 78 99 106 107 108 102 109 110 111 105 112 113 114

handle11-32

78 83 84 57 108 115 116 85 111 117 118 89 114 119 120 93 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136

14 124 137 138 121 128 139 140 125 132 141 142 129 136 143 144 133

15 133 134 135 136 145 146 147 148 149 150 151 152 69 153 154 155

spout

16
-

136 143 144 133 148 156 157 145 152 158 159 149 155 160 161

69

17 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 18 165 178 179 162 169 180 181 166 173 182 183 170 177 184 185 174

19 174 175 176 177 186 187 188 189 190 191 192 193 194 195 196 197

lid -

20 21

177 184 185 174 189 198 199 186 193 200 201 190 197 202 203 194 204 204 204 204 207 208 209 210 211 211 211 211 212 213 214 215

22 204 204 204 204 210 217 218 219 211 211 211 211 215 220 221 222

23 204 204 204 204 219 224 225 226 211 211 211 211 222 227 228 229

24 204 204 204 204 226 230 231 207 211 211 211 211 229 232 233 212

25 212 213 214 215 234 235 236 237 238 239 240 241 242 243 244 245

26 215 220 221 222 237 246 247 248 241 249 250 251 245 252 253 254

27 222 227 228 229 248 255 256 257 251 258 259 260 254 261 262 263

28 229 232 233 212 257 264 265 234 260 266 267 238 263 268 269 242

bottom29- 270 270 270 270 279 280 281 282 275 276 277 278 271 272 273 274 30 270 270 270 270 282 289 290 291 278 286 287 288 274 283 284 285

31 270 270 270 270 291 298 299 300 288 295 296 297 285 292 293 294

32 270 270 270 270 300 305 306 279 297 303 304 275 294 301 302 271

Martin Newell's original wireframe teapot.

Shaded texture mapped teapot. Texture map was generated by Fourier synthesis.

Tea scene from Martin Newell's PhD thesis, University of Utah, 1974. Environment
mapped teapot.
12

These three images are (a) texture map, (b) Teapot with environment map, and (c) texture mapped on Z - buffer at bottom of screen, 2 bytes/pixel so twice as wide.
IEEE CG&A

Vertex Number
1 2 3 4 5 6 T 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57
58
59 60 61 62 63 64 65 66
67 68
69
70

2z
Value Value

1.4 0.0

1.4 -0.784

0.784 -1.4

0.0 -1.4

1.3376

0.0

1.3376 -0.749

0.749 -1.3375

0.0 -1.3375

1.4375

0.0

1.4375 -0.805

0.805 -1.4375

0.0 -1.4375

1.5 0.0

1.5 -0.84

0.84 -1.5

0.0 -1.5

-0.784 -1.4

-1.4 -0.784

-1.4 0.0

-0.749 -1.3375

-1.3376 -0.749

-1.3375

0.0

-0.805 -1.4375

-1.4375 -0.805

-1.4375

0.0

-0.84 -1.5

-1.5 -0.84

-1.5 0.0

-1.4 0.784

-0.784

1.4

0.0 1.4

-1.3375 0.749

-0.749 1.3375

0.0 1.3375

-1.4375 0.805

-0.805 1.4375

0.0 1.4375

-1.5 0.84

-0.84

1.5

0.0 1.5

0.784

1.4

1.4 0.784

0.749 1.3375

1.3375 0.749

0.805 1.4375

1.4375 0.805

0.84 1.5

1.5 0.84

1.76 0.0

1.75 -0.98

0.98 -1.75

0.0 -1.75

2.0 0.0

2.0 -1.12

1.12 -2.0

0.0 -2.0

2.0 0.0

2.0 -1.12

1.12 -2.0

0.0 -2.0

-0.98 -1.75

-1.75 -0.98

-1.75

0.0

-1.12 -2.0

-2.0 -1.12

-2.0 0.0

-1.12 -2.0

-2.0
-2.0 -1.75

-1.12
0.0 0.98

Z
Value
2.4 2.4 2.4 2.4 2.63125 2.53125 2.53125 2.53125 2.53125 2.53125 2.53125 2.53125 2.4 2.4 2.4 2.4 2.4 2.4 2.4 2.53125 2.53125 2.53125 2.53125 2.53125 2.53125 2.4 2.4 2.4 2.4 2.4 2.4 2.53125 2.53125 2.53125 2.53125 2.53125 2.53125 2.4 2.4 2.4 2.4 2.4 2.53125 2.53126 2.53126 2.53125 2.4 2.4 1.875 1.875 1.875 1.875 1.35 1.35 1.35 1.35 0.9 0.9 0.9 0.9 1.875 1.875 1.875 1.35 1.35 1.35 0.9
0.9
0.9 1.875

Teapot Data - Vertices

Vertex Number
71 72 73 74 7S 76 77
78
T9
80
81 82 83 84 85 86
87
88
89 90 91 92 93 94 95 96
97
98 99 100 101 102
103
104 10l 106 107 108 109 110
111
112
113
114
115
116 117 118 119 120 121 122 123 124 125 126 127 128 129
130
131 132 133 134 135 136 137 138 139 140

2 Value
-0.98 0.0 -2.0
-1.12 0.0 -2.0
-1.12
0.0
0.98 1.75 1.12
2.0 1.12 2.0 2.0 2.0 1.12 0.0 1.5 1.5 0.84 0.0
1.5 1.5 0.84 0.0 -1.12 -2.0 -2.0 -0.84 -1.5 -1.5 -0.84 -1.5 -1.5 -2.0 -1.12 0.0 -1.5 -0.84 0.0 -1.5 -0.84 0.0 1.12 2.0 0.84 1.5 0.84 1.5 -1.6 -1.6 -1.5 -1.5 -2.3 -2.3 -2.5 -2.5 -2.7 -2.7 -3.0 -3.0 -2.7 -2.7 -3.0 -3.0 -1.5 -1.6 -2.5 -2.3

Value
1.75 1.75 1.12 2.0 2.0 1.12 2.0 2.0 1.75 0.98 2.0 1.12 2.0 1.12 0.0 -1.12 -2.0 -2.0 0.0 -0.84 -1.5 -1.5 0.0 -0.84 -1.6 -1.5 -2.0 -1.12 0.0 -1.5 -0.84 0.0 -1.5 -0.84 0.0 1.12
2.0 2.0 0.84 1.5 1.5 0.84 1.5 1.5 2.0 1.12 1.5 0.84 1.5 0.84 0.0 -0.3 -0.3 0.0 0.0 -0.3 -0.3 0.0 0.0 -0.3 -0.3 0.0 0.0 -0.3 -0.3 0.0 0.3 0.3 0.3 0.3

Z
Value
1.875 1.875 1.35 1.35 1.35
0.9 0.9
0.9
1.875 1.875 1.35 1.35
0.9 0.9 0.45 0.45 0.45 0.45 0.225 0.225 0.225 0.225 0.15 0.15 0.15 0.15 0.45 0.45 0.45 0.225 0.225 0.225 0.15 0.15 0.15 0.45 0.45 0.45 0.225 0.225 0.225 0.15 0.15 0.15 0.45 0.45 0.225 0.225 0.15 0.15 2.025 2.025 2.25 2.25 2.025 2.025 2.25 2.25 2.025 2.025 2.25 2.25 1.8 1.8 1.8 1.8 2.25 2.025 2.25 2.025

Vertex Number
141 142 143 144 145 146 147 148 149 1SO
151
152 153 154
155
156
157
158
159
160 161 162 163 164 165 166
167
168 169
170
171
172 173 174
175
176
177
178
179
180
181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210

2 Value
-3.0 -2.7 -3.0 -2.7 -2.7 -2.7 -3.0 -3.0 -2.5 -2.5 -2.65 -2.65 -2.0 -1.9 -1.9 -3.0 -2.7 -2.65 -2.5 -1.9 -2.0 1.7 1.7 1.7 1.7 2.6 2.6 3.1 3.1 2.3 2.3 2.4 2.4 2.7 2.7 3.3 3.3 1.7 1.7 3.1 2.6 2.4 2.3 3.3 2.7 2.8 2.8 3.525 3.525 2.9 2.9 3.45 3.45 2.8 2.8 3.2 3.2 3.525 2.8 3.45 2.9 3.2 2.8 0.0 0.0 0.002 0.8 0.8 0.45 0.0

3/
Value
0.3 0.3 0.3 0.3 0.0 -0.3 -0.3 0.0 0.0 -0.3 -0.3 0.0 -0.3 -0.3 0.0 0.3 0.3 0.3 0.3 0.3 0.3 0.0 -0.66 -0.66 0.0 0.0 -0.66 -0.66 0.0 0.0 -0.25 -0.25 0.0 0.0 -0.25 -0.25 0.0 0.66 0.66 0.66 0.66 0.25 0.25 0.25 0.25 0.0 -0.25 -0.25 0.0 0.0 -0.15 -0.15 0.0 0.0 -0.15 -0.15 0.0 0.25 0.25 0.15 0.15 0.15 0.15 0.0 -0.002 0.0 0.0 -0.45 -0.8 -0.8

z
Value
2.25 2.025
1.8 1.8 1.575 1.575 1.35 1.35 1.125 1.125 0.9375 0.9375 0.9 0.6 0.6 1.35 1.575 0.9375 1.125 0.6 0.9 1.425 1.425 0.6 0.6 1.425 1.425 0.825 0.825 2.1 2.1 2.025 2.025 2.4 2.4 2.4 2.4 0.6 1.425 0.825 1.425 2.025 2.1 2.4 2.4 2.475 2.475 2.49375 2.49375 2.475 2.475 2.5125 2.5125 2.4 2.4 2.4 2.4 2.49375 2.475 2.5125 2.475 2.4 2.4 3.15 3.15 3.15 3.15 3.15 3.15 3.15

JJaannuuary 1987

1133

Vertex Number
211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 245 236 237 238 239 240 241 242

IValue 0.0 0.2 0.2
0.112 0.0
-0.002 -0.45 -0.8 -0.8
-0.112 .0.2 -0.2 0.0 -0.8 -0.45 0.0 -0.2
-0.112 0.0 0.45 0.8
0.112 0.2 0.4 0.4
0.224 0.0 1.3 1.3
0.728 0.0 1.3

V
Value
0.0 0.0 -0.112 -0.2 -0.2 0.0 -0.8 -0.45 0.0 -0.2 -0.112 0.0 0.002 0.45 0.8 0.8 0.112 0.2 0.2 0.8 0.45 0.2 0.112 0.0 -0.224 -0.4 -0.4 0.0 -0.728 -1.3 -1.3 0.0

Z
Value
2.85 2.7 2.7 2.7 2.7 3.15 3.15 3.15 3.15 2.7 2.7 2.7 3.15 3.15 3.15 3.15 2.7 2.7 2.7 3.15 3.15 2.7 2.7 2.55 2.55 2.55 2.55 2.55 2.55 2.55 2.55 2.4

Vertex Number
243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274

Iz
Value 1.3
0.728 0.0
-0.224 -0.4 -0.4
-0.728 -1.3 -1.3
-0.728 -1.3 -1.3 -0.4
-0.224 0.0 -1.3
-0.728 0.0 -1.3
-0.728 0.0
0.224 0.4
0.728 1.3
0.728 1.3 0.0 1.5 1.5
0.84 0.0

y
Value -0.728
-1.3 -1.3 -0.4 -0.224 0.0 -1.3 -0.728 0.0 -1.3 -0.728 0.0 0.224 0.4 0.4 0.728 1.3 1.3 0.728 1.3 1.3 0.4 0.224 1.3 0.728 1.3 0.728 0.0 0.0 0.84 1.5 1.5

z
Value 2.4 2.4
2.4 2.55 2.55 2.55 2.55 2.55 2.55
2.4 2.4 2.4 2.55 2.55 2.55 2.55 2.55 2.55 2.4 2.4 2.4 2.55 2.55 2.55 2.55 2.4 2.4 0.0 0.15 0.15 0.15 0.15

Vertex Number
275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306

Iz
Value
1.5 1.5 0.84 0.0 1.425 1.425 0.798 0.0 -0.84 -1.5 -1.5 -0.84 -1.5 -1.5 -0.798 -1.425 -1.425 -1.5 -0.84
0.0
-1.5 -0.84
0.0
-1.425 -0.798
0.0
0.84 1.5
0.84 1.5
0.798 1.425

y
Value
0.0 0.84
1.5 1.5 0.0 0.798 1.425 1.425 1.5 0.84 0.0 1.5 0.84
0.0
1.425 0.798
0.0
-0.84 -1.5 -1.5 -0.84 -1.5 -1.5 -0.798 -1.425 -1.425 -1.5 -0.84 -1.5 -0.84 -1.425 -0.798

z
Value
0.075 0.075 0.075 0.075
0.0 0.0 0.0
0.0
0.15 0.15 0.15 0.075 0.075 0.075
0.0
0.0 0.0
0.15 0.15 0.15 0.075 0.075 0.075
0.0
0.0
0.0
0.15 0.15 0.075 0.075
0.0
0.0

Note that the data for the 306 vertices needs to be stored in the array "Ducks" and the data for the 32 patches in the array "Patches."

The "Vertex Numbers" and the "Patch Numbers" printed in the tables are NOT to be stored in these arrays. These numbers are

given to assist visual inspection and interpretation of the dataonly.

Environment mapped
teapot.

Bump-mapped teapot.

Map of control points for teapot.

14 IEEE CG&A

ab
cd
Kindly supplied to CG&A by The Computer Museum, these pictures are (a) owned by Omnibus Computer Graphics, (b) a picture done by Rob Cook when he was at Lucasfilm in 1982, (c) another Robert Cook image with a plant by Alvy Ray Smith when he was at Lucasfilm, and (d) a picture showing work by Martha Everson.
b
These two images, also owned by Omnibus, show (a)an interesting development of the teapot, and (b) the teapot in a complete table setting.

Shaded and texture mapped with specular reflectance by James
F. Blinn while at the University of Utah in 1976-77.
January 1987

A composite of renderings by llrner Whitted (red bottle and glass), Loren Carpenter, Jeff
Lane (teapot and cup), and James Blinn (green chalice) in 1977.
15

James Blinn's shaded teapot with painted texture map and specular reflectance from his 1976-77 Utah period.

A teapot texture mapped with a painted picture by Lance Williams, done at
NYIT, 1977.

James Blinn's black/white shaded teapot with 1-bit halftone dithering.

Teapot with specular reflectance (aliasing), by James Blinn.
6b

IEEE CG&A

Shaded 3-bit teapot with threshholding, by James Blinn when he was at Utah during 1976-77.

Teapot rendered by Loren Carpenter and Jeff Lane at Boeing, 1977. The following images are all by James Blinn. Map of control points for a teapot on a surface.

January 1987

Shaded teapot antialiased.

17

A shaded teapot with painted texture map.

Shaded grid texture mapped on teapot. Shaded antialiased teapot with environment
mapping (not ray traced), and grid mapped with specular reflectance.

Shaded and bump mapped.
18

IEEE CG&A

Einstein thought experiment acceleration versus gravity (for The Mechanical Universe 1985), Computer Graphics Lab at the Jet Propulsion Laboratory.

Greeks finding the area of an irregular shape (Mechanical Universe, 1985) CGL, Jet Propul-
sion Laboratory.

January 1987

Kepler and the teapot (for Mechanical Universe) CGL, Jet Propulsion Laboratory.
19

