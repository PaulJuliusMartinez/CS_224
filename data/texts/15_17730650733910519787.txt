D-NURBS: A Physics-Based Geometric Design Framework
Hong Qin and Demetri Terzopoulos1
Department of Computer Science, University of Toronto Toronto, Ontario, Canada, M5S 1A4
ABSTRACT
This paper presents dynamic NURBS, or D-NURBS, a physics-based generalization of non-uniform rational B-splines. NURBS have become a de facto standard in commercial modeling systems because of their power to represent both free-form and common analytic shapes. Traditionally, however, NURBS have been viewed as purely geometric primitives, which require the designer to interactively adjust many degrees of freedom (DOFs)|control points and associated weights|to achieve desired shapes. The conventional shape modi cation process can often be clumsy and laborious. D-NURBS are physics-based models that incorporate mass distributions, internal deformation energies, forces, and other physical quantities into the NURBS geometric substrate. Their dynamic behavior, resulting from the numerical integration of a set of nonlinear di erential equations, produces physically meaningful, hence intuitive shape variation. Consequently, a modeler can interactively sculpt complex shapes to required speci cations not only in the traditional indirect fashion, by adjusting control points, but also through direct physical manipulation, by applying simulated forces and local and global shape constraints. We use Lagrangian mechanics to formulate the equations of motion for D-NURBS curves, tensor-product surfaces, swung surfaces, and triangulated surfaces. We apply nite element analysis to reduce these equations to e cient algorithms that can be simulated at interactive rates using standard numerical techniques. We describe a prototype modeling environment based on D-NURBS, and demonstrate that D-NURBS can be e ective tools in a wide range of CAGD applications such as shape blending, scattered data tting, and interactive sculpting.
Keywords: NURBS, Geometric modeling, Physics-based models, Finite element, Dynamics.
1Fellow, Canadian Institute for Advanced Research E-mail addresses: qin@cs.toronto.edu dt@cs.toronto.edu
1

1 Introduction
In 1975 Versprille 32] proposed the Non-Uniform Rational B-Splines or NURBS. This shape representation for geometric design generalized Riesenfeld's B-splines. NURBS quickly gained popularity and were incorporated into several commercial modeling systems 20]. The NURBS representation has several attractive properties. It o ers a uni ed mathematical formulation for representing not only free-form curves and surfaces, but also standard analytic shapes such as conics, quadrics, and surfaces of revolution. The most frequently used NURBS design techniques are the speci cation of a control polygon, and interpolation or approximation of data points to generate the initial shape. For surfaces or solids, cross-sectional design including skinning, sweeping, and swinging operations is also popular. By adjusting the positions of control points, associated weights, and knots of the initial shape, one can design a large variety of shapes using NURBS 7, 18, 19, 20, 31]. Despite modern interactive devices, however, this conventional re nement process can be clumsy and laborious when it comes to designing complex, real-world objects.
In this paper, we propose Dynamic NURBS, or D-NURBS. D-NURBS are physics-based models that incorporate mass distributions, internal deformation energies, and other physical quantities into the NURBS geometric substrate. Time is fundamental to the dynamic formulation. The models are governed by dynamic di erential equations which, when integrated numerically through time, continuously evolve the control points and weights in response to applied forces. The D-NURBS formulation supports interactive direct manipulation of NURBS objects, which results in physically meaningful hence intuitively predictable motion and shape variation.
Using D-NURBS, a modeler can interactively sculpt complex shapes not merely by kinematic adjustment of control points and weights, but dynamically as well|by applying simulated forces. Additional control over dynamic sculpting stems from the modi cation of physical parameters such as mass, damping, and elastic properties. Elastic functionals allow the imposition of qualitative \fairness" criteria through quantitative means. Linear or nonlinear constraints may be imposed either as hard constraints that must not to be violated, or as soft constraints to be satis ed approximately. The latter may be interpreted intuitively as simple forces. Optimal shape design results when D-NURBS are allowed to achieve static equilibrium subject to shape constraints. All of these capabilities are subsumed under an elegant formulation grounded in physics.
2 Motivation
NURBS have o ered designers extraordinary exibility when utilized for geometric design. Nevertheless, traditional design methodology does not exploit the full potential of the underlying geometric formulations
2

whose extraordinary exibility has some drawbacks:
Traditional free-form geometric design is a kinematic process. Designers are often faced with the tedium of indirect shape manipulation through a bewildering variety of geometric parameters i.e., by repositioning control points, adjusting weights, and modifying knot vectors. Despite the recent prevalence of sophisticated 3D interaction devices, indirect geometric design of univariate and tensor product splines can be clumsy and laborious when it comes to designing complex, real-world objects. Design re nement with triangular splines can be especially time-consuming due to the irregularity of control points and knot vectors.
Shape design to required speci cations by manual adjustment of available geometric degrees of freedom is often elusive, because relevant design tolerances are typically shape-oriented and not control point/weight oriented. Moreover, a particular shape can often be represented nonuniquely, with different values of knots, control points, and weights. This \geometric redundancy" of NURBS tends to make shape re nement ad hoc and ambiguous it often requires designers to make nonintuitive decisions|for instance, to adjust a shape, should the designer move a control point, or change a weight, or move two control points, or...?
Typical design requirements may be stated in both quantitative and qualitative terms, such as \a fair and pleasing surface which approximates scattered data and interpolates a cross-section curve." Such requirements impose both local and global constraints on shape. The incremental manipulation of local shape parameters to satisfy complex local and global shape constraints is at best cumbersome and often unproductive.
Stylists are often interested in geometric \theme variation." This requires geometric entities to be generated quickly and naturally. Unlike engineers, stylists are concerned more with the geometric shape than with its underlying mathematical description. It is apparent that conventional interpolation/approximation techniques, which often generate computerized models from digitized data, may not be quite suitable to the time-varying requirements of stylists.
Physics-based modeling provides a means to overcome these drawbacks. Free-form deformable models, which were introduced to computer graphics in 1987 29] and further developed during the past eight years are particularly relevant in the context of modeling with NURBS. Important advantages accrue from the deformable model approach 28]:
The behavior of the deformable model is governed by physical laws. Through a computational physics simulation, the model responds dynamically to applied simulated forces in a natural and predictable way. Shapes can be sculpted interactively using a variety of force-based \tools."
3

The equilibrium state of the dynamic model is characterized by a minimum of its potential energy, subject to imposed constraints 27]. It is possible to formulate potential energy functionals that satisfy local and global design criteria, such as curve or surface (piecewise) smoothness, and to impose geometric constraints relevant to shape design.
The physical model may be built upon a standard geometric foundation, such as free-form parametric curve and surface representations. This means that while shape design may proceed interactively or automatically at the physical level, existing geometric toolkits are concurrently applicable at the geometric level.
Physics-based shape design can free designers from making nonintuitive decisions such as assigning weights to NURBS. In addition, with physics-based direct manipulation, non-expert users are able to concentrate on visual shape variation without necessarily comprehending the underlying mathematical formulation. Designers are allowed to interactively sculpt shapes in a natural and predictable way using a variety of force-based tools.
In contrast to recent variational design approaches, time is fundamental to physics-based modeling. Additional advantages can be obtained through the use of real-time dynamics.
An \instantaneous" optimizer (if such a thing existed) can produce some kinematics if it were applied at every interaction step to satisfy constraints. But the motion would be arti cial and there would be nothing to prevent sudden, nonsmooth motions (depending on the structure of the constraints) which can be annoying and confusing. By contrast, the dynamic formulation is much more general in that it marries the geometry with time, mass, force, and constraint. Dynamic models produce smooth, natural motions which are familiar and easily controlled.
Dynamics facilitates interaction, especially direct manipulation and interactive sculpting of complex geometric models for real-time shape variation. The dynamic approach subsumes all of the geometric capabilities in an elegant formulation which grounds shape variation in real-world physics. Despite the fact that incremental optimization may provide a means of interaction, pure optimization techniques can easily become trapped in the local minima characteristic of non-linear models and/or constraints. In contrast, real-time dynamics can overcome the di culty of incremental optimization through the incorporation of inertial properties into the model and the interactive use of force-based tools by the designer.
Practical design processes span conceptual geometric design and the fabrication of mechanical parts. Physics-based modeling techniques and real-time dynamics integrates geometry with physics in a
4

natural and coherent way. The uni ed formulation is potentially applicable throughout the entire design and manufacturing process.
3 Background
Dynamic NURBS are motivated by prior research aimed at applying the deformable modeling approach to shape design. Terzopoulos and Fleischer 28] demonstrated simple interactive sculpting using viscoelastic and plastic models. Celniker and Gossard 3] developed an interesting prototype system for interactive free-form design based on the nite-element optimization of energy functionals 28]. Bloor and Wilson developed related models using similar energies and numerical optimization, and they proposed the use of B-splines for this purpose 2]. Subsequently, Celniker and Welch 4] investigated deformable B-splines with linear constraints. Welch and Witkin 33] extended the approach to trimmed hierarchical B-splines.
In prior work 2, 4, 33], deformable B-spline curves and surfaces are designed by imposing shape criteria via the minimization of energy functionals subject to hard or soft geometric constraints. These constraints are imposed through Lagrange multipliers or penalty methods, respectively. The same techniques are applicable to D-NURBS. Compared to deformable B-splines, however, D-NURBS are capable of representing a wider variety of free-form shapes, as well as standard analytic shapes. Previous models solve static equilibrium problems, or involve simple linear dynamics with diagonal (arbitrarily lumped) mass and damping matrices 4].
D-NURBS are a more sophisticated dynamic model derived through the systematic use of Lagrangian mechanics and nite element analysis without resorting to any of the ad hoc assumptions of prior schemes. D-NURBS control points and associated weights are generalized coordinates in the Lagrangian equations of motion. From a physics-based modeling point of view, the existence of weights makes the NURBS geometry substantially more challenging than B-spline geometry. Since the NURBS rational basis functions are functionally dependent on the weights, D-NURBS dynamics are generally nonlinear, and the mass, damping, and sti ness matrices must be recomputed at each simulation time step.1 Fortunately, this does not preclude interactive performance on current graphics workstations, at least for the size of surface models that appear in our demonstrations. Because our dynamic models allow fully continuous mass and damping distributions, we obtain banded mass and damping matrices. We apply numerical quadrature to the underlying NURBS basis functions to compute e ciently the integral expressions for the matrix entries.
1Note, however, that for static weights, the matrices become time invariant and the computational cost is reduced signi cantly.
5

4 Formulation of D-NURBS
This section formulates the physics-based D-NURBS model. The shape parameters of geometric NURBS play the role of generalized (physical) coordinates in dynamic NURBS. We introduce time, mass, and deformation energy into the standard NURBS formulation and employ Lagrangian dynamics to arrive at the system of nonlinear ordinary di erential equations that govern the shape and motion of D-NURBS. In particular, we formulate four di erent varieties: D-NURBS curves, tensor-product D-NURBS surfaces, swung D-NURBS surfaces, and triangular D-NURBS surfaces.

4.1 D-NURBS Curves

NURBS generalize the non-rational parametric form. They inherit many of the properties of non-rational B-splines, such as the strong convex hull property, variation diminishing property, local support, and invariance under standard geometric transformations. Moreover, they have some additional properties. NURBS can be used to satisfy di erent smoothness requirements. They include weights as extra degrees of freedom which in uence local shape. Most importantly, NURBS o er a common mathematical framework for implicit and parametric polynomial forms. In principle, they can represent analytic functions such as conics and quadrics precisely, as well as free-form shapes.
A kinematic NURBS curve extends the geometric NURBS de nition by explicitly incorporating time. The kinematic curve is a function of both the parametric variable u and time t:

c(u

t)

=

PinP=0ni=p0i

(t)wi(t)Bi k(u) wi(t)Bi k(u)

:

(1)

where the Bi k(u) are the usual recursively de ned piecewise basis functions 8], pi(t) are the n + 1 control points, and wi(t) are associated non-negative weights. Assuming basis functions of degree k ; 1, the curve has n + k + 1 knots ti in non-decreasing sequence: t0 t1 . . . tn+k. In many applications, the end knots are repeated with multiplicity k in order to interpolate the initial and nal control points p0 and pn.
To simplify notation, we de ne the vector of generalized coordinates pi(t) and weights wi(t) as

p(t) = p0> w0

pn> wn >

where > denotes transposition. We then express the curve (1) as c(u p) in order to emphasize its dependence on p whose components are functions of time.
The velocity of the kinematic spline is

c_(u p) = _Jp

(2)

6

where the overstruck dot denotes a time derivative and J(u p) is the Jacobian matrix. Because c is a 3-component vector-valued function and p is an 4(n + 1) dimensional vector, J is the 3 4(n + 1) matrix

2
J = 66664

23

00 00 0064666 @@pcixx

@cy @pi y

@cz @pi z

77757

@@wci

3 75777

(3)

where

@cx @pi x

=

@cy @pi y

=

@cz @pi z

=

Pnj=w0iBwijkBj k

@c @wi

=

Pjn=0((Ppijn=;0

pj )wj wjBj

Bi k k)2

Bj

k:

The subscripts x, y, and z denote the components of a 3-vector. Furthermore, we can express the curve as

the product of the Jacobian matrix and the generalized coordinate vector:

c(u p) = :Jp

(4)

The proof of (4) can be found elsewhere 30].

4.2 Tensor-Product D-NURBS Surfaces

In analogy to the kinematic curve of (1), a tensor-product D-NURBS surface

s(u

v

t) =

Pmi=P0imP=0nj=P0jnp=i0jw(ti)jw(ti)jB(ti)kB(iuk)(Buj)lB(vj

l(v )

)

:

(5)

generalizes the geometric NURBS surface. The (m + 1)(n + 1) control points pi j(t) and weights wi j(t), which are functions of time, comprise the D-NURBS generalized coordinates. Assuming basis functions along the two parametric axes of degree k ;1 and l;1, respectively, the number of knots is (m+k +1)(n+ l + 1). The non-decreasing knot sequence is t0 t1 . . . tm+k along the u-axis and s0 s1 . . . sn+l along the v-axis. The parametric domain is tk;1 u tm+1 and sl;1 v sn+1. If the end knots have multiplicity k and l in the u and v axis respectively, the surface patch will interpolate the four corners of the boundary control points.
We concatenate these N = 4(m + 1)(n + 1) coordinates into the vector:

p(t) = wp>0 0 0 0

pi>j wi j

pm> n wm n > :

Two subscripts are now associated with the generalized coordinates, re ecting the surface parameters u

7

and v. For concreteness, we order the components in these vectors such that the second subscript varies faster than the rst, although this convention does not a ect the derived results.
Similar to (2) and (4), we have

s_(u v p) = _Jp s(u v p) = :Jp

(6)

where J(u v p) is the 3 N Jacobian matrix of the D-NURBS surface with respect to p. However, the contents of the Jacobian J di er from those in the curve case. To arrive at an explicit expression for J, let Bi j(u v p), for i = 0 . . . m, and j = 0 . . . n, be a 3 3 diagonal matrix whose entries are

Ni j(u

v

p) =

@s @pi j

=

Pcm=0

Pwind=jB0 iwkc(duB)Bc jk

l(v) (u)Bd

l(v)

and let the 3-vector

wi j(u

v

p)

=

@s @wi j

=

Pmc=0 Pdn=0((Ppicmj=;0 Ppcnd=d)0wwccddBBcckk((uu))BBddll((vv))B)2i k(u)Bj l(v):

Hence,

J(u v p) = B0 0 w0 0

Bm n wm n :

Note that J is now a 3 4(m + 1)(n + 1) matrix.

4.3 Swung D-NURBS Surfaces
Many objects of interest, especially manufactured objects, exhibit symmetries. Often it is convenient to model symmetric objects through cross-sectional design by specifying pro le curves 9]. Woodward 34] introduced the swinging operator by extending the spherical cross-product with a scaling factor, and applied it to generate surfaces with B-spline pro le curves. Piegl 20] carried the swinging idea over to NURBS curves. He proposed NURBS swung surfaces, a special type of NURBS surfaces formed by swinging one planar NURBS pro le curve along a second NURBS trajectory curve. For example, Fig. 1 illustrates the design of a cubical NURBS swung surface from two NURBS pro le curves.
The NURBS swung surface retains a considerable breadth of geometric coverage. It can represent common geometric primitives such as spheres, tori, cubes, quadrics, surfaces of revolution, etc. The NURBS swung surface is e cient compared to a general NURBS surface, inasmuch as it can represent a broad class of shapes with essentially as few degrees of freedom as it takes to specify the two generator curves. Several geometric shape design systems include some form of swinging (or sweeping) among their repertoire of techniques 26].

8

ZY X

Z
Y X

(a) (b)
Figure 1: Construction of a cubical NURBS swung surface. (a) NURBS pro le curve on x-z plane, NURBS trajectory curve on x-y plane. (b) Cube surface wireframe.
Geometrically, a dynamic swung surface is generated from two planar kinematic NURBS pro le curves through the swinging operation 20] (Fig 1). Let the two generator curves c1(u a) and c2(v b) be of the form (1). The swung surface is then de ned as

>
s(u v t) = (t)c1 xc2 x (t)c1 xc2 y c1 z

(7)

where is an arbitrary scalar. The second subscript denotes the component of a 3-vector.

Assume that c1 has basis functions of degree k ; 1 and that it has m + 1 control points ai(t) and

weights wia(t). Similarly, c2 has basis functions of degree l ; 1 and that it has n + 1 control points bj(t)

and weights wjb(t). Therefore,

a(t) =

>
a0

w0a

...

a>m

wma ]>

and

b(t) =

>
b0

w0b

...

bn>

wnb ]>

are the generalized coordinate vectors of the pro le curves. We collect these into the generalized coordinate

vector

p = a> b> > :

This vector has dimensionality M = 1 + 4(m + 1) + 4(n + 1). Thus the model has O(n + m) degrees of

freedom, compared to O(nm) for general NURBS surfaces.

The velocity of the swung surface is

s_(u v p) = _Lp

(8)

9

Figure 2: Knot vectors associated with each triangle in the domain triangulation.

where L(u v p) is the Jacobian matrix with respect to the generalized coordinate vector p. Hence, L

comprises the vectors @s=@ , @s=@a, and @s=@b. The expression of the 3 M matrix L can be explicitly

formulated 24]. Unlike J in (4), L cannot serve as the basis function matrix of the swung surface. Instead,

we have

s(u v p) = Hp

(9)

where H is the 3 M basis function matrix 24].

4.4 Triangular D-NURBS Surfaces
The main drawback of tensor-product NURBS is that the surface patches are rectangular. Consequently, the designer is forced to model multisided irregular shapes using degenerate patches with deteriorated interpatch continuity. Thus, the associated smoothness constraints increase the complexity of the design task in general. In contrast, triangular B-splines 5] and NURBS can represent complex non-rectangular shapes over arbitrary triangulated domains with low degree piecewise polynomials that nonetheless maintain relatively high-order continuity. They can express smooth non-rectangular shapes without degeneracy. They can also model discontinuities by varying the knot distribution.
Let T = f (i) = r s t]ji = (i0 i1 i2) 2 Z+3 g be an arbitrary triangulation of the planar parametric domain, where i0, i1, and i2 denote indices of r, s, and t in the vertex array of the triangulation, respectively. For each vertex v in the triangulated domain, we associate a knot sequence (also called a cloud of knots)

10

v = v0 v1 . . . vn] (which are inside the shaded circles in Fig. 2). Next, we de ne a convex hull

Vi = fr0 . . . r 0 s0 . . . s 1 t0 . . . t 2g
where subscript i is a triangle index, and = ( 0 1 2) is a triplet such that j j = 0 + 1 + 2 = n. The bivariate simplex spline M(ujVi ) with degree n over Vi can be de ned recursively (the details are found elsewhere 5]), where u = (u v) de nes the triangulated parametric domain of the surface. We then de ne a bivariate B-spline basis function as

Ni (u) = d(r 0 s 1 t 2)M (ujVi )

(10)

where d(r 0 s 1 t 2) is twice the area of (r 0 s 1 t 2). Like the ordinary tensor-product D-NURBS, we de ne triangular D-NURBS as the combination of a set of piecewise rational functions by explicitly

incorporating time and physical behavior. The surface is a function of both the parametric variable u and

time t:

(s u

t)

=

PP
i Pj
i

Pj=n j

pi
j=n

(t)wi (t)Ni (u) wi (t)Ni (u)

:

(11)

We de ne the vector of generalized coordinates (control points) pi and (weights) wi as

p = . . . pi> wi . . .]>:

We then express (11) as (s u p) in order to emphasize its dependence on p whose components are functions of time.
Thus, the velocity of the triangular D-NURBS is

s_(u p) = _Jp

(12)

where the overstruck dot denotes a time derivative and the Jacobian matrix (J u p) is the concatenation of the vectors @s=@pi and @s=@wi . Assuming m triangles in the parametric domain, traverses k = (n + 2)!=(n!2!) possible triplets whose components sum to n. Because s is a 3-vector and p is an M = 4mk dimensional vector, J is a 3 M matrix, which may be written as

22

33

J = 66646. . .

66646

Ri 0

0 Ri

0 0

57777 wi

. . .77757

0 0 Ri

(13)

11

where

Ri

(u

p)

=

@sx @pi x

=

@sy @pi

y

=

@sz @pi

z

=

P j

Pwj ij=nNwi j

(u) Nj

(u)

and

wi

(u

p)

=

@s @wi

=

P (Ppi
jj

; s)Ni (u) j=n wj Nj (u)

The subscripts x, y, and z denote derivatives of the components of a 3-vector. Moreover, we can express

the surface as the product of the Jacobian matrix and the generalized coordinate vector:

(s u p) = :Jp

(14)

The proof of (14) is the same as that for the tensor-product D-NURBS 30].
4.5 D-NURBS Equations of Motion
The equations of motion of our D-NURBS are derived from the work-energy version of Lagrangian dynamics 11]. Applying the Lagrangian formulation to D-NURBS curves, tensor-product surfaces, swung surfaces, and triangulated surfaces, we obtain the second-order nonlinear equations of motion

Mp + _Dp + Kp = fp + gp

(15)

where the mass matrix M(p), the damping matrix D(p), and the sti ness matrix K(p) can all be formulated explicitly 30, 24, 23]. The N N mass and damping matrices are are

ZZ

M(p) =

>
J

J

du

dv

ZZ

D(p) =

>
J

J

du

dv

(16)

where (u v) is the prescribed mass density function over the parametric domain of the surface and (u v) is the prescribed damping density function. To de ne an elastic potential energy for the surface, we adopt the thin-plate under tension energy model 27, 3, 33, 12, 30]. This yields the N N sti ness matrix

ZZ

K(p) =

1 1Ju>Ju + 2 2J>v Jv + 1 1J>uuJuu + 1 2J>uvJuv + 2 2Jv>vJvv du dv

(17)

where the subscripts on J denote parametric partial derivatives. The i j(u v) and i j(u v) are elastic-
ity functions which control tension and rigidity, respectively, in the two parametric coordinate directions.
Other energies are applicable, including the nonquadratic, curvature-based energies 29, 17]. The generalized force fp(p) = RR J>f(u v t) du dv is obtained through the principle of virtual work 11] done by the applied force distribution f(u v t). Because of the geometric nonlinearity, generalized inertial forces gp(p)

12

are also associated with the models (see our journal articles for the details 30, 24]).
5 Finite Element Implementation
The evolution of p, determined by (15) with time-varying matrices, cannot be solved analytically in general. Instead, we pursue an e cient numerical implementation using nite-element techniques 13].
Standard nite element codes explicitly assemble the global matrices that appear in the discrete equations of motion 13]. We use an iterative matrix solver to avoid the cost of assembling the global M, D, and K. In this way, we work with the individual element matrices and construct nite element data structures that permit the parallel computation of element matrices.
5.1 Element Data Structures
We de ne an element data structure which contains the geometric speci cation of the surface patch element along with its physical properties. A complete D-NURBS surface is then implemented as a data structure which consists of an ordered array of elements with additional information. The element structure includes pointers to appropriate components of the global vector p (control points and weights). Neighboring elements will share some generalized coordinates. The shared variables will have multiple pointers impinging on them. We also allocate in each element an elemental mass, damping, and sti ness matrix, and include in the element data structure the quantities needed to compute these matrices. These quantities include the mass (u v), damping (u v), and elasticity i j(u v), i j(u v) density functions, which may be represented as analytic functions or as parametric arrays of sample values.
5.2 Calculation of Element Matrices
The integral expressions for the mass, damping, and sti ness matrices associated with each element are evaluated numerically using Gaussian quadrature 22]. We shall explain the computation of the element mass matrix the computation of the damping and sti ness matrices follow suit. Assuming the parametric domain of the element is , the expression for entry mij of the mass matrix takes the integral form
Z
mij = (u v)fij(u v) du dv
where fij are entries of the mass matrix. Given integers Ng, we can nd Gauss weights ag, and abscissas ug, vg in the two parametric directions of such that mij can be approximated by 22]
mij XNg ag (ug vg)fij(ug vg):
g=1
13

We apply the de Boor algorithm 6] or the recursive algorithm of multivariate simplex B-splines 15] to evaluate fij(ug vg). In general, Gaussian quadrature evaluates the integral exactly with N weights and abscissas for polynomials of degree 2N ; 1 or less. In our system we choose Ng to be integers between 4 and 7. Our experiments indicate that matrices computed in this way lead to stable, convergent solutions. Note that because of the irregular knot distribution for the case of triangular D-NURBS, many fij's are zero over the triangular subdomains of . We can further subdivide the subdomains in order to decrease
the numerical quadrature error 23].

5.3 Discrete Dynamics Equations
To integrate (15) in an interactive modeling environment, it is important to provide the modeler with visual feedback about the evolving state of the dynamic model. Rather than using costly time integration methods that take the largest possible time steps, it is more crucial to provide a smooth animation by maintaining the continuity of the dynamics from one step to the next. Hence, less costly yet stable time integration methods that take modest time steps are desirable.
The state of the dynamic NURBS at time t + t is integrated using prior states at time t and t ; t. To maintain the stability of the integration scheme, we use an implicit time integration method, which employs the time integration formula

2M + tD + 2 t2K p(t+ t) = 2 t2(fp + gp) + 4Mp(t) ; (2M ; tD)p(t; t)

(18)

where the superscripts denote evaluation of the quantities at the indicated times. The matrices and forces are evaluated at time t.
We employ the conjugate gradient method to obtain an iterative solution 22]. To achieve interactive simulation rates, we limit the number of conjugate gradient iterations per time step to 10. We have observed that 2 iterations typically su ce to converge to a residual of less than 10;3. More than 2 iterations tend to be necessary when the physical parameters (mass, damping, tension, sti ness, applied forces) are changed signi cantly during dynamic simulation. Hence, our implementation permits the real-time simulation of dynamic NURBS surfaces on common graphics workstations.
The equations of motion allow realistic dynamics such as would be desirable for physics-based computer graphics animation. It is possible, however, to make simpli cations that further reduce the computational cost of (18) to interactively sculpt larger surfaces. For example, in CAGD applications such as data tting where the modeler is interested only in the nal equilibrium con guration of the model, it makes sense to simplify (15) by setting the mass density function (u v) to zero, so that the inertial terms vanish.

14

6 Physics-Based Shape Design

In the physics-based shape design approach, design requirements may be satis ed through the use of energies, forces, and constraints. The designer may apply time-varying forces to sculpt shapes interactively or to optimally approximate data. Certain aesthetic constraints such as \fairness" are expressible in terms of elastic energies that give rise to speci c sti ness matrices K. Other constraints include position or normal speci cation at surface points, and continuity requirements between adjacent surface patches. By building D-NURBS upon the standard NURBS geometry, we allow the modeler to continue to use the whole spectrum of advanced geometric design tools that have become prevalent, among them, the imposition of geometric constraints that the nal shape must satisfy.

6.1 Applied Forces

Sculpting tools may be implemented as applied forces. The force f(u v t) represents the net e ect of all applied forces. Typical force functions are spring forces, repulsion forces, gravitational forces, in ation forces, etc. 29].
For example, consider connecting a material point (u0 v0) of a D-NURBS surface to a point d0 in space with an ideal Hookean spring of sti ness k. The net applied spring force is

ZZ
f(u v t) = k(d0 ; s(u v t)) (u ; u0 v ; v0) du dv

(19)

where the is the unit delta function. Equation (19) implies that f(u0 v0 t) = k(d0 ; s(u0 v0 t)) and vanishes elsewhere on the surface, but we can generalize it by replacing the function with a smooth kernel (e.g., a unit Gaussian) to spread the applied force over a greater portion of the surface. Furthermore, the points (u0 v0) and d0 need not be constant, in general. We can control either or both using a mouse to obtain an interactive spring force.

6.2 Constraints
In practical applications, design requirements may be posed as a set of physical parameters or as geometric constraints. Nonlinear constraints can be enforced through Lagrange multiplier techniques 16]. This approach increases the number of degrees of freedom, hence the computational cost, by adding unknowns i, known as Lagrange multipliers, which determine the magnitudes of the constraint forces. The augmented Lagrangian method 16] combines the Lagrange multipliers with the simpler penalty method 21]. The Baumgarte stabilization method 1] solves constrained equations of motion through linear feedback control 14, 30]. These techniques are appropriate for D-NURBS with nonlinear constraints.

15

Linear geometric constraints such as point, curve, and surface normal constraints can be easily incorporated into dynamic swung surface by reducing the matrices and vectors in (15) to a minimal unconstrained set of generalized coordinates. They can then be implemented by applying the same numerical solver on an unconstrained subset of p 30].
D-NURBS have an interesting idiosyncrasy due to the weights. While the control point components of p may take arbitrary nite values in <, negative weights may cause the denominator to vanish at some evaluation points, causing the matrices to diverge. Although not forbidden, negative weights are not useful. We enforce positivity of weights at each simulation time step by simply projecting any weight value that has drifted below a small positive threshold back to this lower bound. Alternatively, we can give the designer the option of constraining the weights near certain desired target values wi0 by including in the surface energy the penalty term c P(wi ; wi0), where c controls the tightness of the constraint.
7 Modeling Applications
This section describes our D-NURBS modeling environment and presents several applications relating to solid rounding, optimal surface tting, and interactive sculpting.
7.1 Interactive Modeling Environment
We have developed a prototype modeling environment based on the tensor-product and swung D-NURBS model. The system is written in C and it currently runs under Iris Explorer on Silicon Graphics workstations. It may be combined with existing Explorer modules for data input and surface visualization. Our parallelized iterative numerical algorithm takes advantage of an SGI Iris 4D/380VGX multiprocessor. To date, our D-NURBS modules implement 3D curve and surface objects with basis function orders of 2, 3, or 4 (i.e., from linear to cubic D-NURBS) with linear geometric constraints.
We have also developed prototype modeling software based on dynamic triangular B-splines which is a special case of triangular D-NURBS by xing all weights to be unity (an advanced system based upon dynamic triangular NURBS is under construction). We have adopted the data structure, le, and rendering formats of existing geometric triangular B-spline software 10]. To implement the Lagrangian dynamics model on top of this software, we have had to implement a new algorithm for simultaneously evaluating non-zero basis functions and their derivatives up to second order at arbitrary domain points for nite element assembly and dynamic simulation.
Users can sculpt surface shapes in conventional geometric ways, such as by sketching control polygons of arbitrary pro le curves, repositioning control points, and adjusting associated weights, or according to the physics-based paradigm through the use of forces. They can satisfy design requirements by adjusting
16

(a1) (b1) (c1)
(a2) (b2) (c2) Figure 3: Optimal surface tting: D-NURBS surfaces t to sampled data from (a) a hemisphere, (b) a convex/concave surface, (c) a sinusoidal surface. (a{c1) D-NURBS patch outline with control points (white) and data points (red) shown. (a{c2) D-NURBS surface at equilibrium tted to scattered data points. Red line segments in (c2) represent springs with xed attachment points on surface. the internal physical parameters such as the mass, damping, and sti ness densities, along with force gain factors. Linear constraints such as the freezing of control points have been associated with physics-based toolkits in our prototype system. Local geometric constraints can be used to achieve real-time local manipulation for interactive sculpting of complex objects.
7.2 Optimal Surface Fitting
D-NURBS are applicable to the optimal tting of regular or scattered data 25]. The most general and often most useful case occurs with scattered data, when there are fewer or more data points than unknowns|i.e., when the solution is underdetermined or overdetermined by the data. In this case, D-NURBS can yield \optimal" solutions by minimizing the thin-plate under tension deformation energy 27]. The surfaces are optimal in the sense that they provide the smoothest curve or surface (as measured by the deformation energy) which interpolates or approximates the data.
The data point interpolation problem amounts to a linear constraint problem when the weights are xed, and it is amenable to the constraint techniques presented in Section 6.2. The optimal approximation
17

(a1) (b1) (c1)
(a2) (b2) (c2) Figure 4: Solid rounding with triangular D-NURBS: Rounding of (a) an edge, (b) a trihedral corner, (c) a bevel joint. (a1-c1) Initial wireframe surfaces. (a2-c2) Final rounded, shaded surfaces. problem can be approached in physical terms, by coupling the D-NURBS to the data through Hookean spring forces (19). We interpret d0 in (19) as the data point (generally in <3) and (u0 v0) as the D-NURBS parametric coordinates associated with the data point (which may be the nearest material point to the data point). The spring constant c determines the closeness of t to the data point.
We present three examples of surface tting using tensor-product D-NURBS coupled to data points through spring forces. Fig. 3(a) shows 19 data points sampled from a hemisphere and their interpolation with a quadratic D-NURBS surface with 49 control points. Fig. 3(b) shows 19 data points and the reconstruction of the implied convex/concave surface by a quadratic D-NURBS with 49 control points. The spring forces associated with the data points are applied to the nearest points on the surface. In Fig. 3(c) we reconstruct a wave shape from 25 sample points using springs with xed attachments to a quadratic tensor-product D-NURBS surface with 25 control points.
7.3 Rounding
The rounding operation is usually attempted geometrically by enforcing continuity requirements on the llet which interpolates between two or more surfaces. By contrast, the D-NURBS can produce a smooth llet
18

by minimizing its internal deformation energy subject to position and normal constraints. The dynamic simulation automatically produces the desired nal shape as it achieves static equilibrium.
Fig. 4(a) demonstrates the rounding of a sharp edge represented by a quadratic triangular D-NURBS surface with 36 control points. The sharp edge can be represented exactly with multiple control points. By restricting the control polygon to be a continuous net, we reduced the number of control points to 21. The initial wireframe surface is shown in Fig. 4(a1). After initiating the physical simulation, the sharp edges are rounded as the nal shape equilibrates into the minimal energy state shown by the shaded surface in Fig. 4(a2).
Fig. 4(b) illustrates the rounding of a trihedral corner of a cube. The corner is represented using a quadratic triangular D-NURBS with 78 control points. The initial wireframe is shown in Fig. 4(b1). The rounding operation is applied in the vicinity of three sharp edges. The sharp edges and corner are rounded with position and normal constraints along the far boundaries of the faces of the shaded surface shown in Fig. 4(b2).
Fig. 4(c) shows a rounding example involving a bevel joint. The bevel joint is a quadratic triangular D-NURBS with 108 control points. The initial right-angle joint and the nal rounded surface are shown in Fig. 4(c1{2).
7.4 Interactive Sculpting
In the physics-based modeling approach, not only can designers manipulate the individual degrees of freedom with conventional geometric methods, but they can also move the object or re ne its shape with interactive sculpting forces.
The physics-based modeling approach is ideal for interactive sculpting of surfaces. It provides direct manipulation of the dynamic surface to re ne the shape of the surface through the application of interactive sculpting tools in the form of forces. Fig. 5(a) illustrates the results of four interactive sculpting sessions using swung D-NURBS surfaces and simple spring forces. A sphere was generated using two quadratic curves with 4 and 7 control points and was sculpted into the ovoid shown in Fig. 5(a). A torus whose two pro le curves are quadratic with 7 and 7 control points, respectively, has been deformed into the shape in Fig. 5(b). A hat shape was created from two curves with 9 and 6 control points and was then deformed by spring forces into the shape in Fig 5(d). Finally, we generated a wine glass shape using two curves with 7 and 5 control points and sculpted it into the more pleasing shape shown in Fig 5(c).
19

(a) (b)
(c) (d) Figure 5: Interactive Sculpting of D-NURBS Swung Surfaces. Open and closed surfaces shown were sculpted interactively from prototype shapes noted in parentheses (a) Egg shape (sphere). (b) Deformed toroid (torus). (c) Hat (open surface). (d) Wine glass (cylinder).
20

8 Conclusion
We have describe D-NURBS, a dynamic generalization of geometric NURBS. D-NURBS were derived systematically through the application of Lagrangian mechanics and implemented using concepts from nite element analysis and e cient numerical methods. The mathematical development comprised four varieties: D-NURBS curves, tensor-product D-NURBS surfaces, swung D-NURBS surfaces, and triangular D-NURBS surfaces.
We also presented a new physics-based design paradigm based on D-NURBS which generalizes well established geometric design. This paradigm was the basis of a D-NURBS interactive modeling environment. The physics-based framework furnishes designers not only the standard geometric toolkits but powerful force-based sculpting tools as well. It provides mechanisms for automatically adjusting unknown parameters to support user manipulation and satisfy design requirements.
Since D-NURBS are built on the industry-standard NURBS geometric substrate, designers working with them can continue to make use of the existing array of geometric design toolkits. With the advent of high-performance graphics systems, however, the physics-based framework is poised for incorporation into commercial design systems to interactively model and sculpt complex shapes in real-time. Thus, D-NURBS can unify the features of the industry-standard geometry with the many demonstrated conveniences of interaction through physical dynamics.
Acknowledgements
We would like to thank Professor Hans-Peter Seidel for kindly making available the software for triangular B-spline surfaces that he developed with Philip Fong. This research was made possible by grants from the Natural Sciences and Engineering Research Council of Canada and the Information Technology Research Center of Ontario.
21

References
1] J. Baumgarte. Stabilization of constraints and integrals of motion in dynamical systems. Comp. Meth. in Appl. Mech. and Eng., 1:1{16, 1972.
2] M.I.G. Bloor and M.J. Wilson. Representing PDE surfaces in terms of B-splines. Computer-Aided Design, 22(6):324{331, 1990.
3] G. Celniker and D. Gossard. Deformable curve and surface nite elements for free-form shape design. Computer Graphics, 25(4):257{266, 1991. (Proc. ACM Siggraph'91).
4] G. Celniker and W. Welch. Linear constraints for deformable B-spline surfaces. In Proceedings, Symposium on Interactive 3D Graphics, pages 165{170, 1992.
5] W. Dahmen, C. Micchelli, and H.-P. Seidel. Blossoming begets B-spline bases built better by Bpatches. Mathematics of Computation, 59(199):97{115, 1992.
6] C. de Boor. On calculating with B-Splines. Journal of Approximation Theory, 6(1):50{62, 1972.
7] G. Farin. Trends in curve and surface design. Computer-Aided Design, 21(5):293{296, 1989.
8] G. Farin. Curves and Surfaces for Computer aided Geometric Design: A Practical Guide. Academic Press, second edition, 1990.
9] I.D. Faux and M.J. Pratt. Computational Geometry for Design and Manufacture. Ellis Horwood, Chichester,UK, 1979.
10] P. Fong and H.-P. Seidel. An implementation of triangular B-spline surfaces over arbitrary triangulations. Computer Aided Geometric Design, 3-4(10):267{275, 1993.
11] B.R. Gossick. Hamilton's Principle and Physical Systems. Academic Press, New York and London, 1967.
12] M. Halstead, M. Kass, and T. DeRose. E cient, fair interpolation using Catmull-Clark surfaces. In Computer Graphics Proceedings, Annual Conference Series, Proc. ACM Siggraph'93 (Anaheim, CA, Aug., 1993), pages 35{44, 1993.
13] H. Kardestuncer. Finite Element Handbook. McGraw{Hill, New York, 1987.
14] D. Metaxas and D. Terzopoulos. Dynamic deformation of solid primitives with constraints. Computer Graphics, 26(2):309{312, 1992. (Proc. ACM Siggraph'92).
22

15] C.A. Micchelli. On a numerically e cient method for computing with multivariate B-splines. In W. Schempp and K. Zeller, editors, Multivariate Approximation Theory, pages 211{248. Birkhauser, Basel, 1979.
16] M. Minoux. Mathematical Programming. Wiley, New York, 1986.
17] H.P. Moreton and C.H. Sequin. Functional optimization for fair surface design. Computer Graphics, 26(2):167{176, 1992. (Proc. ACM Siggraph'92).
18] L. Piegl. Modifying the shape of rational B-splines. part 1:curves. Computer-Aided Design, 21(8):509{ 518, 1989.
19] L. Piegl. Modifying the shape of rational B-splines. part 2:surfaces. Computer-Aided Design, 21(9):538{ 546, 1989.
20] L. Piegl. On NURBS: A survey. IEEE Computer Graphics and Applications, 11(1):55{71, Jan. 1991.
21] J. Platt. A generalization of dynamic constraints. CVGIP: Graphical Models and Image Processing, 54(6):516{525, 1992.
22] W. Press, B. Flanney, S. Teukolsky, and W. Verttering. Numerical Recipes: The Art of Scienti c Computing. Cambridge University Press, Cambridge, 1986.
23] H. Qin and D. Terzopoulos. Dynamic manipulation of triangular B-splines. In Proceedings of Third ACM/IEEE Symposium on Solid Modeling and Applications, pages 351{360, Salt Lake City, May 1995. ACM Press.
24] H. Qin and D. Terzopoulos. Dynamic NURBS swung surfaces for physics-based shape design. Computer Aided Design, 27(2):111{127, 1995.
25] L.L. Schumaker. Fitting surfaces to scattered data. In G.G. Lorentz, C.K. Chui, and L.L. Schumaker, editors, Approximation Theory II, pages 203{267. Academic Press, New York, 1976.
26] J. Snyder and J. Kajiya. Generative modeling: A symbolic system for geometric modeling. Computer Graphics, 26(2):369{378, 1992.
27] D. Terzopoulos. Regularization of inverse visual problems involving discontinuities. IEEE Transactions on Pattern Analysis and Machine Intelligence, 8(4):413{424, 1986.
28] D. Terzopoulos and K. Fleischer. Deformable models. The Visual Computer, 4(6):306{331, 1988.
23

29] D. Terzopoulos, J. Platt, A. Barr, and K. Fleischer. Elastically deformable models. Computer Graphics, 21(4):205{214, 1987.
30] D. Terzopoulos and H. Qin. Dynamic NURBS with geometric constraints for interactive sculpting. ACM Transactions on Graphics, 13(2):103{136, 1994.
31] W. Tiller. Rational B-splines for curve and surface representation. IEEE Computer Graphics and Applications, 3(6):61{69, Sept. 1983.
32] K.J. Versprille. Computer-Aided Design Applications of the Rational B-Spline Approximation form. PhD thesis, Syracuse University, 1975.
33] W. Welch and A. Witkin. Variational surface modeling. Computer Graphics, 26(2):157{166, 1992. (Proc. ACM Siggraph'92).
34] C. Woodward. Cross-sectional design of B-spline surfaces. Computers and Graphics, 11(2):193{201, 1987.
24

