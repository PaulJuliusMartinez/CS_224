Transconsistent Active Documents

Prof. Dr. Uwe Aßmann Technische Universität Dresden Institut für Software- und Multimediatechnik
http://st.inf.tu-dresden.de Version 07-0.1, Jul 4, 2007

CBSE, © Prof. Uwe Aßmann

1

Literature
 U. Aßmann. Architectural Styles for Active Documents. Available from course home page.

Prof. U. Aßmann, CBSE

2

Overview
 Some problems in document processing
 And why they require document architecture
 Invasive composition of active documents  Export declarations as a basis for architecture of active
documents  Features of acyclic, interactive architectures
 Transconsistency, a novel evaluation concept for active documents
 Transconsistent architectural styles for active documents

Prof. U. Aßmann, CBSE

3

Architecture and Composition
 One of the central insights of the software engineering in the 1990s is:
Separate architecture (composition) from
the base components

Prof. U. Aßmann, CBSE

4

Purpose
 Get a second level of variability
 architecture and components can be varied independently of each other
 Scale better by different binding times of composition programs
 Be uniform for many products of a product family
 However, how to be uniform also for documents?

Prof. U. Aßmann, CBSE

5

Problems in Document Construction

CBSE, © Prof. Uwe Aßmann

6

Some Problems 1 ­ \cite in LaTeX

 As already McIlroy.68 has shown, we need components for a ripe industry

@InProceedings{

mcilroy.68b,

author

= "M. Douglas McIlroy",

title

= "Mass-Produced Software Components",

booktitle {NATO}

= "Software Engineering Concepts and Techniques (1968

Conference of {S}oftware Engineering)",

editor

= "J. M. Buxton and Peter Naur and Brian Randell",

publisher = {NATO Science Committee},

pages

= "88--98",

month = oct,

year

= "1968"

}

Prof. U. Aßmann, CBSE

7

Usual Solution
 Problem: Document is active, i.e., contains generated components
 Latex writes citation to .aux-file  bibtex greps them and produces a .bbl file  .bbl file is included
 How does the architecture of a latex document look like that regenerates all generated components?

Prof. U. Aßmann, CBSE

8

May Be Like This...

\cite \cite \cite
\cite
\bibliography{}

.bib file
bibtex

.bbl file

Prof. U. Aßmann, CBSE

9

Problem 2 ­ Deliverable Definitions in LaTeX Project Plan

\begin{deliverables} EASYCOMP workshop I EASYCOMP workshop II Web-based Composition Centre Composition Handbook Final Report \end{deliverables}

&\DIS.1.1 & \UKA & 12 & W & PU & 18 \\ &\DIS.1.2 & \UKA & 12 & W & PU & 30 \\ &\DIS.2 & \UKA & 3 & H & PU & 36 \\ &\DIS.3 & \UKA & 14 & R & PU & 24 \\ &\DIS.4 & \UKA & 6.5 & R & CO/PU & 36 \\

Prof. U. Aßmann, CBSE

10

Purpose
 extract deliverables by perl script  concat to latex table  include table
 How does the architecture of that document look like?

Prof. U. Aßmann, CBSE

11

Like This...

\begin{deliverable} \begin{deliverable} \begin{deliverable}
\begin{deliverable}
\input{deliverables}

pattern ,,\begin{deliverable}"
perl

deliverable table

Prof. U. Aßmann, CBSE

12

By The Way It Should Use an LAG(1)

\begin{deliverable} \begin{deliverable} \begin{deliverable}
\begin{deliverable}
\input{deliverables}

AG rules

AG walker

,,definition table"

Prof. U. Aßmann, CBSE

13

Problem 3 ­ A Simple Web Page, Generated By a Database
<html> ..
<table> <tr> <td> Employee </td> <td> Address </td> </tr> <tr> <td> Uwe Assmann </td> <td> Farhagsvägen 128 </td> </tr> <tr> <td> Robert Kaminski </td> <td> Platensgatan 9 </td> </tr> <tr> <td> Jens Gustavsson </td> <td> Stora Torget 14 </td> </tr>
</table>
</html>

Prof. U. Aßmann, CBSE

14

Solution
 Run the embedded script of an HTML template  Start SQL query in MySQL  Transform (with XSLT) the plain text to HTML  Include table and replace the embedded script
 How does the architecture of that document look like?

Prof. U. Aßmann, CBSE

15

Like This...

Uwe Assmann:Fårhagsvägen 128 Robert Kaminski:Platensgatan 9 Jens Gustavsson: Stora Torget 14

MySQL starts XSLT

script

is replaced by

<table>

Prof. U. Aßmann, CBSE

16

Problem 4: Electra Spreadsheet
 Used for contract negotiations about project budges with the EC
 About 10 summary pages, generated from participant figures
 4 pages per participant
 No architecture available....

Prof. U. Aßmann, CBSE

17

Conclusion
 Why don't we define document architectures?
 That allows for extracting the architecture and separating it from ,,components"
 Software architecture and composition have been successful for
 Developing in the large  Software reuse
 Why don't we define a document architecture language?
 That allows for expressing the coarse grain structure of documents?
 And unify it with software architecture / software composition?

Prof. U. Aßmann, CBSE

18

But An Architectural Language For Documents is Difficult..
 Well, connectors as binding elements between components don't suffice
 It must be composition operations or other mechanisms (such as AG) that glue the components together
 We need composition languages for uniform composition
 There are some other problems...
 Invasiveness  Transconsistency

Prof. U. Aßmann, CBSE

19

Invasive Composition of Active Documents

CBSE, © Prof. Uwe Aßmann

20

The Elements of Composition

Component Model

Composition Technique

Composition Language

Prof. U. Aßmann, CBSE

21

Uniform Composition Systems

Universal Composition

Software Composition Systems

Composition Language

Invasive Composition (COMPOST)
N-calculus

Systems with

Composition Composition Filters

Composition Operators Operators

Hyperslices

Aspect Systems

Aspect Separation

Aspect/J

Architecture Systems
Classical Component Systems Object-Oriented Systems
Modular Systems

Architecture as Aspect

Darwin Aesop

Standard Components

DCOM CORBA Beans/EJB

Objects as

C++ Java

Run-Time Components

Sather

Modules as CompileTime Components

Modula Ada-85 C..
Prof. U. Aßmann, CBSE

22

For Active Documents, We Need Invasiveness
 Active documents require invasive patching
 If some parts are changed, others need to be updated
 Active documents need a greybox component model  Interface: what do the composition points look like?
 hooks (variation points)  definitions
 What are the values?
 fragments of data and code
 A definition language (markup language) for provided definitions

Prof. U. Aßmann, CBSE

23

Invasive Composition ­ What's This?
Invasive Composition adapts and extends fragment components
at hooks by transformation

Prof. U. Aßmann, CBSE

24

Components have Hooks

Hooks are variation points of a box: fragments which are subject to change

XML Variation Points
 beginning/end of tag lists  anchors

 Software Variation Points
 method entries/exits  generic parameters

Prof. U. Aßmann, CBSE

25

Implicit Hooks
 Example Method Entry/Exit

Method.entry Method.exit

m (){ abc.. cde..
}

Given by the programming language

Prof. U. Aßmann, CBSE

26

Implicit Hooks For XML
 Example List Entry/Exit

List.entry List.exit

<UL> <LI>... </LI> <LI>... </LI>
</UL>

Given by the DTD or Xschema

Prof. U. Aßmann, CBSE

27

The Composition Technique of Invasive Composition
 A composer is a tag transformer from unbound to bound hooks composer: box with hooks --> box with tags

Invasive Composition adapts and extends
components at hooks
by transformation

Prof. U. Aßmann, CBSE

28

List Entry

List Entry

List Exit
<UL> <LI>... </LI> <LI>... </LI>
</UL>

List Exit
<UL> <LI>... </LI> <LI>... </LI> <LI>... </LI> <LI>... </LI>
</UL>

box.findHook(,,ListEntry").extend(,,<LI>... </LI>"); box.findHook(,,ListExit").extend("<LI>... </LI>");
Prof. U. Aßmann, CBSE

29

Method Entry

Method Entry

m (){ abc.. cde..
}

Method Exit

Method Exit
m (){ print("enter m"); abc.. cde.. print("exit m");
}

box.findHook(,,.MethodEntry").extend("print(\"enter m\");"); box.findHook(,,MethodExit").extend("print(\"enter m\");");
Prof. U. Aßmann, CBSE

30

Invasive Composition

Composer
Invasively transformed tags

 Invasive Composition works uniformly over code and data
 Allows to compose XML documents uniformly
 Extend operation implements what we need for document architectures

Prof. U. Aßmann, CBSE

31

Basic Operations on Hooks
 bind (parameterize)  extend  rename  copy

Prof. U. Aßmann, CBSE

32

Explicit Invasive Architectures for Active Documents

CBSE, © Prof. Uwe Aßmann

33

Documents Must be Decomposed
 For architecture of active documents, we need fragment composition and, additionally, fragment decomposition
 For fragment-based composition of documents, other documents need to be decomposed
 Fragment extraction  Fragment selection  Fragment component search  A fragment extraction language is needed
 In the simplest case, components export all fragments (white-box)
 Visibility can be controlled by fragment export languages forming export interfaces

Prof. U. Aßmann, CBSE

34

Fragment Query Languages
 A exported fragment (provided fragment) is defined by a component of an active document and exposes to the external world
 The programmer declares the exported item in
 a fragment export language
. a markup language (explicit definition, embedded) . Often the explicit specification of exports of fragments is too
cumbersome
 a fragment query language
. a match language (implicit definition, exbedded), to select fragments from a component
. a query language (implicit definition, exbedded) . a position addressing language (implicit, exbedded)
 In whitebox reuse, fragment export and query language coincide

Prof. U. Aßmann, CBSE

35

Export and Query Language 1

\cite \cite \cite
\cite
\bibliography{}

Definition language
Regular expressions \cite{.*}

Prof. U. Aßmann, CBSE

36

Export and Query Language 2

\begin{deliverable} \begin{deliverable} \begin{deliverable}
\begin{deliverable}
\input{deliverables}

Definition language
LAG, together with regular expressions
\cite{.*}

Prof. U. Aßmann, CBSE

37

Query Language 3
Uwe Assmann:Fårhagsvägen 128 Robert Kaminski:Platensgatan 9 Jens Gustavsson: Stora Torget 14
Definition language Relational algebra, started by script

Prof. U. Aßmann, CBSE

38

Another Query Language is XSLT

<html> ..
<table> <tr> <td> Employee </td> <td> Address </td> </tr>
<tr> <td> Uwe Assmann </td> <td> Farhagsvägen 128 </td> </tr>
<tr> <td> Robert Kaminski </td> <td> Platensgatan 9 </td> </tr>
</table>
</html>

XSLT

Prof. U. Aßmann, CBSE

39

Basic Operation to Query Fragments
 match(<ExprInExtractionLanguage>) --> ExportedDefinitions

Prof. U. Aßmann, CBSE

40

Basic Operations on Hooks of Active Documents
 bind (parameterize)  extend  rename  copy  match

Prof. U. Aßmann, CBSE

41

The Architecture of Case 1 A Spreadsheet-like Document

.bib file

\cite \cite \cite \cite
\bibliography{}

match(,,@InBook{.*}")

match(,,\cite{.*}")

bibtex

extend

.bbl file

Prof. U. Aßmann, CBSE

42

The Architecture of Case 1 With Multiple Components

.bib file

\cite \cite \cite \cite
\bibliography{}

match(,,@InBook{.*}")

match(,,\cite{.*}")

bibtex

extend

.bbl file

Prof. U. Aßmann, CBSE

43

Advantages of Export Declarations For Example 1
 We have extracted the document's architecture  latex becomes simpler
 extraction is separated into the composition level
 Standard language to write the compositions
 no architectural language required
 Documents are real components, with a composition interface

Prof. U. Aßmann, CBSE

44

The Architecture of Case 2 A Spreadsheet-Document

\begin{deliverable} \begin{deliverable} \begin{deliverable}
\begin{deliverable}
\input{deliverables}

LAG

AG-Extractor

extend

deliverable table

Prof. U. Aßmann, CBSE

45

Advantages for Example 2
 latex cannot extract LAG patterns, only regular ones
 and cannot treat relational algebra either
 We can employ many different definition (extraction, markup) languages
 We can employ many different connection and composition languages
 and write connectors with them
 Flexible composition approach

Prof. U. Aßmann, CBSE

46

The Architecture of Case 3 A Spreadsheet-Document

Uwe Assmann:Fårhagsvägen 128 Robert Kaminski:Platensgatan 9 Jens Gustavsson: Stora Torget 14

MySQL

XSLT

bind <table>

Prof. U. Aßmann, CBSE

47

Advantages of Architectures for Active Documents
 Better reuse
 Scripts are removed from HTML pages  The template can be reused in other contexts where the table
expansion is not required
 A lot of embedded scripts in HTML is composition code
 let's move it out!
 Simplifying web engineering

Prof. U. Aßmann, CBSE

48

Afterthought: What Flows Through an Active Document
 In contrast to a software architecture, in active documents document values flow
 Like in a spreadsheet, the dataflow graph is acyclic (spreadsheetdocuments)
 Generation and modification of values are modeled with export declaration languages (script languages)
 In contrast to a software architecture, the values only change when the user changes a component
 Pushed once through that graph, the document is updated  Transclusion works for dataflow graphs!

Prof. U. Aßmann, CBSE

49

Requirements for Active Document Architectures
 Fragment extractions or export definitions  Invasive embedding of results  Hot update of all computations (aka transconsistency)

Prof. U. Aßmann, CBSE

50

Transconsistency ­ A New Architectural Principle for Hot Update

CBSE, © Prof. Uwe Aßmann

51

Transclusion
 Imitates embedded sharing of document components in distributed edits
 Invented by Ted Nelson, the inventor of hypertext
 ,,hot update" (incremental update)
 Every change in a definition is immediately shared by all uses  Realized by reference and special edit protocols  Semantics is between call by name and call by value
 Nelson says: "That's what the computer is all about"

Prof. U. Aßmann, CBSE

52

Hot Update is Necessary in Active Documents

\begin{deliverable} \begin{deliverable} \begin{deliverable}
\begin{deliverable}

Transclusion Semantics
LAG AGExtractor

\input{deliverables}

extend

deliverable table

Prof. U. Aßmann, CBSE

53

Transconsistency of Active Documents (Immediate Update)
 The architecture of an active document should obey immediate (hot) update (transconsistency)
 Transclusion only deals with equality of hooks, but does not treat operations or modifications
 Dependent components must be updated immediately
 For transconsistency, transclusion is a basis
 Transconsistency requires a data-flow graph over operations in the document, i.e., a data-flow-based architecture
 Whenever the input of a slice of the data-flow graph changes, recompute the result by reevaluating the slice
 Transconsistency requires invasive embedding
 The component model of an active document must be graybox, otherwise embeddings are not possible

Prof. U. Aßmann, CBSE

54

A Formal Definition of Transconsistency

CBSE, © Prof. Uwe Aßmann

55

Transclusion in Flow Graphs of Embedding Operations

 Let D be a dataflow graph of embedding operations, a bipartite graph of EmbeddingOperations and Values.
 D is called transclusive, if:
 If an input value changes, all dependent values are declared inconsistent immediately, until they are reembedded

embedding embedding

Prof. U. Aßmann, CBSE

56

Transconsistency in Data Flow Graphs

 Let D be a dataflow graph, a bipartite graph of Operations and Values.
 D is called transconsistent, if the hot update condition is true:
 If an input value changes, all dependent values are declared inconsistent immediately, until they are recomputed

immediately

Prof. U. Aßmann, CBSE

57

Transconsistency in Active Documents

 Let A be an active document with an underlying dataflow graph D for document parts.
 Then, D is called the architecture of A.
 A is called transconsistent, if D is transconsistent

embedding

embedding

Prof. U. Aßmann, CBSE

58

Transclusion and Transconsistency

Transclusion =
Invasive Embedding + Incrementality (hot update)
Transconsistency =
Transclusion + Data flow graph

Transconsistent Architecture =
Transconsistency + Architecture
Prof. U. Aßmann, CBSE

59

Transconsistency Goes Beyond Transclusion
 Transclusion only treats embedding and hot update  It does not treat
 Operations beyond embedding  Data flow graphs of these operations  Components

Prof. U. Aßmann, CBSE

60

An Example for Transconsistency: Spreadsheets
 A spreadsheet relies on a dataflow graph (pipe-and-filter)
 It is a set of slices, i.e., a set of expressions, or scriptlets  A scriptlet describes a dataflow graph of operations  Every slice is independent, i.e., can be recomputed independently
 Spreadsheets are simple active document with transconsistency, i.e., immediate update
 Spreadsheets do not have architecture
 No component model nor composition interface

Prof. U. Aßmann, CBSE

61

An Example for Transconsistency: Web Documents
 Servlet-based documents rely on reexpansion if users change forms or templates
 The servlets span up a data flow graph
 Templates and form inputs are the inputs  Result pages the output
 The regeneration is an implementation of transconsistency

Prof. U. Aßmann, CBSE

62

Transconsistent Architectures
Uniform Composition of Active Documents with Staging and Transconsistency

CBSE, © Prof. Uwe Aßmann

63

Transconsistent Documents
 Transconsistent documents are active documents with transconsistent architecture
 This class of active documents is like spreadsheets, but with explicit architecture
 Are based on a
. Dataflow graph . Graybox component model (invasive embedding) . Incrementaility (Hot update)

Prof. U. Aßmann, CBSE

64

Purpose of Transconsistent Architectures
 Transconsistency copes interactive editing
 This is fundamentally different to the so-far batch-oriented style of software construction, software build, and software execution
 Transconsistency is needed in software editing, too

Prof. U. Aßmann, CBSE

65

Transconsistent Architectural Styles
Composition of Active Documents with Staging and Transconsistency

CBSE, © Prof. Uwe Aßmann

66

Spreadsheet-Documents
 A spreadsheet-document has many applications  A web form is a distributed spreadsheet-document

Prof. U. Aßmann, CBSE

67

Web Form Processing with JSP

Form field

JSP

Java servlet Class

Form result

Html snippet

Servlet expansion

Prof. U. Aßmann, CBSE

68

Spreadsheet-documents and Pipe-AndFilter Architectures
 A spreadsheet-document corresponds to a Pipe-and-filter architecture
 Resembles spreadsheet-documents and spreadsheets  In those, outer ports are closed, but components can be changed
interactively
 The question is how often the filter architecture is evaluated for transconsistency

Prof. U. Aßmann, CBSE

69

2-Pass Transconsistent Documents
 Transconsistent documents underly a dependency graph for their update
 This dependency graph must be acyclic
 Evaluation classes for transconsistent documents
 1-pass problems along the document (all definitions before uses)  2-pass (backpatch problems) along the document  Statically orderable along the dependencies (similar to wavefront
or OAG)  Form processing

Prof. U. Aßmann, CBSE

70

Citations and Bibtex (2-Pass-Document)

.bib file

\cite{\(.*\)} all in set
references

bibref file

match(,,@InBook{.*}")

bibtex
.bbl file

Prof. U. Aßmann, CBSE

71

References (2-Pass-Document)

\ref{\(.*\)} all in set \label{\(.*\)} all in set
references

ref file
label file

unification
chapter numbers

Prof. U. Aßmann, CBSE

72

Central Tables (2-Pass-Document)

\begin{deliverable} .* \end{deliverable} all in set
deliverables

deliverable table

Prof. U. Aßmann, CBSE

73

Person Cost Calculation Central Tables (2-Pass-Document)

\begin{tasks} .* & \(.*\) \\ \end{tasks} all in set
PersonMonths

sum up person months

Prof. U. Aßmann, CBSE

74

Stream-Documents (Spreadsheet Documents with Pipe Ports)
 Instead of being a closed document, spreadsheet-documents can be open in the sense that they take in data streams over stream ports
 START submission phase  START reviewing phase
 Such a change corresponds to a document extension, but works via communication channels/connectors
 User changes and sends via ports are the similar effects
 User change: change component values  Send via ports: change from external world

Prof. U. Aßmann, CBSE

75

Transconsistent Documents: Roundtrip Engineering Documents

Core (Algorithm)

Requirements  aspect

Architecture aspect

Op Op

Op
Op Op
Op

Testing

Architecture

Testing aspect

Consistent 
roundtrip editing of views 

Prof. U. Aßmann, CBSE

76

Transconsistent Architectural Styles for Active Documents

Roundtrip Documents
Stream-based Documents

Web-Form-Documents (interactive)

Spreadsheet-Documents (interactive)

Relational Content

2-Pass Documents

Prof. U. Aßmann, CBSE

77

Benefit of Transconsistent Architectures For Active Documents

CBSE, © Prof. Uwe Aßmann

78

Advantages of Transconsistent Active Documents
 Beyond standard document models (such as OLE):
 Explicit distinction between architecture and content  Better reuse  Can be combined with staged composition for Web engineering
 Beyond spreadsheets:
 Full table and sheet extension, not only value transconsistency (table extension hot update)
 Beyond template-based documents:
 Decentralized definition of databases/relations

Prof. U. Aßmann, CBSE

79

Web Engineering
 Transconsistent active documents provide a first unified model for web- and document engineering
 Beyond simple approaches such as JSP, ASP
 Quality model
 Documentative due to architecture  Gets rid of the spagetti code in web engineering

Prof. U. Aßmann, CBSE

80

Summary
 For engineering of active documents, explicit distinction of architectures is important
 Invasive embedding is required  Data flow graphs are required
 Transconsistent architectures are an important architectural styles for active documents
 Rely on an extended concept of transclusion  Cope with streams of interactive input

Prof. U. Aßmann, CBSE

81

The End

CBSE, © Prof. Uwe Aßmann

82

