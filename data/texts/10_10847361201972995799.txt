29 June 2003
Three Kinds of Probabilistic Induction: Universal Distributions and Convergence Theorems

Ray J. Solomonoff

Visiting Professor, Computer Learning Research Centre Royal Holloway, University of London

IDSIA, Galleria 2, CH­6928 Manno­Lugano, Switzerland

rjsolo@ieee.org

http://world.std.com/~rjs/pubs.html

Abstract

Introduction

We will describe three kinds of probabilistic induction problems, and give general solutions for each , with associated convergence theorems that show they tend to give good probability estimates.
The first kind extrapolates a sequence of strings and/or numbers.
The second extrapolates an unordered set of strings and/or numbers.
The third extrapolates an unordered set of ordered pairs of elements that may be strings and/or numbers. Given the first element of a new pair, to get a probability distribution on possible second elements of the pair.
Each of the three kinds of problems is solved using an associated universal distribution. In each case a corresponding convergence theorem is given, showing that as sample size grows, the expected error in probability estimate decreases rapidly.
The solutions given are very general and cover a great variety of induction problems. Time series prediction, grammar discovery (for both formal and natural languages), curve fitting, the identification problem and the categorization problem, are a few of the kinds of problems amenable to the methods described.

Problems in probabilistic induction are of three general kinds: In the first, we are given a linearly ordered sequence of symbols to extrapolate. There is a very general solution to this problem using the universal probability distribution, and much has been written on finding good approximations to it ( Sol60, Sol64a, Sol64b, Wal68, Wal87, Wil70, Ris78, Ris87 ). It has been shown that for long sequences, the expected error in probability estimates converge rapidly toward zero (Sol78).
In the second kind of problem, we want to extrapolate an unordered sequence of finite strings and/or numbers. A universal distribution has been defined that solves this problem (Sol 99). We will give a convergence theorem that shows it to give small errors as the number of examples increases -- just as with sequential predictions.
In the third kind, operator induction, we have an unordered sequence of ordered pairs of elements (Qi, Ai) (that may be strings and/or numbers). Given a new Qi, to obtain the probability distribution over possible Ai's. The Q's can be questions in some formal or natural language, the A's can be associated answers. The Q's can be inputs to some unknown stochastic device and the A's can be outputs (The Identification Problem). The Q's can be description of mushrooms, the A's can tell if they are

1

edible or poisonous (The Categorization Problem). The Q's can be numbers and the A's can be exact or noisy values of some unknown function of those numbers (The Curve Fitting Problem).
We will give two solutions to this problem based on universal distributions, and give associated convergence theorems that affirm their precision in prediction.
Section 1 deals with the sequential prediction and its universal distribution. This is followed by a convergence theorem for the normalized distribution and some more recent generalizations of it.
Section 2 deals with the extrapolation of a set of unordered strings and/or numbers, and gives an associated convergence theorem.
Section 3 deals with Operator Induction, and gives the associated convergence theorem.

Because certain of the codes, Sk do not result in useful output (i.e. the machine prints out part of x, but continues to calculate without printing anything else), the resultant probability distribution is not a measure, but a semimeasure -- i.e.,

PM (x0) + PM (x1) < PM (x)

For our first prediction method, we will normalize PM to create PM

PM (x0)

=

PM

PM (x0) (x0) + PM

(x1)

PM

(x)

PM (x1)

=

PM

PM (x1) (x0) + PM

(x1)

PM

(x)

(2)

PM () = 1

1 Sequential prediction

The universal distribution for sequential prediction is a probability distribution on strings obtained by assuming the strings are the output of a universal machine with random input. We will at first consider only universal Turing machines with binary unidirectional input and output tapes and an infinite bidirectional work tape. It is possible to get equivalent distributions using more general kinds of universal devices with less constrained input and output.
How can we use this definition to get an expression of the probability of a particular finite string, x?
Let [Sk] be the set of all binary programs for our reference machine, M , such that M (Sk) gives an output with x as prefix. To prevent double counting we have an additional constraint on the set [Sk] : dropping the last bit of the string Sk, will give a program with output that does not have x as prefix. With this condition the probability of x becomes the sum of the probabilities of all of its programs:

PM (x) = 2-|Sk|
k

(1)

|Sk| is the number of bits in Sk and 2-|Sk| , the probability of an input that has Sk as prefix.

Though there are other possible methods of normalization, it is not difficult to show that the equations of (2) give us maximum PM (x)/PM (x) for all x. Later we will show that this condition minimizes the expected prediction error of PM .
It is easy to use PM for prediction:

P (x1|x) = PM (x1)/PM (x) and

P (x0|x) = PM (x0)/PM (x)

(3)

Just how accurate are the predictions of PM ? Suppose you have a device µ, generating binary sequences according to some finitely describable stochastic rules. It gives a probability for each of the bits it generates. If you use the universal distribution to get probabilities for each of the bits, there will be a difference between the two probabilities. If you square these probability differences and add them up, the expected value of the sum is bounded by -1/2 ln PM, µ. PM, µ is the probability that the universal distribution assigns to µ, the generator of the data (Sol 78,p.426). More exactly: µ(xn+1 = 1|x1 x2 x3....xn) is the conditional probability distribution according to µ that the (n + 1)th bit of a binary sting is 1, given the previous n bits, x1 x2 x3...xn.

2

PM (xn+1 = 1|x1 x2 x3....xn) is the corresponding probability for PM
x = x1 x2 x3....xn is a string constructed using µ as a stochastic source.
Both µ and PM are able to assign probabilities to the occurrence of the symbol 1 at any point in the sequence x based on the previous symbols in x.
The Convergence Theorem says that the total expected squared error between µ and PM is given by

n

E
µ

(PM (xm+1
m=1

=

1|x1

x2

x3....xm)

-µ(xm+1 = 1|x1 x2 x3....xm))2 < -1/2 ln PM, µ (4)
The expected value is with respect to probability distribution, µ.
lnPM, µ is dependent on just what universal device generated the universal distribution. It is approximately Kln2, where K is the Kolmogorov complexity of the generator ­ the length of the shortest program needed to describe it
Since this total error is independent of the size of the data string being predicted it is clear that the errors in the individual bits must decrease more rapidly than 1/n, n being the length of the data sequence.
This is a very powerful result. It is clear that the universal distribution gives very good probability estimates.
The truth of (4) hinges on the fact that if µ is a computable probability measure then there exists a positive constant PM, µ such that

PM (x)/µ(x) > PM, µ
and that while PM, µ will depend on µ(·) and PM (·), it will be independent of x.
Eq. (4) can be usefully generalized : IF P1 and P2 are any normalized measures on x. x(n) is a string of length n.

P2(x(n))/P1(x(n)) > (n) > 0
­where (n) is a function of P1(·), P2(·) and n, but not of x

THEN

n

E
P2

(P1(xm+1
m=1

= 1|x1 x2 x3....xm)

-P2(xm+1 = 1|x1 x2 x3....xm))2 < -1/2 ln (n) (5)
The Convergence Theorem of (4) is true if PM is a normalized universal measure. Peter Gacs (Gac 97) has shown it to be true for the unnormalized semimeasure, PM , but the associated convergence constant -1/2 ln PM, µ is much larger than the corresponding constant, -1/2 ln PM, µ for PM .
The difference between them is

1/2 ln(PM, µ/PM, µ)
PM, µ/PM, µ is the ratio of the values of the normalization factors for n = . We have selected a normalization technique to make it as large as possible.
The result is that the probability errors for the normalized measure, PM (·) can converge much more rapidly than those for the semimeasure, PM (·).
Gacs (ibid) also shows that the generalization corresponding to eq. 5 holds if P2(·) is an unnormalized semimeasure.
Marcus Hutter (Hut 02 ) shows that these results hold if we use alphabets with any finite number of symbols.
In the forgoing convergence theorems the total squared probability difference is used as loss function. The proofs of the theorems also show the same convergence for the Kullback­Liebler loss function (which is greater than or equal to the square loss function ­ resulting in stronger theorems).
Hutter (ibid) considers more general loss functions for the universal distribution and obtains associated convergence theorems.

2 Induction on Unordered Sets
2.1 The Problem and a Solution
We have an unordered set of n finite strings of symbols, D1, D2 . . . Dn . Given a new string, Dn+1 , what is the probability that it belongs to the set? Or --

3

given a string, a , how must it be completed so it is most likely to be a member of the set? Or, given a string a and a set of possible completions, [abj], what is the relative probability of each of these completions?
A common example of unordered set prediction occurs in natural and formal languages. We are given a set of examples of strings that are acceptable sentences. Given a new string, what is the probability that it is acceptable? A common solution technique is to devise a well fitting stochastic grammar for the known set of strings. The universal distribution gives a criterion for goodness of fit of such grammars [Hor 71, Sol 64b pp.240-251].
The Universal Distribution PM , is a weighted sum of all finitely describable semimeasures on finite strings:

n
PM ([Di]) = j Pj(Di)
j i=1

(6)

n is the number of strings in the set [Di] j is the weight of the jth semimeasure on finite strings. j = 2-|aj| where aj is the shortest description of Pj(·) and |aj| is the number of bits in aj The M subscript of PM indicates that the functions Pj are to be described with reference to machine, M . Since M is universal, it can be used to describe any
describable function.
Suppose that [Di] i = 1...n is a set of n strings generated by some unknown stochastic device, µ(·).
What is the probability that our universal distribu-
tion assigns to a new string, Dn+1 ? It is just

P (Dn+1) = PM ([Di] Dn+1)/PM ([Di]) (7)

signed by µ(·), the generator of [Di], in (8). In section 3, we will discuss Operator Induction and prove an associated convergence theorem. Section 3.3 shows that this convergence theorem implies a convergence theorem for (6), insuring small expected errors between the probability estimates of PM (·) and those of µ(·).
3 Operator Induction
In the Operator Induction problem, we are given an unordered set of n strings and/or number pairs, [Qi, Ai]. Given a new Qn+1, what is the probability distribution over all possible An+1? We will give two solutions.
3.1
In the first, we consider the problem to be an extrapolation of an unordered set of finite strings, Di, in which Di = (Qi, Ai)
Eq. 6 is used to obtain a probability distribution on all unordered sets of Qi, Ai pairs and (7) gives us a probability distribution over (Qn+1, An+1) -- i.e. P (Qn+1, An+1) for all possible An+1.
Then
P (An+1) = P (Qn+1, An+1)/ P (Qn+1, Ai) (9)
i
3.2
For the second solution to the Operator Problem, we express the probability of an arbitrary An+1 directly as a function of the data set, [Qi, Ai]. For this data set, the probability distribution of An+1 is

The probability assigned to [Di] by it's creator,µ(·), is

n

µ([Di]) = µ(Di)

(8)

i=1

For a suitable set of strings, [Di], the probability assigned by PM in (6) can be very close to those as-

n+1

a0j Oj (Ai|Qi)

j=1

i=1

(10)

Here Oj(·|·) is the jth possible conditional prob-
ability distribution relating its two arguments. Oj(Ai|Qi) is the probability of Ai, given Qi, in view of the function Oj

4

We would like to sum over all total recursive functions, but since this set of functions is not effectively enumerable, we will instead sum over all partial recursive functions, which are effectively enumerable.
a0j is the a priori probability of the function Oj(·|·) . It is approximately 2-l(Oj) where l(Oj) is the length in bits of the shortest description of Oj.
We can rewrite (10) in the equivalent form

Here,

ajnOj (An+1|Qn+1)
j=1

(11)

To do this, we hypothesize that the sequence of Ai answers that have been observed, were created by a
probabilistic algorithm, µ(Ai|Qi) and that µ can be described with k bits.
Any probability distribution that assigns probabil-
ities to every possible Ai, must also assign probabilities to each bit of Ai:
Suppose that ar is a string of the first r bits of Ai. Then the probability given by µ that the (r + 1)th bit
of Ai is 1 is

µ(ar 1xj |Qi )

µ(ar xj |Qi )

jj

n
anj = aj0 Oj (Ai|Qi)
i=1
In (11), the distribution of An+1 is a weighted sum of all of the Oj distributions -- the weight of each Oj being the product of its a priori probability and the probability of the observed data in view of Oj.
Section 3.3 shows that even with a relatively short sequence of Q,A pairs, these distributions tend to be very accurate. If we use the aj0 to express all of our a priori information about the data, they are perhaps the most accurate possible.
Since we cannot compute this infinite sum using finite resources, we approximate it using a finite number of large terms -- terms that in (11) have large ajn values. While it would seem ideal to include the terms of maximum weight, it has been shown to be impossible to know if a particular term is of maximum weight. The best we can do is to find a set of terms of largest total weight in whatever time we have available.
We can completely characterize the problem of operator induction to be finding, in whatever time is available, a set of functions, Oj(·|·) such that j ajn is as large as possible.
3.3

xj ranges over all finite strings. Similarly, P (·) the algorithm of (10), can be used to assign a probability to every bit of every Ai. We will represent the sequence of Ai's by a string, Z, that is formed by concatenating these Ai's then separating them by the symbols, s -- denoting "space". Z, then, is a sequence of symbols from the ternary alphabet 0, 1, s. Using an argument similar to the foregoing, it is clear that both µ and P are able to assign probabilities to the space symbol, s as well as to 0, and 1, since each of them must be able to specify when each Ai string terminates. We have, then, two probability distributions on the ternary strings, Z. In the first distribution, µ is the creator of the observed sequence, and in the second distribution, P , through (10), tries to predict the symbols of Z. For two such probability distributions on ternary strings, we can apply Hutter's (ibid) generalization to arbitrary alphabet, of the generalized convergence theorem, (5) : The expected value, with respect to µ (the "generator"), of the sum of the squares of the differences in probabilities assigned by µ and P to the symbols of the string are less than - ln c, c being the largest positive number such that P/µ > c for all arguments of P and µ. More exactly:

We will show that for an adequate sequence of
(Qi, Ai) pairs, the predictions obtained by the probability distribution of (10) can be expected to be ex-
tremely good.

n hli+1
µ(Zl)

(Pil,j (t) - µil,j (t))2 < k ln 2

l i=1 j=0 t=0,1,s

(12)

5

l sums over all strings Zl that consist of n finite binary strings separated by s symbols (spaces).

Ail is the ith A of Zl Pil,j(t) is the probability as given by P that the jth symbol of Ail will be t, conditional on previous symbols of Ail's in the sequence, Zl and the corresponding Q's.

t takes the values 0,1 and s.

µli,j(t) is defined similarly to Pil,j(t), but it is inde-

pendent of previous Ali's in the sequence.

hli is the number of bits in Ali. The (hli+1)th symbol

of Ail is always s. The total number of symbols in Zl is

in=1(hil + 1).

µ(Zl) is the probability that µ assigns to Zl in view

of the sequence of Q's.

k is the length in bits of the shortest description of

µ.

This implies that the expected value with respect

to µ of the squared "error" between P and µ, summed

over the individual symbols of all of the Ai, will be less than k ln 2

Since the total number of symbols in all of the an-

swers can be very large for even a small number of

questions, the error per symbol decreases rapidly as

n, the number of Q, A pairs increases.

Equation (12) gives a very simple measure of the

accuracy of equation (10). There are no "order of

one" constant factors or additive terms. A necessary

uncertainty is in the value of k. We normally will

not know its value, but if the generator of the data

has a long and complex description, we are not sur-

prised that we should need more data to make good

predictions -- which is just what (12) specifies.

The value of the constant, k, depends critically on

just what universal reference machine is being used to

assign a priori probability to the Oj and to µ. Any a priori information that a researcher may have can be

expressed as a modification of the reference machine

-- by inserting low cost definitions of concepts that

are believed to be useful in the needed induction --

resulting in a shorter codes for the Oj(·), for µ, ( a smaller k ), and less error.

We believe that if all of the needed a priori infor-

mation is put into the reference machine, then (10)

is likely to be the best probability estimate possible.

At first glance, this result may seem unreasonable: Suppose we ask the system many questions about Algebra, until it's mean errors are quite small -- then we suddenly begin asking questions about Linguistics -- certainly we would not expect the small errors to continue! However, what happens when we switch domains suddenly, is that k suddenly increases. A µ that can answer questions on both Algebra and Linguistics has a much longer description than one familiar with Algebra only. This sudden increase in k accommodates large expected errors in a new domain in which only a few questions have been asked.
3.4
If we set Qi = (i = 1...n) in(10), it becomes clear that the equation (6) for induction on unordered sets is a special case of Operator Induction, and that the Convergence Theorem (12) holds for (6) as well. This also assures convergence of the Operator Induction technique of Section 2.1.
Is there any advantage in using (9) rather than (10) for Operator Induction?
(9) exploits regularities in the set [Qi, Ai]. It includes regularities in the set [Qi] -- which we do not use -- so it would seem that we are doing more work than is necessary. In (10), we only find regularities in functions relating Qi to Ai. Such regularities may be easier to find than regularities in the more complex object [Qi, Ai]. In general, however, the finding of regularities for either of the techniques will depend critically on just what problem is being solved.
References
[1] (Gac 97) G´acs, Peter, "Theorem 5.2.1," in An Introduction to Kolmogorov Complexity and Its Applications , Li, M. and Vit´anyi, P. , SpringerVerlag, N.Y., 1997, pp. 328-331
[2] (Hor 71) Horning, J. "A Procedure for Grammatical Inference," Proceedings of the IFIP Congress 71, Amsterdam, North Holland, pp. 519­523, 1971.

6

[3] (Hut 02) Hutter, M.,"Optimality of Universal Bayesian Sequence Prediction for General Loss and Alphabet," http://www.idsia.ch/~marcus/ai/

[14] (Wil 70) Willis, D.G. "Computational Complexity and Probability Constructions," Journal of the Assoc. of Comp. Mach., pp. 241­259, April 1970.

[4] (Li 97) Li, M. and Vit´anyi, P. An Introduction to Kolmogorov Complexity and Its Applications, Springer-Verlag, N.Y., 1997.

[5] (Ris 78) Rissanen, J. "Modeling by the Shortest Data Description," Automatica, 14:465­471, 1978.

[6] (Ris 87) Rissanen, J. "Stochastical Complexity," The Journal of the Royal Statistical Society, Series B, Methodogy, 49, 3, 1987, pp 223-239.

[7] (Sol 60) Solomonoff, R.J. "A Preliminary Report on a General Theory of Inductive Inference," Report ZBT-138, Zator Co., Cambridge, Mass, Nov 1960. http://world.std.com/~rjs/pubs.html

[8] (Sol 64a) Solomonoff, R.J. "A Formal Theory of Inductive Inference," Information and Control, Part I: Vol 7, No. 1, pp. 1­22, March 1964. http://world.std.com/~rjs/pubs.html

[9] (Sol 64b) Solomonoff, R.J. "A Formal Theory of Inductive Inference," Information and Control, Part II: Vol 7, No. 2, pp. 224­254, June 1964. http://world.std.com/~rjs/pubs.html

[10] (Sol 78) Solomonoff, R.J. "Complexity-Based Induction Systems: Comparisons and Convergence Theorems," IEEE Trans. on Information Theory, Vol IT­24, No. 4, pp. 422 -432, July 1978. http://world.std.com/~rjs/pubs.html

[11] (Sol 99) Solomonoff, R.J. "Two Kinds of Probabilistic Induction" Computer Journal, 64:256­ 259, 1999. http://world.std.com/~rjs/pubs.html

[12] (Wal 68) Wallace, C.S and Boulton, D.M. "An Information Measure for Classification," Computer Journal, 11:185­194, 1968.

[13] (Wal 87) Wallace, C.S and Freeman, P.R., "Estimation and Inference by Compact Coding", The Journal of the Royal Statistical Society, Series B, Methodogy, 49, 3, 1987, pp 240-252.

7

