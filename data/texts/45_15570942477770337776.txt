TUGboat, Volume 8 (1987), No. 1

Mixing right-to-left texts with left-to-right texts Donald E. Knuth and Pierre LlacKay

was designed to produce documents that are read from left-to-right and top-to-bottom, according to

the converltions of English and other Western languages. If such documents are turned 90". they can also

be read from top-to-bottom and right-to-left, as in Japan. Another 90" or 180" turn yields documents that

are readable from right-to-left and bottom-to-top, or from bottom-to-top and left-to-right, in case a need for

such conventions ever arises. However,

as it stands is not suitable for languages like Arabic or Hebrew,

which are right-to-left and top-to-bottom.

It would not be difficult t o use Tm for documents that are purely Arabic or purely Hebrew, by essentially

producing the mirror image of whatever document is desired. A raster-oriented printing device could easily

be programmed to reflect the bits from right to left as it puts them on the pages. (This is sometimes called

"T-shirt mode", because it can be used to niake iron-on transfers that produce readable T-shirt messages.

when English language output is transferred to cloth after being printed in mirror image.)

Complications arise, however, when left-to-right conventions are mixed with righbto-left conventions in

the same document. Consider an Arabic/English dictionary. or a Bible conlrnentary that quotes Hebrew. or

a LIiddle-Eastern encyclopedia that refers to Western names in roman letters; such documents, and many

others, must go both ways.

The purpose of this paper is to clarify the issues involved in mixed-direction document production, from

the standpoint of a Western author or reader or software implementor. We shall also consider changes to

that will extend it to a bidirectional formatting system.

1. Terminology and conventions. Let us say for convenience that an L-textis textual material that is meant to be read from left to right. and an R-textis textual material that is meant to be read from right to left.
Siniilarly we might say that English and Spanish are L-languages. while Arabic and Hebrew are R-languages.
In order to make this paper intelligible to English readers who are unfamiliar with R-languages, we shall use "reflected English", i.e.. deiIgn3, as an R-language. All texts in reflected English will be typeset in bsbnsjx3 bIo8 rr.rsboM .rs$rrqmo3 type. which is a reflected version of Computer Modern Bold Extended type. To translate from English to deiIgn3 and back again. one simply needs to reverse the order of reading. Both English and deiIgn3 are pronounced in the same way. except that deiIgrr3 should be spoken in a louder and/or deeper voice. so that a listener can distinguish it.

2. The s i m p l ~ sct ase. It's not difficult to typeset single R-language words in an L-text document. T)$ will
work fine if you never need to deal with R-texts of more than one word at a time: all you have to do is figure out a nlacro that will reverse isolated words.
Let's suppose that we want to type 'the [English1scrlpt'in order to typeset 'the deiIgn3 script' with T&jX.All we need is a font for dziIgn3. called xbmcl0.say, and the following macros:

(The xbmcl0 font can be generated like cmbxl0 with the extra METAFONT statement
extra-endchar := extra-endchar & "currentpicture:=currentpicturereflectedabout( ( . 5[1,r1 ,0), ( . 5 [l ,rl,I)) I'
acidetl to the parameter file. It has the same character widths as cmbxl0.) 3. Alternating texts. But the simple approach sketched above does not work when there are multiword Rtext phrases, i.e., e s z s ~ d qJxsk-fl b~owijlurne,mbedded in an L-text documen-because of the possibility

TUGboat, Volume 8 (1987), No. 1

of line breaks, i.e., z l s s ~ dsniI 20 yfilidizeoq s d j 20 ssrrsmd. For example, let's consider the problem of typesetting the following paragraph:*
Leonardo da Vinci made a sweeping statement i n h i s notebooks: I U L e t no one who i s not a mathematician r e a d my works.") I n f a c t , he s a i d it twice, s o he probably meant i t .

Here are samples of the proper results, considering two different column widths:

Leonardo da Vinci made a sweeping statement in his notebooks: nsi3ijsrnsdjsm s Jon zi odw sno on JsJu ATOW OW ym b s s ~In fact, he said it twice. so he probably meant it.

Leonardo da Vinci made a sweeping statement in his notebooks: JsJ" -iJsmsdJsrn s Jon ei odw srro on ".zl-~owyrn b s s ~nsi3 In fact. he said it twice. so he probably meant it.

Notice that the R-text in each line is reflected: in particular, a hyphen that has been inserted at the right of
an R-segment will appear at the left of that segment.
How can we get $)T to do this? The best approach is probably to extend the driver programs that
produce printed output from the D V I files that T@ writes. instead of trying to do tricky things with macros. Then TEX itself merely needs to put special codes into the D V I output files, in order to tell the
"DVI-Ivan drivers what to do.
For example, one idea that almost works is to put '\special(R)' just before an R-text begins, and
'\specialCL)' just after it ends. In other words, we can change the ' I ' macro in our earlier example to the
simple form

which does not actually reverse the characters: we can also leave the '\hyphenchar' of \revrm at its normal value. so that R-texts will be hyphenated. Line breaking will proceed in the normal way, and it will be the job of the D V I - I V a driver program to reflect every segment that it sees between an R and an L.
m!Reflecting might involve arbitrary combinations of characters, rules, accents, kerns, e k . ; for example,
the R-text might be in zis2ns~2o, r it might even refer to
4. An approach to implementation. In order to understand how D V I - I V a programs might do the required tasks, we need to look into the information that TRJ puts into a D V I file. The basic idea is that whenever TEX outputs an hbox or a vbox. the D V I file gets a L p u ~ hco' mmand, followed by various commands t o typeset the box contents. followed by a 'pop' command. Therefore we can try the following strategy:
a ) Whenever '\specialCR)' is found in the D V I file. remember the current horizontal position ho and vertical position vo; also remember the current location po in the D V I file. Set c +- 0. Then begin to skim the next DVI instructions instead of actually using them for typesetting; but keep updating the horizontal and vertical page positions as usual.
b) When '\specialCL)' is found in the D V I file, stop skimming instructions. Then typeset all instructions between po and the current location, in mirror-reflected mode, as explained below.
c) When 'push' occurs when skimming instructions, increase c by 1.
d ) When 'pop' occurs when skimming instructions, there are two cases. If c > 0, decrease c by 1. (This
'pop' matches a previously skimmed 'push'.) But if c = 0. effectively insert '\special(L}' at this point and '\special(R)' just after the very next 'push'.
The mirror-reflected mode for D V I commands in positions po to pl in the D V I file, beginning at (ho,vo) and ending at ( h l , v l ) , works like this: A character of width w whose box sits on the baseline between (h,v) and ( h i - w ,v) in normal mode should be placed so that its box sits on the baseline between (h' - w, v) and (h', u ) in mirror mode, where h' is defined by the equation
+Similarly, a rule of width w whose lower edge runs from (h,v ) to ( h w, v) in normal mode should run from
(h' - w, v) to (h', v) in mirror mode.
* After Leonardo lost the use of his right hand, he began to make lefthanded notes in mirror writing. Of
course, he actually wrote in nsiIsjI instead of deiIgn3.

16 TUGboat, Volume 8 (1987), No. 1

5 . Fixing- bugs. We stated above that the approach just sketched will "almost" work. But it can fail in three ways. when coinbined with the full generality of TEX First, there might be material "between the lines" that is inserted by \ v a d j u s t commands: tliis material might improperly be treated as R-text. Second. the suggested niethanisn~doesn't always find the correct left edge of segments that are being reflected. since the reflection should not always begin at the extreme left edge of a typeset line; it should begin after the \ l e f t s k i p glue and before other initial spacing due to things like accent positioning. Third. certain tricks that irlvolve '\unhbox' can make entire lines disappear from the D V I file; however, this problem is riot as serious as the other two, because people shouldn't be playing such tricks.
A m ~ i c hmore reliable and robust scheme can be obtained by building a specially extended version of TEX. which puts matching special corrimands into every line that has reflected material. It is not difficult to add this additional activity to W ' s existing line-breaking mechanism; the details appear in an appendix below. When this change has been made. parts (c) and ( d ) of the D V I - I V a skimming algorithm can be eliminat,ed, since the case c = 0 will never arise in part ( d ) .

6. L-chauvinism. We have been discussing niixetl documents as if they always consist of R-texts inserted into L-tcxts: but people who st^ native script is right-to-left liatl~rallythink of mixed documents as the irisertion of L-texts into R-texts. In fact. there are two ways to read every page of a document, one in which the eye begins to scan each line at the left arid one iri which the eye begins to scan each line at the right.
The Leo~lardoilhistratiori above is an example of the first kind. and we shall call it an L-document. To read a given line of an L-document. yo11 start at the left and read any L-text that you see. Whenever your eyes encounter ari R-character. they skin1 ahead to the end of the next R-segment (i.e.. until the next L-character. or until the end of the line. whichever comes first); then you read the R-segment right-to-left, a i d coritiiiue as before. The rules for reading an R-documttnt are similar. but with right and left reversed.
It's usually possible to distinguish an L-document from an R-document because of the indentat,ion on the first line of a paragraph andlor the blank space on the last line. For example, the R-documents that corresporltf to the two L-document settings of the paragraph about Leonardo look like this:

Leoriardo d a Vinci made a sweeping statement in his

Leonardo d a Vinci made a sweep-

n s i 3 i j s m s d i s r n s i o n ai o d w s n o o n isJ" notebooks: J s J " ing statement in his notebooks:

In fact. he said it twice, so he probably ".ad-row y m bss-r - i J s m s d i s m s Jon zi o d w 3nO o n

nieant it. In fact. he ".aA-row y m bss-r n s i 3

said it twice. so he probably meant it.

T/5-e can imagine that these R-dorun:ents were conipos~don an R-terminal and processed by sIif h q n i that looks like this:

from an

In tliis case it is the L-text. riot the R-text, that is enclosed in I 's. (The reader is urged to study this exarnplr
carefully: there is b o d j s m in't!) A poet could presumably construct interesting poems that have both L-meanings and R-meanings. wl~eri
read as L-documents and R-documents. Kotice that our exarnples from Leonardo have used boldface quotation marks (i.e.. the quotation marks
of d s i l g n 3 ) . so that these niarks belong to the text being quoted. This may seem erroneous; but it is in fact a necessary convention in docurnent,s t,hat are meant to display no favoritisni between L-readers arid R-readers. because it ensures that the yuot,ation rnarks will stay with the text being reflected. (See the examples of contemporary typesetting a t the end of tliis paper.) If we had put the quotation marks into English rather t h a n d e i I g n 3 , the R-document,s illustrated above would have looked very strange indeed:

Leonardo d a Virici made sweeping staterrielit in his n s i 3 i i s m s d j s m s i o n ai o d w s n o o n SsJnotebooks: .' " In fact, he said it twice. so he pro1mbly.aA-row y m bss-r
nieant it.

Leonardo d a Vnici made a sweepJ s J i n g statement in his notebooks: .. - i i s m s d i s r n s i o n zi o d w s n o o n " In fact. he.aA-row y m hss-r r r s i ~ said it twice. so he probablj meant it.

TUGboat, Volume 8 (1987), No. 1

17

7. Multi-level mixing. The problems of mixed R- and L-typesetting go deeper than this, because there might be an L-text inside an R-text inside an L-text. For example, we might want to typeset a paragraph whose TEX source file looks like this:

\R(Alice) s a i d , \R([ 'You t h i n k English i s \L('English w r i t t e n backwards'); but t o me, \L(English) i s English w r i t t e n backwards. I ' m s u r e \L{Knuth) and \LCMacKay) w i l l both agree with me.") And she was r i g h t .

An intelligent bidirectional reader will want this to be typeset as if it were an R-document inside an Ldocument. In other words, the eyes of such a reader will naturally scan some of the lines beginning at the left, and some of them beginning at the right. Here are examples of the desired output, set with two different line widths:

sd1A said, ai deiIgn3 dnidf rroYU ,sm 03 fud ;'English written backwards' . e b m w d ~ dnsjji-rw dziIgn3 ei English djod Iliw MacKay bns Knuth s ~ r r em'I ".sm djiw S S T ~And she was right.

s3iIA said, 'En- ai deilgn3 Anid3 rroY" English ,sm o j frrd ;glish written backwards' s w e m'I .zbuwAxd n s j j i ~ wdaiIgn3 ai djiw 9 ~ ~ d2josd IIiw MacKay bns Knuth ".sm -4nd she was right.

(Look closely.) Multi-level documents are inherently ambiguous. For example, the right-hand setting abow might be
interpreted as the result of

. . .\R{ . . . I ' m s u r e and \L{MacKay) w i l l both agree with3 Knuth \R{me."l . . .

and the left-hand setting would also result from a source file like this(!)

\indent\R{"You think English i s \L{said,) Alice \LC'Englishl; but t o me,) written backwards' \R{written backwards.) \R{\L{English) i s English) w i l l both) MacKay \RCand) Knuth \R{I'm s u r e \LCAnd she) agree with me.") was r i g h t .

except for slight differences in spacing due to W ' s "spacef a c t o r " for punctuation. In general, we have \R{\L{a)\LCb)) = ba. hence any permutation of the characters on each line is
theoretically possible. A reader has to figure out which of the different ways to parse each line makes most sense. Yet there is unanimous agreement in Middle Eastern countries that a mixture of L-document and R-document styles is preferable t o an unambiguous insistence on L-reading or R-reading throughout a document, because it is so natural and because the actual ambiguities arise rarely in practice. The quotation marks in the example above make it possible to reconstruct the invisible \R's and \L's: in this way an author can cooperate with a literate reader so that the meaning is clear.
Multi-level texts arise not only when quotes are inside quotes or when R-document footnotes or illustrations are attached to L-documents; they also arise when mathematics is embedded in R-text,. For example,
consider the m X source code

The \R{English) version of ' t h e famous i d e n t i t y $e-{i\pi)+l=O$ due t o E u l e r ' i s \RC'the famous i d e n t i t y $e-{i\pi)+l=O$ due t o E u l e r ' ) .

It should be typeset like this:
+The dziIgn3 version of 'the famous identity em 1 = 0 due to Euler' is erroms1 sdj' +''191~3o j srrb em 1= 0 yjiinsbi.
An extension of I)$called I)$-X@', described in the appendix, properly handles multi-level mixtures
including math. as well as the simpler case of alternating R-texts and L-texts.

8. Conclusions. When right-to-left and left-to-right texts are mixed in the same document, problems can

w-marise that are more subtle than simple examples might suggest. The difficulties can be overcome by extending

'I$Jt o

and by extending D V I drivers to D V I - I V a drivers. Neither of these extensions is extremely

complex.

TUGboat, Volume 8 (1987), No. 1
585. The description of DVI commarids is augmented by two new ones at the end: begzn-reflect 250. Begin a (possibly recursive) reflected segment. end-reflect 251. End a (possibly recursive) reflected segment. Commands 250-255 are undefined in normal DVI files, but 250 and 251 are permitted in the special 'DVI-IVa' files produced by this variant of 7$J.
When a DVI-IVa driver encounters a begzn-reflect command. it should skim ahead (as previously described) until finding the matching end-reflect: these will be properly nested with respect to each other and with respect to push and pop. After skimming has located a segment of material to be reflected, that segment should be re-scanned and obeyed in mirror-image mode as described earlier. The reflected segment might recursively involve begzn-reflect lend-reflect pairs that need to be reflected again.
586. Two new definitions are needed: define begin-reflect = 250 { begin a reflected segment (allowed in DVI-IVa files only) ) define end-reflect = 251 {end a reflected segment (allowed in DVI-IVa files only) )
638. .4t the beginning of ship-out, we will initialize a stack of \beginL and \beginR instructions t,hat are currently in force; this is called the LR stack, and it is maintained with the help of two global variables called LR-ptr and LR-tmp that will be defined later. The instructions inserted here (just before testing if
tracing-output > 0) say that on the outermost level we are typesetting in left-to-right mode. The opening
'begin' is replaced by: b e g i n LR-ptr + get-avail; info(LR-ptr) +- 0; { begin-L-code at outer level)
639. At the end of ship-out, we want to clear out the LR stack. Thus, 'flush-node-list(p)' is replaced by: flush-node-list(p): (Flush the LR stack 1382);
649. The hpack routine is modified to keep an LR stack as it packages a horizontal list, so that errors
of mismatched \beginL. . .\endL and \beginR. . .\endR pairs can be detected and corrected. Changes are
needed here a t the beginning of the procedure and a t the end. function hpack(p : pointer; w : scaled: m : smalhnumber): pointer:
b: znteger: { badness of the new box) LR-ptr, LR-tmp: poznter: { for LR stack maintenance ) LR-problems : znteger : { counts missing begins arid ends ) b e g i n LR-ptr + null: LR-problems +- 0: r +- get-node (box-node-szze);
common-ending: (Finish issuing a diagnostic message for an overfull or underfull hbox 663): exzt: (Check for LR anomalies at the end of hpack 1387):
hpack +- T ; end:
877. Similarly, the post-line-break should keep a n LR stack, so that it can output \endL or \endR instructions a t the ends of lines and \beginL or \beginR instructions at the beginnings of lines. Changes occur at the beginning and the end of this procedure: p r o c e d u r e post-line-break (final-widow-penalty : integer):
cur-line: halfword; { the current line number being justified) LR,-ptr, LR-tmp: pointer; (for LR stack maintenance) b e g i n LR-ptr +-- null: (Reverse the links of the relevant passive nodes, setting cur-p to the first breakpoint 878):

TUGboat, Volume 8 (1987). KO.1
p r ~ i > _ g r a f~f k i t - l m r - 1. (F111slit h L~R stack 1382): end:
-880. Tlie new actioris to be performed when broken lines are being packaged are accomplished by three
new steps added to this section of the program. ( Just,ify the line eridirig at breakpoint c u r - p . and append it to the current vertical list. together with
associated perialties and other irisertiorls 880 ) ( Insert L R riodes at tlir: begiriiiiiig of tlir currerit line 1383): ( Atljiist tlie LR stack based on LR riocles in this line 138.1): (hIotlify the end of the line to reflect t h e nature of the h r c ~ ~ankti tjo include \ r i g h t s k i p : also set the
proper 1-alue of disc-break 881 ): ( Irisrrt LR rlocic~at t,hr enti of the current liiie 1385): ( Piit t,hr \ l e f t s k i p glue at the left and detach this h i e 887);
+ +1090. M-c add ' ~ l r n o d e L R ' as a nrw sulxase after . c m o d e ex-space' here. This means t h a t the new
primitive operations will 1jec:onle irista~icrsof what The B X b o o k calls a (horizontal cornrnand).
1196. SIat 11-in-t,extwill bc formatt,ecl left-to-riglit, bec:ailse t,wonew .append' iristructioris are inserted into this stv:t,ioilof thtl cock. ( Finish rriatli in text 1196 )
begin tall-append jn e s - m a t h ( r n , c l t h - s t ~ r r o 1 ~ ~b1edf o. r e ) ) :
--( Xppericl a be@-L to tlie tail of the current list 1380):
c:ur_rr~dist p: cur-style t ted-.style: .~rrlist-penultzes-- ( m o d e > 0 ) : mlist-to-hlist:
linkjfail) lir~k(terri,p_hr.ad):
while l a n k ( t a i 1 ) # n u l l do tad t l i n k ( t a z 1 ) ;
(-Append an e n d - L to tllr tail of the current list 1381); tnil-c~ppend(71e.c~'-rna( imha t h - s u r r o u n d . clfter.)): space-factor + 1000: u n s u r , r : end
-1341. Tlie r i m - primitive operat,ions put ncw kinds of whatsit nodes into liorizontal lists. Therefore two
atidit,ional definit,iorls arr riedrd hrre:
define L R - n o d e = 1 { , s u b t g p in wliatsits that represent \ b e g i n L . etc. ) define L R _ t , y p r ( # ) rnwrn[# il ] . i n f { the sub-subtype )
1344. Here's where the nm7primitives get t:stablished.
define ~ r n m e d ' i t ~ f e - c o d=e 4 { cornrnarid nlodifier for \ i m m e d i a t e ] define beyin-L-codc = 0 { corrimarici modifier for \ b e g i n L ) define begin-R-code = 1 { corririiaiid rrioclifier for \ b e g i n R ) define end-L-code = 2 { conlnland riiodifit:r for \ e n d L ) define end-R-cotlr = 3 { con~marldriiodifier for \ e n d R )
=define be,y&LR(#j ( L R - t y p e ( # ) < e n d - L - c o d e ) =define b e g i ~ s - L R - t y p e ( # ) ( L R _ t y p e ( # )- r r ~ d - L - c o d e )
( Put each of T E X ' ~primitives int,o the hash tablrl 2 2 6 ) +r p r i i n i t i ~ l e ( " b e g i n L "L, R . h e g i n L c o d e ) : p r 7 r n i t i 7 ~( " b e g i n R H L. R . begar~-R-code): p r i r n ~ t z o e( " e n d L " . L R . e n d - L - c o d e ) : p 3 r i n ~ i t l t t ~ ( " e n d RL "R.. end-R- cod^): p,rirnzta~le( " o p e n o u t " . rstan.sion . n p r r i - r m l e ) ;

TUGboat, Volume 8 (1987), No. 1

1346. The new primitives call for a new case of cases here.
LR: case chr-code o f begin-L-code : print-esc ( " b e g i n l " ) ; begin-R-code: print-esc ("beginR"); end-L-code : print-esc ( " e n d l " ) ; othercases print-esc ("endRN) endcases:
1356. We also need to be able to display the newfangled whatsits.
LR-node: case LR-type(p) of begin-L-code: p r i n t - e x ( " beginl"); begin-R-code: print-esc("beginRn); end-L-code: print-esc (I1endL"); othercases print-esc("endRM) endcases;

1357, 1358. Copying and deleting the new nodes is easy, since they can be handled just like the \ c l o s e o u t nodes already present. We simply replace 'close-node' by 'close-node, LR-node' in these two sections.

1360. We used to do-nothing here. but now we must do-something:
{Incorporate a whatsit node into an hbox 1360) E if subtype(p) = LR-node t h e n (Adjust the LR stack for the hpack routine 1386)
This code is used in section 651.

1366. ( O u t p u t the whatsit node p in an hlist 1366) E
if subtype(p) # LR-node then out-what(p)
e l s e ( O u t p u t a reflection instruction if the direction has changed 1388)
This code is used in section 622.

1376. Most of the changes have been saved up for the end. so that the section numbers of TEX in [ 2 ] can be left unchanged. Now we come to the real guts of this extension t o mixed-direction texts.
First, we allow the new primitives in horizontal mode, but not in math mode:
+-(Cases of mazn-control that build boxes and lists 1056) +hmode LR: b e g i n new-whatszt(LR-node. small-node-szze): LR-type(taz1) +- cur-chr; e n d : +mmode LR: report-zllegal-case:

1377. A number of routines are based on a stack of one-word nodes whose info fields contain either
begin-l-code or begin-R-code. The top of the stack is pointed to by LR-ptr. and an auxiliary variable
LR-tmp is available for stack manipulation.
+-( Global variables 13)
LR-ptr, LR-tmp: pointer: {stack of LR codes and temp for manipulation)

1378. (Declare functions needed for special kinds of nodes 1378) 5

function new-LR(s : small-number): pointer: v a r p: pointer; { the new node)

begin p c get-node(smal1-node-size);

+- whatsit-node: subtype(p) +- LR-node; LR-type(p) + s ;

new-LR c p:

end;

See also section 1379.

This code is used in section 161.

1379. ( Declare functions needed for special kinds of nodes 1378) + Z f u n c t i o n safe-info(p : pointer): integer;
b e g i n if p = null then safe-info +- -1 else safe-info +-- info(p): end;

22 1380.

-(Append a hegira-L t,o the tail of the current list 1380)

tail-nppend jneur-LR(bcgin-L-coite)) This code is used in section 1196.
-1381. (Append a n end-L to the tail of t,hc, current list 1381)

tnzl-append (new-LR(end-L-code))

TUGboat, Volume 8 (1987), No. 1

This codr is used i n sectioii 1196.

1382. When the stack-niariipulatiorl niacros of this sect,ion are used brlow, varia1)les L R - p t r a n d L R - t r a p might he tlie global variables derlarrd ahow. or they might be local to hpack or post-line-break.
-define pu\h-LR(#) -begin LR-trrip g r f ol u i l , ~ n f o ( L R - i m p -L R - p t r LR-trnp

end
-define pop-LR = begin LR-tmp - LR-ptr end
( Flus11 the LR itnc k 1382)

LR-ptr -- h i k

while L R - p t r f null do pop-LR

T11ii codr is used in s ~ tclori\ &((I and 877

1383. ( I n s c ~ Lt R r i d e s a t t h r b~girllli~iogf the c u r r ~ n tliric 1383) 5
while LR-ptr # null do
begin LR-trnp t n e u t _ L R ( ~ 7 i f o ( L R _ p )f)r: lmX ( L R - t r r i p ) + l ~ n A( t e m p - h e a d ) : l ~ n k ( t r n i p - h p a d ) L R - f n ~ p .p o p - L R : end
T l u i code i i ~ l i r t l111 vxtion 8b0

1384. ( Adjust the LR stack based on LR nodes in this line 1384)

q + lir~J;(temp-11f:nd):

while y f cur-brenk:(c.ur-11) do

begin if 72s-ch,ar-ri,ode(q) then

if t y p e ( y ) = 'u;h,ut.sit-node then

if s u b t y p e ( q ) = L R - n o d e then

if b e g i n d R ( q ) then p u s h - L R ( q )

else if L R - p t r f null then

if i n f o ( L R - p t r . ) = begin-LR-t?jpe(yj then p o p - L R :

(1 + l i n , k j q ) :

end

-This codp is used in section 880.
1385. U\.t,usr tlie fact thnt q now points to tlir ilodt. wit11 \rlghtsklp g l w ( I ~ i s e r Lt R nodes a t tlir elid of thc current line 13%)

if L R - p t r f r6d/ then

begin .s +- t e m p - h e a d : r +- l i n , k ( s ) ;
while r # 11 do

begin .s + r : 'r + h k ( s ) :

end:

r + LR-ptr:
while r # null do
- - -begin L R - t m p n e l c - L R ( i / ! f o ( , r )+ en$-L-rode): link i s ) + L R - t m p : s

L R - t m p ; r.

linkjr):

end:

TUGboat, Volume 8 (1987), No. 1
link(s)+ q: end
This code is used in section 880.
1386. (Adjust the LR stack for the hpack routine 1386) .= if begin-LR(p)then ~ u s h - L R ( p ) else if safe-info(LR-ptr)= begin-LR-type(p) then pop-LR else begin incr(LR-problems):
while link ( q )# p do q +- link ( q ) :
link(q) +- link(p);free-node(p. small-node-size): p + q: end
This code is used in section 1360.
1387. (Check for LR anomalies at the end of hpack 1387) r
if LR-ptr # null then begin while link(q)# null do q + link(q):
+repeat link(q) + new-LR(info(LR-ptr) end-L-code): q t- link(q): +LR-problems + LR-problems 10000; pop-LR:
until LR-ptr = null; end;
if LR-problems > 0 then begin print-ln: print-nl( " \endL,or,\endR,problern, ( "):
p~int-int(LR-problems div 10000); print jMurnissing,,"): print-int (LR-problems mod 10000); print (",extrau): LR-problems +- 0; goto commo,n-ending: end
This code is used in section 649.
1388. (Output a reflection instruction if the direction has changed 1388) r if begin-LR(p) then
begin if safe-info (LR-ptr) # LR-type ( y ) then
begin synch-h; synch-v; dvi-out (begin-reflect): end: push-LR(p): end else if safe-info(LR-ptr)= begin-LR-type(p) then begin pop-LR;
if info(LR-ptr)+ endLcode # LR-fype ( p ) then
begin synch-h: synch-v; dvi-out (end-reflect); end: end else confusion ("LR")
This code is used in section 1366.
Final Important Note
The extensions t o T)+just described are "upward compatible" with standard TEX, in the sense that ordinary 7$J programs will still run correctly (although more slowly) on T)+-X$I'. However. T E X - r n must not be
called a new version of 'lQX'3 even though it runs all programs: the reason is, of course. that TEX will not run all T)jX-Y&T programs.
A name change is necessary to distinguish all programs that do not agree precisely with the real TEX Anybody who runs a program called 'Tm' should be able to assume that it will give identical results from all its implementations.

24 TUGboat, Volume 8 (1987), No. 1

Bibliography
111 Doriald E. Knutll. The T~Xbook.Volurnr X of Conlputers &. Typesetting (Reading, Mass.: Addison
Lt'esley. 1986).
[2] Doiiald E. Knuth. TEX: The Program, Volume B of Computers & T"vpesetting (Reading. Mass.: Addison IVesley. 1986).
[3] Pierre MacKay. "Typesetting problem scripts." Byte 1 1 . 2 (February 1986), 201-218.

Examples of Typesetting Practice 1. From Textus 5 (1966). p. 12: 4Iagnes Press. H~bleviUnibersity of Jerusalem. (Notice t h e Hebrew quotation marks surrouriding the Hcbrew title in footnote 6.)
ters adhered,lO and which may have been similar to that adopted, by normative Jewry presumably somewhat later, during the period of the Second Temple.10

Frag. E. Yadin correctly states: "Sanders' cautious indication '103 (? 104)' can now
be eliminated" (ib., p. 5).
6 Sanders' editio princeps of Ps. 151 already has been discussed by various scholars. The
present author deals with the text of Ps. 151, and its literary genre in: a q p n ayiara-
-Txinipn n7i3u;lpwh, Tarbiz 35 (1966) 214-228. 7 See: W. Wright, "Some Apocryphal Psalms in Syriac", PSBA 9 (1887) 257-266; M. Noth,
"Die fuenf apokryphen Psalmen", ZAW 48 (1930) 1-23.

2. Fragnirnts from the third edition of W7illiarnWright's classic nineteenth century grammar of Arabic. voliirrie 2. pages 295-297. (Notlce the page break in the rnidst of right-to-left text. and some left-to-right brackets.)

,.a & b e

,a,.

thht has been 6 r m q h t j b ~ t h(cvercted) f i n mankind; 391

@

&> 3 4A tyb?

t k liightness gl. the istelhct is obscured (or

eclipsed) by obeying hut. As the above examples show, this agreement

$1521 Sentence and its Parts.--Concord of Y ~ e d i c n tRe. Subject. 29'7

TUGboat, Volume 8 (1987), No. 1

25

3. From page 233 of the same book. Here right-reading texts are equated with = signs: the left sides of each equation are t o be read first.

u.$ -16*
&,..ll

10.9

(see

S

77).

3
Similarly, some grammarians consider

O,Od
l

,

B

- .,, - 0 4
- .;*?/I

0
+?/I
,

o'wr r e e 1 . l >I>*.

Here

too

the

constructions

,J bE
&I

4. From Bulletin of the Iranian hfathematical Society 8 (Tehran. 1978). p. 78L. (Left-to-right mathematics in right-to-left text .)
~rjCj,&jb,2jC&~ 4

5 . From Introduction to Mathematics [ d i j s m s f s m s JovsM] by Abraham A. Fraenkrl, vol. 1(Jerusalem, 1942). p. 38. (Page numbers are '96-90' because '90' and '96' are Hebrew numbers.)
: ;nix3 110 5 * 1 UDWn nu1 ,aP== (mod. p) :illlX3
1 . 2 * 3 . . .(p-1) E-1 (m0d.p). .ma = modulus . o m o =congruens niwnn o+nn la .1
Journal f. d n 5v 118 n 1~:x lsee ni02 hl. HAMBURGE1nRiv m m x yrp .2 m i ~ 1nw n n nx npxpn .1m2 nmn ojxa iv i l n ~ i i 5(w-QOPP) reine u. ang. Mathematik
6. Page 200 of the same book illustrates the difference between ellipses ' . . . ' in formulas and ellipses in the text. Fione of this l~ook'smath-in-text is broken between lines.

