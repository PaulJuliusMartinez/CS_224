C. J. Bashe W. Buchholz G. V. Hawkins J. J. lngram N. Rochester

The Architectureof IBM's Early Computers

Most of the early computers made byIBM for commercial productionare briefly described with an emphasis on architecture and performance. The description covers a period offifteen years,starting with the design of an experimental machine in 1W9 and extending to, but not including, the announcement in 1964 of Systeml360.

Introduction This is a technical account of IBM's principal computers during the fifteen-year period beginning in late 1949 and leading up to the announcement in 1964 of Systeml360. They wereall electronic stored-program computers. Each had a random-access memory that was reasonably large by thestandards of thetime, could doarithmeticand logic, could call subroutines, could-and did-translate from various symbolic languages to itsown machine language, and eachhad a substantial seot f input/output (I/O) equipment. This accountemphasizesarchitectureand performance, that is, the programmer's view at the level of machine language.
The paper begins with a section on machineswhich were precursors of the computer era. This is followed by descriptions of several series of related computers, each named afterits first member: 701, 702, 650, and 1401. Next is an essay on the IBM Stretch system, and the final sectionconcerns I/O techniques for all these machines.
Not all of IBM's stored-program computers of this period are included; because of space limitations, several interesting and important machines are omitted. The selection is based on a subjective judgment of which machines had technically the most impact during those fifteen years and beyond.

Table 1 illustrates the chronology of the machines discussed in this paper. The memberosf a family or series of machines appear vertically in a column; the later entries are more or less upward compatible with earlier ones. (There is nofamily relationship, however, among thme achines in the column labeled "Others.") All machines up to 1957 used vacuum-tube electronics; from 1958 on, all of IBM's computers were built with transistors. Every machine listed is discussed orreferred to in the text.

Except for a discussion of IBM's precursor machines,

no attempt is made here to acknowledge adequately the

manypioneering projectsand individuals in IBMand

elsewhere which made these developmentspossible. The

701 clearly owed much to themachine at the Institute for

AdvancedStudies, to priorworkatthe University of

Pennsylvania,andto Whirlwind at MIT;the 702 was

largely stimulated by the Eckert-Mauchly UNIVAC; and

the 650 had early roots in work at Engineering Research

Associates. Cathode-ray tube (CRT) memory, as usedin

the 701 and 702, and index registers are well known to

have originated attheUniversity of Manchester.The

names of J. P. Eckert and J. W. Mauchly, of J. von Neu-

mann, who was a consultant on the701, and of F. C. Wil-

liamsreadily cometo mind. To give sufficient credit

beyondtheobvious,however,

would go outsidethe

scope of this paper.

Copyright 1981 by International Business Machines Corporation. Copying is permitted without payment of royalty provided that (1) each reproduction is done without alteration and (2) the Journal reference and IBM copyright notice are included on the first page. The title and abstract may be used without further permission in computer-based and other information-service systems. Permission
to republish other excerpts should be obtained from the Editor.

363

IBM J. RES, DEVELOP. 0 VOL. 25 0 NO. 5 0 SEPTEMBER 1981

C. J. BASHE ET AL.

Table 1 Chronology of principal IBM computers before Systed360.

701 Series

702 Series

650 Series

1401 Series

Others

Date

70: 111 I

I 9 3 157 announced VACUUM TUBES

Precursors

The decade of the 1950s was a significant one in the his-

sity in 1944 and became known as the Harvard Mark I,

tory of IBM computers. All of the electronic stored-pro-

was based on electromechanical devices for both calcu-

gram computers designed for regular production were an- lation andsequence control. The 604 electronic cal-

nounced and first delivered after 1950. All earlier devices

culating punch, which IBM started shipping in 1948, used

that weremorethanelectromechanicalaccounting ma-

electronic countersfor calculationand was controlled

chines were either one-of-a-kind machines or combina-

by a plugboard program of up to60 three-address instruc-

tions of electromechanical and electronicalculating

tions.

units, which did not incorporatean electronicform of

stored program [11.

A major step was the dedication, also in 1948, of the

SelectiveSequenceElectronic

Calculator (SSECa)t

There were, tobe sure, earlier examples of the greater

IBM's headquarters in New York City. It had a hierar-

logical power obtained from large numbers of calculating

chical memory system consisting of 20 OOO words of pa-

elements operating underelaboratesequencecontrols

per-tape storage, 150 words of relay memory, and eight

and of the increased speedresulting from substitution of

words of electronic memory, each word consisting of 19

electroniccircuits for electromechanicarlelayasnd

digits and a sign. Its electronic arithmetic unit could add,

counters. The IBM Automatic Sequence Controlled Cal-

subtract, divide,andmultiply, the latter in 20 ms. The

364

culator, which was presentedby IBM to HarvarUd niver-

paper-tape storageconsisted of 66 readers, eachholding a

C. J. BASHE ET AL.

1BM J. RES. DEVELOP. VOL. 25 NO. 5 0 SEPTEMBER 1981

I

loop of tape as wide and thick as an IBM card. These tapes could hold tables, data to be operated on, or sequences of 78-bit instructions. The SSECwas the first operating computer capable of treating its own stored instructions exactly like data, modifying them, and acting on the result.
In 1949 IBM introduced the Card Programmed Calculator (CPC),the concept fowr hich originated at Northrop Aircraft. The CPC had a 604 as its arithmetic unit, a card reader to read the program from punched cards, a 480digit electromechanical memory, a card punch, and a tabulating machine to print the output. Itrequired a sorter, a collator, and a cart to move decks of cards around. This machine provided the means to do computing on a hitherto impractical scale, enabled users to develop computing methods and expertise, and increased the awareness of and interest in the potential of fully electronic, stored-program computers, which were just coming into existence.
The final precursor,theTest Assembly,was such a computer. This experimental unit was built in the IBM Poughkeepsie laboratory starting in 1949. It used a 604 as its electronicarithmetic unit, asecond machine frame with 604-type circuits as logical elements to exercise control, a 250-word CRT memory that was a prototype of the 701 and 702 memories, a magnetic drum memory to store both data and instructions, and a card reader-punch for 110. By solving a differential equation in1950, the Test Assembly demonstrated that these components could be used to build a full-fledged, stored-program computer.
The 701 series The 701 was the first large-scale electronic computer that IBM put into production. To make the machine quicker and easier to design, implement, and maintain, the architecture was kept simple and spartan. Many desirable features, such as floating-point arithmetic,were left to be done by programming. One quarter of the central processing unit (CPU) remained empty to give flexibility for correcting errors or adding function. Thseuccessor of the 701, the 704, provided the added functionand filled up the space. Thenthere followed a successionof larger andfaster, upward-compatiblemachines with new featuresas theywereinvented, culminating in the 7094 I1 and its smaller, simplified offshoots, the 7040 and 7044.
The 701 The 701 was aparallel, binary, single-address, stored-program computer with a CRT memory of 2048 (later 4096) words of 36 bits [2-51. It had 33 18-bit instructions with which to perform arithmetic and logic operations, sense and control its environment, and direct, word by word, the flow of information to and from

0 two pairs of 1250-word-per-second magnetic-tape drives, adapted from designs developed for the TPM (702) project, four 2048-word magnetic drums, adapted from earlydesigns for the 650 computer, a 150-line-per-minute printer,
0 a 150-card-per-minute card reader, and a 100-card-per-minute card punch.
Instructions could address 18-bithalf words or 36-bit full words. The instruction set was simple but carefully polished for efficiency and consistency. A 36-bit binary addition took five 12-ps cycles, while multiply and divide instructions each took 38 cycles.
The 701 was made binary, instead of decimal, because fast binaryarithmeticwas simpler and thereforeless costly, yet it did not mean giving up the advantages of decimal and alphabetic input and output. Conversion between external decimal andinternal binary representations and between punched-card andmagnetic-tape codes could readily be handled by programming in a binary machine and did not require special translation circuits.The choice of binary arithmetic with its superior characteristics right at the start also set an important precedent: It might have been very difficult to introduce a binary machine later on if all of IBM's early computers had been decimal.
The 704 In the 704, magnetic-core memory with from 4096 to 32768 words replaced theCRT memory of the 701, thereby eliminating the most difficult maintenance problem and providing users with a more efficient way to run large programs.Intheearly 1950s, therewas a widely held belief among theoriststhat 1000words or so of memory should suffice. However, practical programmers seemed to need more than that. Also, the cost of providing larger memories kept going down as engineering and production methods advanced.
To accommodate the largeraddress space andother requirements, theinstructionlength was expanded to 36 bits. The instructions were similar in function to the 701 instructions but were incompatible, and their number was increased to 91. Floating-point arithmetic was provided. Three index registers were added for automatic address modification and for programming iterationloops. The combination of built-in floating point andindexing greatly improved performance.
An instruction for enteringa subroutine put its location in an indexregister before branching. The subroutine could use indexedinstructions to access parameters in

365

IBM I. RESD. EVELOP. VOL. 25 NO. 5 SEPTEMBER 1981

C. I. BASHE ET AL.

the main routine and an indexed branch to return. This hardware implementation of a programming technique invented at the University of Cambridge made subroutines much more efficient and has become widely used. Many other instructions, too detailed to name here, contributed to the overall efficiency.

A CRT display was available, primarily as a graphic output device.

The 709 and 7090 The 709 was basically a 704 with several additional architectural functions [6]. The most important of these were its data-synchronizer units (now called channels), which relieved the CPU of the need to control the transmission of individual words between memory and I/O units.

The 7090 was a transistorized version of the 709 with some added facilities. Like the change from CRT to magnetic-corememory, the change from vacuum tubesto transistors was oneof technology and notof architecture. However, the effect of these two changes was so profound that it must be mentioned in the context of architecture. The 7090 was not justless costly to maintain and more reliable than the 701; it was so much better that it was a qualitatively different kind of machine.

The set of more than 180 instructions of the 709 and 7090 provided various other improvements. Among these were three convert instructions, which speeded up the translation from one number base to another and other kinds of access to tables of information.

The 7094 In the 7094 the multiply and divide circuitswere reworked to increase the speed of fixed- and floating-point operations and to provide a full set of double-precision floating-point arithmeticinstructions. New instructions were added, bringing the total to274.

The performance of the 701 series culminated in the

7094 11, which had a shorter cycle time, fewer cycles to

multiply anddivide,andmemory

interleaving. Fixed-

point multiplication was 108 times faster than in the 701,

and the speed on a problem using double-precision float-

ing point had increased by a much larger factor.

The 7040 and 7044 These machines provided a less costly alternative to the 7090 and 7094 for users whose requirementscould be met by a simpler machine. They had a basic subset of 49 instructions as well as six sets of optional instructions that could bring the total up to 120 as compared to 180 on the 7090 and 274 on the 7094. The machines differed only in

speed, with an 8-ps cycle on the 7040 and a 2.5-ps cycle on the7044. A few7040/7044 instructions were notpart of the 7094 instruction set;thus, writing compatibleprograms required avoiding these improvements.

A novel combination, the Direct-Coupled System (DCS), was anearlyasymmetrical multiprocessing system that was very successful. It used a 7040 or 7044 as a front-end unit to handle I/O and to schedule jobs, and a 7090 or 7094 to do the computing. Combinations similar to DCS are still in common use with Systed37O computers.

Special system for CTSS A particularly significant modified 7090, and later 7094, made it possibleto create thefirst major time-sharing system: the Compatible Time-sharing System (CTSS) at M.I.T. Asecond 32 768-word memory bankwasprovided. User programs occupied one bank while the operating system resided in the other. The user memory was divided into 128memory-protected, 256-word blocks, and a user could not refer to a block outside of his allocation. The contents of a 7-bit relocation register were added to the most significant bits of each address,so that each user programmed as if his allocation started at address zero. There was an interrupt clock that enabled the system to control and record the time allocated to each user.

The 702 series The 702 project started in late 1949, when design was begun in the IBM Poughkeepsie Laboratory on an engineering model,then called theTape Processing Machine (TPM). Work was slowed considerably in1951, when much of the TPM engineering staff was assigned to the higher-priority "DefenseCalculator" (701) project because of the KoreanWar. The TPM model became operational in 1952;it was revised and announced as the 702 in 1953. Thus, the 702 project started earlier than the701 but finished later.

The TPM and 702 As its name implied, the Tape Processing Machine was intended to provide a data processingsystem with the speed and functional advantages of a new storage medium, magnetic tape, replacing punched cards. Its decimal arithmetic and logical unit, CRT memory, and magnetic-tape units are described in detail in a patent filed in 1954 and issued in 1966 [7].

The TPMwasubstantially

redesigned to achieve

greater performance and reliability, its instructionset was

revised while retaining much of the basic architecture,

and it became the702 [8, 91. Serial-by-bit, serial-by-char-

acter operation was changed to parallel-by-bit, serial-by-

IBM J. RESD. EVELOP. VOL. 25 NO. 5 SEPTEMBER 1961

character operation, which turned out to provide higher performanceat lower cost.The single-addressinstructions operated on one operand in CRT memory and another operand in a second CRT storage device called an accumulator. Instruction execution times of the 702 varied greatlydepending on the number of characters involved. Numbers of five decimal digits could be added in 0.25 ms,whereas multiplying ten by ten digits took 3.36 ms.
Several significant innovationsespeciallyuseful for businessdata processing were introducedby the TPM and 702. These are now briefly discussed.
Variable field and record length In contrast to the 36bit word orientation of the machines thatformed the 701 series, the architectureof the 702 series was oriented towards alphanumeric characters. A character was encoded as six bits and an even-parity check bit that was used to detect data errorsgoing to andfrom memoryand on tape. An instructioncoulddirectly addressanycharacter in memory and process a field of arbitrary length; both the memory operand and theoperand in anaccumulator could be up to 511 characters long. Likewise, records on magnetic tape could be of arbitrary length. One disadvantage was that fields and records were delimited by codes within the data, which imposed restrictions on the characterset. Thisdata-markingtechnique was subsequently replaced,in Stretch andin System/360, by having the program specify lengths explicitly.
Collatingsequence Sorting and merging of files of alphanumericdata require anappropriate "collatingsequence," which governs thelow-to-high sequencing of alphabetic, numeric, and other characters. A compare instruction was designed to provide a particular collating sequence which was already well established for punched-card collators, so that existing file sequences could be maintained when converting frompunched cards to magnetic tape.
Editinginstructions Ease of data editing was a major criterion for selecting the 702 instruction set in general and variable field lengthinparticular. One special instruction insertedcommas and periodsand suppressed leading zeros in numeric fields; another instruction facilitated the insertion of floating dollar signs and check-protection asterisks. Although the card reading,punching, and printing units were derived from standard punchedcardequipment on which editing was controlled by plugboard wiring, their plugboard facilities were omitted on the 702 devices. All editing was to be done by programming so as to minimize operator intervention.
Competent I10 Mosetarlynon-IBM computers had only primitive I/O equipment, such aspaper-tape readers

andpunches, or magnetic-tapedevices connectedto keyboardsandtypewriters.It wasconsideredessential for businessapplications to providemore power andflexibility: high-speedmagnetictape for file storage,card readers for efficient data entry, card punches for producing machine-readable output documents,and high-quality line printers at least equalto the best in use in punchedcard installations. The variety of I/O needed for different applicationsrequired flexibility in attaching the I/O devices; this aspect is discussed in a later section.
It soon became evident that CPU speed was more important in a data-processing environment than had been thoughtat first. The"housekeeping" required to keep just the I/Orunning at full speed consumed a great deal of CPU time. Improved handling of large tape files was also a concern, because much machine time was being spent on sorting, merging, and searching of files. The need for more speed and the desire to replace the CRT memory and accumulator storagewith faster andmorereliable magnetic cores prompted an early development of a 702 successor. At thesametime, considerable effort was spent on developing an auxiliary tape sorting and collating machine, tentativelycalled the 703, which was intended to relieve the main computer of much of its tapehandling burden.
The 705 models The first 702 successor was the 705, announced in 1954, which provided the following significant improvements:
0 The memory size was increasedfrom 10 OOO characters to 20 000 (705 I) and later to 40 0o0 (705 11). The 702 addressing scheme had to bemodified to accommodate the larger memory. All the variable-field-length instructions with addressing of individual characters were retained, but instruction fetchingand datamoving within memory bymeans of some new instructions weredone five characters ata time.
0 Tape reading could be overlapped with tape writing.
The redesignand the nonvolatile core memory provided substantialperformance improvements.Addition of five digits took 119 ps, and ten-by-ten multiplication used 2.41 ms. The 705 also proved to bseufficiently better than the702 at handling tape that theplan to announce the specialized 703 tape sorter-collator was dropped.
Although the 705 instruction set was largely the same as that of the 702, it was different enough that 702 programs could notbe run on the705. With the successors to the first 705 model, however, compatibility becamean important consideration because of the inconvenience to

367

IBM J. RESD. EVELOP. VOL. 25 NO. 5 SEPTEMBER 1981

C. J. BASHE ET AL.

users of having to convert existingprograms. Even minor differences, such as new functions which only made use of previously unassigned bits of aninstruction,were found to cause problems,and a "compatibility mode" wasneeded to be able to run programs that hadused these bits for their own purposes. The conversion problem was more significant than it would be today, because high-level languages were still in their infancy, and most programming was done at or close to the machine-language level.
The 705111, announced in 1957, provided up to 80 OOO characters of core memory, indirect addressing, and one or more "data-synchronizer'' units to permit overlap of tape readingand writing with computing, using main memory as the buffer. It added five digits in 86.5 ps and did ten-by-ten multiplication in 1.62 ms. Several instructions were added to do bit handling, to simplify address computations, and to blank a memory area. The 705 I11 was capable of running 705 I and 705I1 programs with only minor exceptions.
The 7080 The 7080 was a transistorized version of the 705 111. It provided up to160 OOO characters of memory, a set of I/O channels to replace multiple data-synchronizer units, a single-level interrupt facility to handle I/O, and compatibility modes to run 705 1-11 or 705 I11 programs. It could perform a five-digit addition in 11 ps and a ten-by-ten multiplication in 265 ps.
The 650 series
The 650 In 1948, when the engineers from theIBM Endicott laboratory who designed the SSEC had completed that project, they turned their attentionto thedesign of a new and much smaller computerthat would be suitable for volume production. From the outset, the emphasis was on reliability andmoderate cost, which led to thechoice of a magnetic drum as the central storage medium and to a high degree of checking throughout. The result was the 650, which was announced in July 1953 [10, 111.
The 650 wasaserial,decimal,stored-programcomputer. A word, which had a fixed length of ten decimal digits and a sign, couldcontainoneinstruction or one decimal number. Decimal digits were represented internally in a seven-bit (biquinary) self-checking code, and on the drum in a five-bit (2-out-of-5) self-checking code.
The magnetic drum, which had a capacity of2000 words, rotated at thuenusually high speed of 12 500 rpm. The drumalso served as anI/O buffer for the card reader

and punch, theonly I/O units provided initially. The high speed of the drum kept the maximum time of access to instructions or data to 4m.8s. To allow still further reduction of the effective access time, a two-address instruction format was chosen, one addresfsor the operand and the other for thneext instruction to be executed. With the aid of the Symbolic Optimal Assembly Program (SOAP) developed for the 650, a program could be optimized so that the dataor the next instruction would be close to the read-write heads at just thetime they were needed, thus avoiding a long wait of up to one whole revolution for each. Such optimum programming could bring the time for an add instruction from an average of 5.2 ms down towards the minimum of 0.8 ms.
The basic 650 with its card equipment was very successful. Later it was expanded with alphabetic capability, using two digits to represent onealphanumeric character, and with on-line printing and magnetic tape. Also, a 600digit core storage was added as a high-speed I/O buffer.
The most important addition was a magnetic disk unit, the high-capacity storage device that had been developed at the IBM San Jose laboratory as an integral part of a smaller machine, the 305 RAMAC [12]. The 650, whose version of the disk unit had a storage capacity of six million digits, thus led the way in attaching disks to generalpurpose computer systems. The 650 also acquired terminals, primarily for inquiry and response applications. This combination of magnetic disks and terminals was important as it constituted the beginning of a major shift from tapeto disk for secondary storage and from batchto transaction-oriented processing.
With the addition of these I/Ocapabilities, the 650 was no longer solely a card-processingsystembuthadbecome an intermediate data-processing system with considerable flexibility.
The 7070 The successor to th6e50 was the 7070, which was a transistorized machine with up to9990 ten-digit words of core memory [13, 141. Because of the random-access core memory, the two-address instruction format of the 650 was no longer needed and was replaced by a single-address format.Decimal digits were represented in a five-bit (2-out-of-5) code throughout. To make these basic changespossible, the 7070 was not constrained tobe compatible with the 650.
By omitting the second address in an instruction, space wasfreed upfortwo additionalfunctions. Two digits were used in indexing to select one of 99 index words located at the low end of memory. Two more digits con-

stituted the field definition, which allowed a portion of a ten-digit word to be processed by a single instruction.
The 7070 transferred words in parallel between memory and the CPU, but it processed them serially, digit by digit. Addition of two ten-digit numbers required 72 ps, multiplication 924 ps. Floating-point decimal arithmetic was also available.
To permit overlap of CPU processing with multiple inputand output operations, the 7070 had an I/O interruption capability called priority processing. It allowed a main program to be interrupted when an I/O device required service, which was provided by switching to a "priority routine" that was not interruptible. Priority processing was used to perform peripheral operations, such as card-to-tape and tape-to-printerconversion, on the main computer instead of an auxiliary system. The term SPOOLing (Simultaneous Peripheral Operation On Line) was coined for this function, which represented an early form of multiprogramming.
A block-transmission facility provided for movement of blocks of data, both within memory and betweenmemory and I/O, in a single operation. The blocks, which did not havetobe in contiguous memory locations,weredescribed by a chain of record-definition words.
The7074 and 7072 The 7074 was a faster version of the 7070, with storage increased up to 30000 words [IS]. It had the same instruction set except that, when using the additional storage, the 7074 had to be switched to a different addressing mode. Parallel arithmetic allowed the 7074 toadd tendigit numbers in 10ps and multiply them in 56ps, considerably faster than the 7070. The 7072 was a lower-cost, tape-only version of the 7074 oriented towards numerical applications.
The 1401 series The upward growth of the 650 series and the rapid progress in semiconductor technology during the mid-1950s left a void at the low end, which was filled by the 1401 series. The 1401 was initially intended as a stand-alone stored-program computer toprovide faster card reading, cardpunching, and printing equipmentthan did earlier electromechanicaplunched-card machines. Its chain printer, which combined a high speed of600 linesper minute with high print quality, was a technological breakthrough. This printer, with some modifications, is still a mainstay of the IBM product line. Since the high-speed reading, punching, and printing devices of the 1401 were also valuableto users of the larger7000-series computers, it was decided to provide a magnetic-tape version as an

auxiliary system for off-line card-to-tape,tape-to-card, and tape-to-printer operations. Both versions of the 1401, which wereannounced at thesametime,became eminently successful.

The 1401 The architecture of the 1401 was character-oriented and resembled that of the 702 in several respects, but there were important differences. The 1401 used two-address, memory-to-memory instructions; data flow was serial-bycharacter, with memory cycles alternatingbetweenthe two operands. Both data and instructions were variable in length. Characters were represented by eight bits: six for data, one for odd-parity checking, and one for a "word mark"used to define the high-order position of each word. Data movement and manipulation were checked on all operations: thus numeric data were converted to a selfchecking biquinary code before any arithmetic operation.

The 1401 had 34 different operation codes. An additional character could modify many of these operations, so that the total number was effectively much larger than 34. Operation codes were one characterin length and addressesthree; a typical two-addressinstructionwas seven characters long. Not all instructions had two addresses: Some had no addresses and others one, so there were also one- and four-character instructions. Similarly, instructions with a modifier character could be two, five, or eight characters in length. "Chaining" of instructions was an interesting capability: Where consecutive instructions were used to add or move words located sequentially in storage, the first instruction with the usual two addresses could be followed by instructions consisting of only the operation codes.

Editing of numeric fields for printing was accomplished in a manner similar to the editing facility of the 702, but additional function and flexibility allowed each field to be edited completely with only one instruction.

The word mark, probably the most distinctive archi-

tectural feature of the 1401, inconjunction with the mem-

ory-to-memory logic, minimized the electronic circuitry

requirements. Only twosingle-character data registers

and three memory-addressregisterswereused in the

basic machine. Variable word length for both data and

instructionsreducedstoragerequirementsvery

signifi-

cantly.

Core memory was initially offered in capacities of 1400 (shown by studies tobeadequate forcard-accounting jobs) to 4000 characters. For more complex applications, the memory capacity was later increased to 16 000 characters. Addressing of 16 000characters with a three-char-

369

IBM J. RES. DEVELOP. VOL. 25 NO. 5 SEPTEMBER 1981

C. J. BASHE ET AL.

acter address was accomplished by binary encoding of previously unused bits of the characters. Two other available address bits were used for indexing; that is, they could select one of three storage locations set aside as index registers.
The memory cycle time was 11.5 ps. Addition of fivedigitfieldstook 230 ps, and multiplying two ten-digit fields required 6.9 ms.

Up to 80 OOO characters of memory were provided. Zone bits were used to select one of15 index registers. Two address registers were addedto speed up arithmetic operations. The instruction set was enhanced considerably by expanding some instructions and adding other functions, such as table look-up. An optional UO interruption feature, similar to that of the 7070, was available. The 1410 could run 1401programs by switching to a 1401 compatibility mode.

The 1401tape system was widelyused, both as an aux-

At the top of the 1401 series was the 7010; it was fully

iliary system for the larger computers and as an indepen- compatible with the 1410. It had a memory of up to

dent tape processor. Several special features were added

100 000characters, a 2.4-ps memory cycle, and two-char-

to handle tapes for these different computers, thus bring- acter access to storage.

ing into focus the inconsistencies among them.Operation

with even- and odd-parity tape was required. A column- Stretch

binary feature allowed binary cards to be read or

The Stretch system, formally known as the 7030, played a

punched, and converted to or from tapes, for use on the

special role in the evolution of IBM's computers [16]. It is

704/9 and 7090/4 machines. Similarly, special provisions best known as a "super-computer" developed for the Los

were made to handle 7070 tapes. On the 1401 itself, the

Alamos Laboratory of the U.S. Atomic Energy Commis-

unique eighth word-markbit could notbe written directly sion. A "Harvest" extension (the 7951) was designedfor

on the seven-track tape that was commonto all these ma-

the National Security Agency [171. Unlike IBM's earlier

chines, so this bitwas translated to a word-separator

super-computer, the one-of-a-kind NORC (Naval Ord-

character, which created another special tape format.

nance Research Computer) [18], the Stretch system went

into production, though in limited numbers. Moresignifi-

As applications for the 1401 expanded, numerous de- cant, however, was that much of the transistor, magnetic-

vices and optional features were added. Attachment of

core, circuit, andpackagingtechnology of the Stretch

magnetic disk provided the third major 1401 version, the

project was carried forward to other 7000-series and1401-

disk system, which was as well received as the card and

series computers, andmany of the architecture in-

tape systems. Processing could be overlapped with I/O,

novations were later applied to Systend360.

which gave significant performance improvement. Paper

tapes, magneticand optical character readers, and nu-

In late 1954, a project was started at the IBM Pough-

merous other I/O media were attached via a serial input/ keepsie laboratory to develop a new, all-transistor com-

output adapter, which also allowed channel-to-channel puter, which was to benefit from the experience gained

communication with other computers.

with the 701,702, and 650 series that were marketed to all

customers and with the SAGE real-timecontrol computer

The 1440 and 1460

[19,201 that was marketed to the military. Subsequently

The 1440 was a smaller, and the 1460 a larger, successor

it was decided to setthe very ambitious goalof one hun-

machine with the same architecture as the 1401 and with

dred times the overall performance of the 704. The need

the same memory capacity of up to 16000 characters.

for such performance was clear, as was the fact that the

The 1440 and 1460 used newer circuits and had much of

technology available at the time was not adequate. New

their electronics incommon. The 1440 had an 11.1-ps transistors, circuits, magnetic cores, and designand man-

memory cycle, giving it approximately the same internal

ufacturing techniques wouldrequire the utmost technical

speed as the 1401, but simpler and slower 110. The 1460 effort, hence the name Project Stretch.

with a 6-ps memory cycle had almost twicethe process-

ing speed, and up to three 1100-line-per-minuteprinters

The technologywhichwasdevelopedespecially for

could be attached.

Stretch included drift-transistor circuits with a 2041s

delay time, multiple 128K-byte memoryunits (where K =

The 1410 and 7010

1024) with a 2.1-ps cycle time, and high-speed magnetic

The 1410 was a considerably larger and more powerful disks. This was combined with new organizational tech-

machine thanthe 1401. The memory cycle warseduced to

niques, such as instruction look-ahead and memoryinter-

4.5 ps (4.0 ps optionally). The architecture was based on

leaving. Error correction was used in memoryand on the

that of the 1401, but addresses were expanded to five

disks, and errors were checked extensively throughout

370

characters to allow the memory capacity to be increased.

the system.

C. J. BASHEET AL.

IBM J. RES. DEVELOP. VOL. 25 NO. 5 SEPTEMBER 1981

Project Stretch introduced a number ofnew or substantially enhanced functions into computer architecture, andit brought new terms, such as "byte," "I/O interface," and the word "architecture" itself into the language of computers.
Addressing The architecture took advantage of binary addressing to provide storage subdivisions (words, bytes, and bits) of lengths that are powers of two. This choice greatly facilitated the design of variable field length, indexing, address arithmetic, and instruction formats. Addresses were up to 24 bits in length and permitted direct addressing of 262 144or 2'' words of 64bits (2048K bytes) in storage, and of any bit within those words.
Storage protection Protection against incorrect storage accesses by the program was provided by a pair of address-boundary registers.
Binary and decimal arithmetic Both binary and decimal arithmetic were included: binaryarithmetic for speed and for address computation, and decimal for efficient data handling.
Variable field length Fixed-point arithmetic, comparison, and logical operations were provided for fields from 1 to 64 bits in length. They facilitated operations on decimalnumbers, character strings, logicalbit strings, single-bit indicators, and parts of instruction formats of various lengths, including binary addresses.
Variable byte size To operate on subdivisions (bytes) within a field, suchas 4-bit decimal digits and 6-boitr 8-bit alphanumeric characters, variable-field-length instructions could specify a byte size of from 1 to 8 bits. For other than variable-length fields,the byte size was fixeadt 8, a power of 2. The 8-bit byte also permitted a larger character set that included upper and lower case.
Floating-pointarithmetic Much care was taken in the specification of the binary floating-poinatrithmeticto provide a complete, consistent, and easily programmed instruction set. Particular attention was paid to the control of precision loss and round-offerrors, and to instructions which simplified the programming of multiple-precision arithmetic.
Zndexing Each of the 16 index registers contained an index word of 64 bits, which provided not onlythe index value but also a loop count and a chain field.The combination could be used, among other things, to specify a chain of memory areas. I/O operations employed the same format for their control words. Consequently the same index or control word couldbe used to control reading of input data, then to index through the data during processing, and finally to control writing of the modified data to an output device.

Interrupts A single interrupt schemeprovided a systematic method for responding to asynchronous I/O requests, time signals, and machine errors, as well as to synchronous program exceptions. The interruption conditions and other conditions which couldnot cause interruptions were all collected in one 64-bit indicraetgoirster. These bits could either be interrogated by a conditional branch instruction or, under the control of mask bits in a second register, cause execution of an instruction in an interrupt table. That instruction might be a branch to an interrupt handler or simply a one-instruction fix-up.
Clocks An intervaltimerprovided an interrupt condition whena time interval had elapsed. A separate, continuously running clockpermitted the programming of timeof-day indications.
Inputloutput Up to 32 I/O devices couldbe operated simultaneouslythrough the "exchange," a unit which corresponded to a 32-way byte-multiplexerchannelin later terminology. Hardware to control data transfer was shared among manyI/O devices. The exchange was completely device-independent, as were the controlling I/O instructions.
Consoles The operator console was connected via a channel and treated as an I/O device. Switches and lights
were just so many bits of input and output, the meanings
of which were determined entirely by the program. More than one console could be attached.
Multiprogramming Several of these architectural facilities-storage protection, interrupts, clocks, and programinterpreted multiple consoles-were intended specifically to make it possible and practical to use a large computer not only on single large problems, but also on multiple smaller programs simultaneously.
From the beginning the intent was to develop a very general architecture that would be well-suited to many different types of applications. It hadbeenplanned to make the high-speed,fixed-length arithmetic unit separable from the Variable-length processingunit, so that the latter could subsequently be marketed as a lower-performance commercial product using the same instruction set. Indeed, some aspects of the architecture, such as variable fieldlength, were primarily aimedat manipulation of alphanumeric data, since numericcomputinghad less need for them. Thus, it was thought that a single line of compatible machines, tentatively called the 7000 Series, would replace IBM's various earlier incompatible computers. This part of the architectural plan was nortealized because of subsequent engineering and marketing decisions. Such a single lineof architecturally compatiblemachines did not make its appearance until Systed360 arrived.

371

IBM J. RES. DEVELOP. VOL. 25 NO. 5 SEPTEMBER 1981

C. J. BASHE ET AL.

For typical 704 programs, Stretch fell short of its per-

the single card reader. PREPARE TO WRITE (WRITE) fol-

formance target of one hundred times the704, perhaps by

lowed similar rules with some rather obvious differences.

a factor of two. In applications requiring the larger stor-

COPY AND SKIP (COPY) was the instruction which caused

age capacity andword length of Stretch, theperformance

each word of inputor outputdatatobe transmitted

factor probably exceeded one hundred, but comparisons

between the multiplier-quotient (MQ) register of the CPU

are difficult because suchproblems were not oftetnackled

and the location in memory specified by the address part

on the 704.

of the instruction. In general, the program had to have a

COPY instruction waiting to be executedwheneverthe

It was decided to limit production to the Los Alamos

input or output device, depending on its timing, required

machine (delivered in1961), the Harvest system (deliv-

access toa memory location as a destination or source for

ered in 1962),and seven more systems that wereon order a word of data.

at the time. Development of additional compatible versions was discontinued. Instead, the 7000 Series came to include various machines other than Stretch (7030);these used its architectural ideaasnd high-speed technology but not the plan for a line of machines with compatible architecture.

Depending on the input device (and these same comments apply to output), varying amounts of time between successive COPY instructions were available to the CPU for computing. A COPY instruction, encountered after the last word of the recordhadbeen placed in memory, would cause anend-of-recordskip of thenext two in-

Early inputloutput architecture The primary challenges of I/O architecture in IBM's early computers were quite similar to those which have faced system designers and architects up to the present day. These are

structions. This skip permitted the program to initiate an instructionsequence appropriatetothe end-of-record condition. Similarly, an end-of-file skip of just a single instruction permitted branching to an end-of-file sequence. Itcanbe seenthat the necessarysynchronization between operation of the CPU and of the I/O system de-

To provide for efficient data flow between a very highspeed, precisely clockedprocessor/memorycomplex

pended to a great extentupon the proper useof the COPY instruction.

and a number of larger-capacity but (usually) slower and (usually) less precisely clocked YO devices. 0 To provide the necessary control for those devices,allowing for a wide variety of individual characteristics such as s t d s t o p times, data formats, and media-handling requirements. To achieve these data and control functions with, as nearly as possible, a common set of computer instructions for all I/O devices. To synchronize these operations with the internal pro-

The cardreader operatedin row-by-row fashion, but on only 72 of the 80 columns, so that a card row could be treated as two36-bit words. The buffering between a card and memory consisted of 72 vacuum-tube flip-flops and the MQ register, all in the CPU, which was a highly CPUintegrated I/O attachment scheme. The card punch and the printer (which electrically resembled a card punch) were attached, and output data supplied to them, in a very similar manner.

cesses of the computer in a manner which is acceptably economical in its use of both hardware and programming.

The magnetic drums provided data at a rate of one word every 1.28 ms after an initial access time of several milliseconds. Thirty-six tracks were involved simultane-

The 701: Minimizing hardware The arrangements in the 701 for handling I/O data were rather spartan, and the stored program in the CPU was involved in the transfer of every word (36 bits in this case) between CRT memory and an input or outputdevice. Several instruction types in the 701 repertoire were provided specifically for I/O operations, and three of these will be described.

ously in the transfer of a word. The sequential data rateof the drums could have been much higher; only one word out of every 128 was read or written.Thisdeliberate slow-down gave the CPU timeto perform the calculations needed to deal with the data, including generating subsequent COPY addresses. It also provided time for the regeneration cycles required by the CRT memory of the CPU. One of the most interestingaspects of the drum unit of the 701 is that it was included at all. This was an early,

The instruction PREPARE TO READ(READ, for short) caused an inputdevice, asspecified by the addresspart of the instruction, to be selected for reading. The selected

if not theearliest, use of magnetic drumsas auxiliary storage in a large-scale computer whosemain memory was of a different, faster type.

device could be oneof four magnetic-tape drives, or four

To summarize, the I/O organization of the 701 was

372

logical magnetic drums (portions of physical drums), or

physically simple. It was uncommitted to the transfer of

C . J. BASHE ET AL.

IBM J. RESD. EVELOP. 0 VOL. 25 NO. 5 SEPTEMBER 1981

fixed blocks of data or even to dealing with sequential memory locations within an I/Ooperation.Whenever possible, existing mechanisms were used with a minimum of additional electronics,relying on the CPU program and hardware to carry out housekeeping functionsthat would later betaken over by such system componentsas control units and channels.
0 The 702: Simplifying programming The I/O capabilities of the 702 illustrate an alternative I/O architecture to that of the 701, in a machine of comparable size and capability. Its planning reflected the assumption that potential userswould be most attracted toa computer that dealtwith data in the familiar form of existing business records, and onethat required thefewest program steps to perform a typical data processing job. An architectural feature which clearly illustrated this orientation was the manner in which READ and WRITE instructions operated. Having previously specified the desired I/O device with a SELECT instruction, the programmer used the address part of the READ or WRITE instruction to designate the location in memory to orfrom which the first character of an inputor outputrecord was tobe transferred.Thereafter, as soon asthe selected device was available,an entire recordwas read orwritten without requiring additional instructionssuch as thCeOPY instruction of the 701.
This technique would have left the CPU and memory idle much of the time unless the I/O data rate was high enough. The magnetic-tape data rate, at15 000 characters per second, came fairly close, being a little over one-third the internal memory speed. The magnetic drum at 25 000 characters persecond was a better match, as it used more than half of the available 23-ps memory cycles. For slower I/O units, which included card readers, card punches, and line printers, magnetic-core buffer storage wasprovided to increase the data-transfer rate and to avoid delaying the CPU while waiting for one of these devices to go through a substantial portion of its mechanical cycle. The rather modest-sized, magnetic-core buffer memory units of the 702, which were delivered starting in February 1955, were among the first coincident-current, magnetic-core storage units produced by IBM.
0 Bufer storage for tape As magnetic-tape applications grew in importance, it became clear that keeping the CPU of the 702 busy onethird to one-half of the time was not enough and thatsome provision for overlapping among tape input, tape output, and processing was needed. At first a small number of magnetic-core buffers were designed and provided for use with 702 magnetic-tape units on a special-engineering basis. Following the 702, the tape buffer idea was kept alive for some years in record storage units made avail-

able as regular products for usewith the 705. Initially the 705 also provided instructions which overlapped tape reading with writing, but not with processing.
Overlapping of all three was first obtained by means of the TapeRecord Coordinator, announced in 1955 for use with the 705. It contained a 1024-character buffer storage, which allowed it to read and simultaneously write a master file on tapewhile searching for "active"records in the file. Only the active records were passed to the 705 CPU for processing; the restof the time, the705 program could proceed independently.
Flexibility of attachment Right from the staritt was considered importantto permit a system like the 702 to be tailored to the needs of each installation and to allow for the useof new devices whose characteristics could not be anticipated. Thusany reasonable number of each type of device could be attached, including none. All devices regardless of type were attached via their control unitsto the CPU and memory by a common cable connection. Circuitspeculiar to a particular device type were containeind the appropriatecontrol unit rather than in the processor. This attachment method was the first version of what later became known as a standard I/O interface.
Other systems contributed to the evolving standard interface. The serial input/output adapter of the 1401 permitted attachment of any of (eventually) a wide variety of serial-by-character I/O devices. Amajor contribution was the Stretch I/O interface, which further generalized the attachability of devices to the system through its "exchange," and included operator consoles, typewriter inquiry stations, and communication terminals in the list of devices attached in this standard fashion.
In the 702 system, the controlunits for the cardreader, punch, and printer were equippedfor either direct attachment to the CPU (on-line) or attachment to a tape drive (off-line). Thus the user had a choice of the greater computational efficiency of off-line operation, at the expense of additional delay and tape handling, or the better error control and shorter turnaround time of on-line operation, at the expenseof throughput.
The concept of off-line control units underwent an interesting evolution. If a new printer, for example, was equipped with a tape-to-printer control unit, the printer could be used in conjunction with any computer which could furnish data on magnetic tape in a compatible format. This approach avoided botthhe engineering expense of attaching the printer to thecomputer and the inefficient use of the computer in feeding data directly to a printer.

3173

IBM J. RES. DEVELOP. VOL. 25 NO. 5 SEmEMBER 1981

C. J. BASHE ET AL.

But,as mentioned before, when the 1401 was an-

nel programs and the routinesfor synchronizing the CPU

nounced in 1959 as a low-end computer system, it was

and channels. The IOCS introduced with the 709 repre-

found economical to use the 1401 also as an off-line con-

sented oneof the early steps in the evolution of the oper-

trol unit (with considerable editing capability) to make its

ating system.

superior printing and card-handling equipment available

to users of the larger systems of the 7000 series. Thusthe

Channels similar to thoseof the 709were later provided

1401 was IBM's first intelligent control unit, an alterna-

in the 705 I11 and in most subsequentIBM computers. An

tive to the"spooling" mentioned in the 7070 description.

equivalent function was introduced through the process-

ing-overlap feature on the 1410, a simplified version of

0 I10 channels

which became available on the 1401. These 1400-series

As late as 1957, computers were seriously limited in their

"channels" were integrated into the CPU by means of

ability to utilize their processing capabilities during I/O

special registersfor holding I/O data and addresses. They

operations, or toperform more than one input or output

requiredspecialinstructions, but theywere not con-

operation at a time. In the 701 or 704, instructions could

trolled by separate channel programs as in the 700 series

be executed during the transfer of a record betweenmem-

and its successors.

ory and the I/Odevice, but the involvement of the CPU

program and the MQ register in the transfer of every word

All of these channels or equivalent features involved

severely restricted the amount of such processing. In the

"cycle stealing," a technique for accessing memory in a

702, processing washalted during the entire transferof an

manner transparent to the CPUprogram, which had been

I10 record between memory and the device or its buffer

employed several years earlier in the SAGE computer.

storage. Later refinements, such astheTape Record

Coordinator and the read-while-writing feature of the 705,

I10 interruption

made possible concurrent input and output operations.

The instruction loops required on the 709 to test for the

status of overlapped I/O operationsa, nd thus synchronize

Although the 709, one of the last of the vacuum-tube

CPU and channel programs, were found to be generally

computers announced by IBM, had a rather short tech-

cumbersome and inefficient. A much more direct method

nological life, it made an important contribution to con-

is to interrupt the CPU at the eonfdan I10 operation, or

current CPU and 1/0operations by the introduction of

upontheoccurrence of exceptionalconditions, and to

VO channels [21]. These channels actedindividually as I/O

cause the CPU program to branch to an instruction se-

processors with a specialized instruction repertoire. Each

quence designed to take the desiredaction.Early ver-

channel could address and accessmemory to store orre-

sions, such as thedata-channel trap of the 7090, were

trieve data quiteindependently of theCPUprogram.

latereplaced by moregeneral program-interruption

Coordinationbetween the CPUandchannelprograms

schemes. All of the 7000-series systems, announced be-

wasachieved by CPU instructions for (1) conditional

tween 1958and 1%3, included both I10 channelsand pro-

branching depending on whether a channel was in opera-

gram interruption in varying degrees.

tion, (2) delaying the CPU until completion of a channel

command, followed by loading of channel control regis-

The most sophisticated interruption scheme wasdevel-

ters, and (3) storing the channel control registercontents

oped for Stretch, which combined interruptions for I/O

in a specified memory location.

and other external causes with the management of pro-

gram exceptions. It was a directprecursor of theI10

For the 709, twochannelswere packaged in a unit

channel and interruption architecture of Systed360.

called the data synchronizer, and three such units could

be attached to a 709 CPU. Each datasynchronizer could

Conclusion

handle up to16magnetic-tape drives and one cardreader,

By the end of the fifteen-year period covered by this pa-

card punch, and printer. With a full complement of six

per, the computer industry had grown from almost noth-

channels, six of these I/O devices could be operating at

ing to one of the most important, IBM had changed from

the same time. (Magnetic-drum and CRT-display units

being principally involved in punched-card machines to

operated independently of the channels.)

being mainly a supplier of computers, and computers had

begun to change the way man dealt with the world.

It was the parallelism provided by the channels of the

709, as much as any other factor,that led to the develop-

IBM had several successfullines of computers, but this

ment of a supervisory program called the I/O control sys-

successalso presented a problem. Thetotal effort re-

tem (IOCS). It would have been inefficient, when pro-

quired to provide systems and application programming

374

gramming each application,to redesign the detailed chan-

for such different computers had become large and could

C. J. BASHE ET AL.

IBM J. RES. DEVELOP. VOL. 25 NO. 5 SEPTEMBER 1981

be predicted to become unmanageably so. In the early
1960s, computers were understood much better than in
theearly 1950s, yet these lines of upward-compatible
computerswere still constrained to architectural deci-
sions that had been made up to fifteen years earlier. The
time was now ripe to replace these multiple older lines of
computers with System/360: a group of machines built to
a single architecture, that tookmuch better advantage of
what had been learned since the beginning of the com-
puter era.
A key factor in finalizing the transition from the older
series to Systed360was the adventof emulation. Emula-
tionwasa combination of microprogram andsoftware simulation of the various instruction sets, which allowed
users to continue to run existing programs efficiently on the new hardware. Thus, at theend of IBM's first fifteen
years of developing computers for the marketplace,a new evolution was starting, one which has not ended to this
day.
References 1. For additional information concerning precursor machines,
see Byron E. Phelps, "Early Electronic Computer Developments at IBM,"Annals of the Historyof Computing 2,253267 (1980). 2. L. D. Stevens, "Engineering Organizationof Input and Output for the IBM 701 Electronic Data Processing Machine," Proceedings, Joint AIEE-IRE-ACM Computer Conference, New York, December 1952, pp. 81-85. 3. M. M. Astrahan and N. Rochester, "The Logical Organization of the New IBM ScientificCalculator," Proceedings of theElectronicComputerSymposium (IRE), Los Angeles, April 30-May 2, 1952, paper XIX (7 pp.). 4. W. Buchholz, "The System Design of the IBM Type 701 Computer," Proc. IRE 41, 1262-1275 (1953). 5 . C. E. Frizzell, "Engineering Description of the IBM Type 701 Computer," Proc. IRE 41, 1275-1287 (1953). 6. J. L. Greenstadt, "TheIBM 709 Computer," Proceedings of the Symposium: New Computers,a Report from the Manufacturers (ACM), Los Angeles, March 1957, pp. 92-96.
7. N.Rochester, C. J. Bashe, W. Buchholz, R. P. Crago, P. E.
Fox, J.A. Haddad, and B. E. Phelps, "Electronic Data Processing Machine," U.S. Patent 3,245,039, April 5 , 1966 (448 PP.). 8. C. J. Bashe, W. Buchholz, and N. Rochester, "The IBM 702, an Electronic Data Processing Machine for Business," J. ACM 1, 149-169 (1954). 9. C . J. Bashe, P. W. Jackson, H. A. Mussell, and W.D. Winger, "The Design of the IBM Type 702 System," paper no. 55-719, AIEE Transactions 74 (Part I, Communication and Electronics), 695-704 (1956).

10. E. S. Hughes, Jr., "The IBMMagneticDrum Calculator Type 650, Engineering and Design Considerations," Proceedings of the Western Computer Conference, Los Angeles, February 1954, pp. 140-154.
11. F. E. Hamilton and E. C. Kubie, "The IBM Magnetic Drum Calculator Type 650," J . ACM 1, 13-20 (1954).
12. M. L. Lesser and J. W. Haanstra, "The Random-Access Memory Accounting Machine-I. System Organization of the IBM 305," IBM J. Res. Develop. 1, 62-71 (1957).
13. R. W. Avery, S. H. Blackford, and J. A. McDonnell, "The IBM 7070 Data Processing System," Proceedings of the Eastern Joint Computer Conference, Philadelphia, December 1958, pp. 165-168.
14. J. Svigals, "IBM 7070 Data Processing System," Proceedings of the Western Joint Computer Conference, San Francisco, March 1959, pp. 222-231.
15.R. R. Bender, D. T. Doody, and P. N. Stoughton, "A Description of the IBM 7074 System," Proceedings ofthe Eastern Joint ComputerConference, New York, December 1960, pp. 161-171.
16. W. Buchholz, Ed., Planning a ComputerSystem(Project Stretch), McGraw-Hill Book Co., Inc., New York, 1962.
17. S. S. Snyder, "Computer Advances Pioneered by Cryptologic Organizations," Annals of the History of Computing 2, 60-70 (1980).
18. W. J. Eckert and R.Jones, Faster,Faster, McGraw-Hill Book Co., Inc., New York, 1955.
19. R. R. Everett, C. A. Zraket, and H. D. Benington, "SAGE-A Data-Processing System for Air Defense," Proceedings of the Eastern Joint Computer Conference, Washington, DC, 1957, pp. 148-155.
20. M.M. Astrahan, B. Housman, J. F. Jacobs, R. P. Mayer, and W. H. Thomas, "Logical Design of the DigitalComputer for the SAGE System," IBM J. Res. Develop1. ,76-83 (1957).
21. C. L. Christiansen, L. E. Kanter, and G. R. Monroe, "Data Synchronizer," U.S. Patent 3,812,475, May 21, 1974.
Received April 11, 1980;revised September 25, 1980
C . J . Bashe is located at the IBM Thomas J . Watson Re-
search Center, Yorktown Heights,New York 10598. W.
Buchholz is with the Data Processing Products Group at the IBM laboratory in Poughkeepsie, NewYork 12602. G. V . Hawkins is located at 445 Hamilton Avenue, White Plains, New York 10601. J . J . Ingram is located at the IBM System CommunicationsDivision laboratory,Research Triangle Park, North Carolina 27709. N . Roches-
ter is located at the IBM Cambridge Scientac Center,
545 TechnologSyquare, CambridgeM, assachusetts 02139.

IBM J. RES. DEVELOP. VOL. 25 NO. 5 SEPTEMBER 1981

375
C. J. BASHE ET AL.

.. . . . _. .
Computer architecture and its implementation

