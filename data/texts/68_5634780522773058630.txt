An Early Program Proof by Alan Turing
F. L. MORRIS AND C. B. JONES
The paper reproduces, with typographical corrections and comments, a 7949 paper by Alan Turing that foreshadows much subsequent work in program proving. Categories and Subject Descriptors: 0.2.4 [Software Engineeringj-
correctness proofs; F.3.1 [Logics and Meanings of Programs]-assertions; K.2 [History of Computing]-software General Terms: Verification Additional Key Words and Phrases: A. M. Turing

Introduction
The standard references for work on program proofs attribute the early statement of direction to John McCarthy (e.g., McCarthy 1963); the first workable methods to Peter Naur (1966) and Robert Floyd (1967); and the provision of more formal systems to C. A. R. Hoare (1969) and Edsger Dijkstra (1976). The early papers of some of the computing pioneers, however, show an awareness of the need for proofs of program correctness and even present workable methods (e.g., Goldstine and von Neumann 1947; Turing 1949).
The 1949 paper by Alan M. Turing is remarkable in many respects. The three (foolscap) pages of text contain an excellent motivation by analogy, a proof of a program with two nested loops, and an indication of a general proof method very like that of Floyd. Unfortunately, the paper is made extremely difficult to read by the large number of transcription errors. For example, all instances of the factorial sign (Turing used

0 1984 by the American Federation of Information

Processing

Societies, Inc. Permission to copy without fee all or part of this

material is granted provided that the copies are not made or distrib-

uted for direct commercial advantage, the AFIPS copyright notice

and the title of the publication and its date appear, and notice is

given that the copying is by permission of the American Federation

of Information Processing Societies, Inc. To copy otherwise, or to

republish, requires specific permission.

Authors' Addresses: F. L. Morris, School of Computer and Infor-

mation Science, 313 Link Hall, Syracuse University, Syracuse, NY

13210. C. B. Jones, Department of Computer Science, The Univer-

sity, Manchester MI3 9PL, England.

0 1984 AFIPS 0164-l 239/84/020139-l

43$01 .OO/OO

b) have been omitted in the commentary, and ten other identifiers are written incorrectly. It would appear to be worth correcting these errors and commenting on the proof from the viewpoint of subsequent work on program proofs.
Turing delivered this paper in June 1949, at the inaugural conference of the EDSAC, the computer at Cambridge University built under the direction of Maurice V. Wilkes. Turing had been writing programs for an electronic computer since the end of 1945-at first for the proposed ACE, the computer project at the National Physical Laboratory, but since October 1948 for the Manchester prototype computer, of which he was deputy director. The references in his paper to 240 are reflections of the 40-bit "lines" of the Manchester machine storage system.
The following is the text of Turing's 1949 paper, corrected to the best of our ability to what we believe Turing intended. We have made no changes in spelling, punctuation, or grammar.
Turing Text
Friday, 24th June [I9491
Checking a large routine by Dr A. Turing. How can one check a routine in the sense of making sure
that it is right? In order that the man who checks may not have too
difficult a task the programmer should make a number of definite assertions which can be checked individually, and from which the correctnessof the whole programmeeasily follows.

Annals of the History of Computing, Volume 6, Number 2, April 1984 l 1%

F. L. Morris & C. B. Jones - Turing Proof

Considerthe analogyof checkingan addition. If it is given as:
1374 5906 6719 4337 7768 26104 one must check the whole at one sitting, becauseof the carries. But if the totals for the various columnsare given, as below: 1374 5906 6719 4337 7768 3974 2213 26104 the checker'swork is much easierbeing split up into the checking of the various assertions3 + 9 + 7 + 3 + 7 = 29 etc. and the smalladdition 3974 2213 26104
This principle can be appliedto the processof checking a large routine but we will illustrate the method by meansof a small routine uiz. one to obtain @without the use of a multiplier, multiplication being carried out by repeatedaddition.
At a typical moment of the processwe have recordedk and$Ffor someF, s. Wecan changeq to (s+ l)k by addition of F. When s = F + 1 we can changeF to r + 1 by a transfer. Unfortunately there is no coding systemsufficiently generally known to justify giving the routine for this processin full, but the flow diagram given in Fig. 1 will be sufficient for illustration.
F. L. Morris was graduated in mathematics from Harvard College in 1964 and received the Ph.D. in computer science from Stanford University in 1972. He has been employed at the universities of Essex and Edinburgh, and since 1975 has taught at Syracuse University. The collaboration with C. B. Jones reported here was done while visiting the Programming Research Group, Oxford, during 1980- 1981.
C. B. Jones began his career working on standard commercial computing projects. A period in operations research was followed by a change to "systems programming. " In IBM's Product Test Group the realization dawned that quality could only be achieved in design. The first step toward "formal methods" came with an assignment to the IBM Vienna Laboratory in 1968. A sabbatical in Oxford from 1979-1981 led to the current position of professor of computing science at Manchester University.

Each "box" of the flow diagram representsa straight sequenceof instructions without changesof control. The following convention is used: (i) a dashedletter indicates the value at the end of the
processrepresentedby the box: (ii) an undashed letter representsthe initial value of a
quantity. One cannot equatesimilar letters appearingin different boxes, but it is intended that the following identifications be valid throughout
s content of line 27 of store F " " `I 28 " " n " " " 29 " " u " " " 30 " " u " " " 31 " "
It is alsointended that u be .@or something of the sort e.g.it might be (s + l)F or s but not e.g. s2+ F2.
In order to assist the checker, the programmer should make assertionsabout the various statesthat the machine can reach. These assertionsmay be tabulated as in Fig. 2. Assertionsare only madefor the stateswhencertain particular quantities are in control, correspondingto the ringed letters in the flow diagram. One column of the table is used for eachsuch situation of the control. Other quantities are also neededto specify the condition of the machine completely: in our caseit is sufficient to give F and s. The upper part of the table givesthe various contents of the store lines in the various conditions of the machine, and restrictions on the quantities s,r (which wemay call inductive variables). The lower part tells us which of the conditions will be the next to occur.
The checkerhasto verify that the columnscorresponding to the initial condition and the stoppedcondition agreewith the claimsthat are madefor the routine asa whole. In this casethe claim is that if westart with control in condition A and with n in line 29 we shall find a quantity in line 31 when the machine stops which is b (provided this is less than 240b, ut this condition hasbeen ignored).
He has also to verify that each of the assertionsin the lower half of the table is correct. In doing this the columns may be taken in any order and quite independently. Thus for column B the checker would argue: "From the flow diagram we seethat after B the box u' = u applies.From the upper part of the column for B we have u = b. Hence u' = k i.e. the entry for u i.e. for line 31 in C shouldbe Lr. The other entries are the sameasin B."
Finally the checker has to verify that the processcomes to an end. Here againhe shouldbeassistedby the programmer giving a further definite assertionto be verified. This may take the form of aquantity which is assertedto decrease continually and vanish whenthe machinestops.To the pure mathematician it is natural to*give an ordinal number. In this problem the ordinal might be (n - r)u2 + (r - s)w + k. A lesshighbrow form of the samething would beto give the integer 280(n - F) + Z4'(r - s) + k. Taking the latter case and the step from B to C there would be a decreasefrom 2'"(n - F) + 240(r - s) + 5 to 280(n - r) + 240(r - s) + 4. In the step from F to B there is a decreasefrom 2"(n - r) + 240(r - s) + 1 to 2'O(n- r - 1) + 240(r + 1 - s) + 5.
In the courseof checking that the processcomesto an end the time involved may also be estimatedby arranging that the decreasingquantity representsan upper bound to the time till the machinestops.

140 * Annals of the HIstory of Computing, Volume 6, Number 2, April 1984

F. L. Morris & C. B. Jones * Turing Proof

0D STOP I---+
0A

, r'=l u' = 1

I

\

v'=u

+-- TESTr-n

+ s'=l

A

I.p Figure 1 (Redrawnfrom Turing's original)

r'=r+l-\

,

0E
: :- l/`=u+v

0G
: s'=s+l

/. -

0F

+ TESTS-r

I

\,

Conference Discussion (from page 70 of the conference report)
Prof. Hartree said that he thought that Dr Turing had usedthe terms "induction" and "inductive variable" in a misleadingsensesince to most mathematicians induction would suggest"mathematical induction" whereasthe processsocalled by von Neumann and Turing often consisted of repetition without logical connection. Prof. Newman suggestedthat the term "recursive variable" shouldbe used.Dr Turing, however, still thought that his original terminology couldbejustified.
Comments
The contributors to the conference discussion were M. H. A. Newman, then professor of pure mathematics

at Manchester University, who had played a leading part in setting up the Manchester computer project, and D. R. Hartree, then professor of mathematical physics at Cambridge University, who had been a moving force both at the NPL and at Cambridge.
We now turn to a discussion of Turing's proof method. Present methods might combine Turing's Figures 1 and 2 into a flowchart that includes the assertions. Figure A is an annotated flowchart in the style of Floyd (1967). Two significant differences between Figure A and Turing's presentation may be observed.
1. In the Floyd style, assertions may be any propositions relating the values of the variables to each

STORAGE LOCATION
I 27 28 ::
31

(INITIAL) k=@6
I n
TO @ WITH r' = 1
u' = 1

k=@5O@O k=4

r n 1L
TO @

r n L' II
TO @ IFr=n TO @ IFr-cn

Figure 2 (Redrawnfrom Turing's original)

(STOP) k=O
n

k=3 k=0l S s+l rr n Sk (s Jl)Lr
v WITHY = r + 1 IFsrr TO @ W.- lTHs'=s+l

0 k=2
S
r
(s :1,Lf

Annals of the History of Computing, Volume 6, Number 2, April 1984 l 141

F. L. Morris & C. B. Jones * Turing Proof

v =III n!

O<n I

r5n u =IIII- r!

r1c5n ll== r! v = r!
I

20 A

`STOP

scr<n u = sr! v = f!
II

slr<n u=(s-tl)r! v = r!
II ' s:=s+l

Figure A

I I I
r-en u=(r+l)r!

u = sr! v = r!

other, whereas the format of Figure 2 tends to restrict one to giving an explicit expression for the value of each variable of interest. Thus it is possible to express, for example, the inequality r I n, which strictly speaking is necessary for inferring the u = n! claim at D from u = r! (holding at C) and r 2 n (shown by arrival at D from C). (Note, that Turing speaks of giving, in the upper part of Figure 2, "restrictions on the quantities s, r"; these do not appear, however.)
2. In Figure 1 the contents of the individual boxes (e.g., "r' = r + 1") are best regarded as specifications to be met by coding: "achieve that r on exit is one more than r on entry." The corresponding assignment statement in Figure A ("r := r + 1") is to be thought of as a directly executable statement; the level of necessary representation of quantities and implementation of operations lying below the atomic statements of Figure A is entirely ignored. In particular, the Floyd notation makes no use of primed variables; every use of a variable in an expression, whether in a box or in an assertion, is to be understood as referring to the current value.
The most striking discrepancy between the two versions of the flowchart arises form this last point. Turing chooses to regard the box at G ("s ' = s + 1") as having no effect on the values of his variables, but instead as causing location 27 to contain s + 1 in place of s, an outcome that in Floyd's notation one would have no means of expressing. As is clear from the

remarks in Figure 2, the test at F is meant to compare r with the unincremented value of s. Just how this test is to be implemented, s being no longer the contents of any location, is presumably left to the coder's ingenuity.
Turing's convention here-that the increase of s need not coincide with execution of the box "s' = s +' 1"-cannot be regarded as happily chosen; indeed, the notation of Figure 1 must probably be considered as potentially ambiguous standing on its own, because there seems to be no clear rule about when the addition of a prime to a letter makes a difference. We conjecture, however, that the flow diagram (Figure 1) was drawn just for the occasion, because "there is no coding system sufficiently generally known," and that what Turing had in mind to be passed between the programmer and the checker was the actual code of a routine, marked with letters A, B, . . . , together with an equivalent of Figure 2. There would then be no appearance of inconsistency between the code corresponding to box G, incrementing the contents of location 27, and the behavior of the variable s, belonging solely to the assertions, which increased-as might seem more natural to the programmer-at the point of closure of the loop it controlled.
An additional, minor, remark on the proof concerns the intended domain of the program. It would appear to compute factorial zero correctly, but the assertions are not framed so as to prove this. The necessary

142 l Annals of the History of Computing, Volume 6, Number 2, April 1984

F. L. Morris & C. B. Jones - Turing Proof

changes would be tedious but not difficult. In Figure A we have made explicit the assumption that n is strictly positive.
One final observation on Turing's style of proof concerns his termination argument. To facilitate the simultaneous handling of both loops, what is in effect lexicographic ordering between ordered pairs of expressions is used. In the style of Floyd (1967), the termination of the loops would be considered separately.
In spite of the early date of Turing's paper and the insight shown, we know of no evidence that the paper influenced the later contributors to the ideas of program proofs.
Acknowledgments
Martin Campbell-Kelly, Andrew Hodges, Bill Wadge, Stanley Winkler, and Mike Woodger provided valuable suggestions on the presentation of this paper.

REFERENCES
Dijkstra, E. W. 1976.A Discipline of Programming. Englewood Cliffs, N.J., Prentice-Hall.
Floyd, R. W. 1967."Assigning Meaning to Programs."Proc. of Symposia in Appl. Math. 19. (Also in S. T. Schwartz (ed.), Mathematical Aspects of Computer Science, Providence,American Mathematical Society, 1967.)
Goldstine,H. H., and J. von Neumann.1947."Planning and Codingof Problemsfor an Electronic Computing Instrument." Report of U.S. Ord. Dept. In A. Taub (ed.), Collected Work of J. von Neumann, New York, Pergamon, Vol. 5, 1965,pp. 80-151.
Hoare, C. A. R. October 1969.An axiomatic basisfor computer programming.Comm. ACM 12, 10,576-580.
McCarthy, J. 1963."A Basisfor a Mathematical Theory of Computation." In P. Braffort and D. Hirschberg (eds.), Computer Programming and Formal Systems, Amsterdam, North-Holland, 1967,pp. 33-70.
Naur, P. 1966. Proof of algorithms by general snapshots. BIT f5,4, 310-316.
Turing, A. M. 1949."Checking a Large Routine." In Report of a Conference on High Speed Automatic Calculating Machines, Univ. Math. Lab., Cambridge,pp. 67-69.

Annals of the History of Computing, Volume 6, Number 2, April 1984 * 143

