Advances such as specialized parallel hardware and new algorithms for text searching winl improve the effectiveness of information retrieval systems.

Automatic iformation
Retrieval
Gerard Salton Cornell University

Information files of all kinds are now in common However, some experimental indexing systems perform

use-personnel records, parts inventories, customer ac- automatic content analysis to select appropriate iden-

count information, business correspondence, document tifiers. These systems may be used when the stored infor-

holdings in libraries, patient records in hospitals, and so mation items consist of natural language texts-e.g.,

on. Information retrieval systems are designed to help books in a library collection, medical summaries. In these

analyze and describe the items stored in a file, to organize cases, an explicit indexing operation may be avoided en-

them and search among them, and finally to retrieve them tirely by assuming that the individual words in the natural

in response to a user's query.

language text represent the information content.

Designing and using a retrieval system involves four

major activities: information analysis, information Information organization and search. Once the items

organization and search, query formulation, and infor- have been indexed, the information file in which they will

mation retrieval and dissemination. 1-3

be placed must be organized appropriately. Search pro-

cedures must also be designed to locate items in the file.

Information analysis. This task, also known as index- The most obvious approach to file creation and search is

ing, consists of the assignment of one or more identifiers, to leave the file unorganized (i.e., leave the items in an ar-

or index terms, to each information item. These terms are bitrary order) and to conduct a sequential search of the

designed to identify and represent the stored item. Two whole file. In such a search, a query statement is com-

types of identifiers are now in widespread use. The first pared with the attributes of the first information item,

consists of objective attributes-in a personnel file, for then with those of the second item, and so on until the last

example, a person's name, age, and job classification item is reached. This approach will work if the number of

could be used to identify a personnel record; similarly, in stored items is small, since a sequential scan of the whole

a library file a book's author, publisher, and date of file may be conducted rapidly enough to satisfy any user.

publication could be used to identify the record ofa book. When only a single attribute controls the access to a

In addition to using the values of certain objective at- file, it may be convenient to order the file by the values of

tributes for information identification, it is also possible that attribute and to add a directory or sparse index pro-

to utilize subjective attributes, or content terms, to viding access to certain subsections of the file. In this way

describe each stored item. Thus, a person whose record is the file scanning operation can be restricted to a small sec-

included in a personnel file could be characterized as in- tion of the file. The organization of a telephone book is an

telligent, hard-working, and compassionate; a library example-access to the file is controlled by a single at-

item could be identified similarly by using words or tribute (subscriber name), is ordered by values of that at-

phrases describing the content of the document.

tribute (position in an alphabetical listing of names), and

In existing retrieval environments, the indexing task is is supplemented by a sparse index (the names in the upper

carried out manually by subject experts trained to assign outer corner of each page) which restricts the file scan to a

the relevant identifiers to the information items. single page.

September 1980

0018-9162/80/0900.0041$00.75 © 1980 IEEE

41

A typical file arrangement of this type is shown in simplified form in Figure 1, where the file is ordered alphabetically by customer name. The sparse index (Figure 1 b) includes pointers to certain subsections of the file. Thus, the pointer attached to the entry ASTRAHAN makes it possible to locate entries in the main file for names from ADAMS to ASTRAHAN, and the pointer for BROOKS similarly identifies the subsection from BARCLAY to BROOKS, and so on. Because the sparse index itself may be extensive, a small auxiliary index (Figure la) may be added to provide access to certain subsections of the sparse index. Thus, to locate the file item for CAMPBELL, the pointer next to D is used to gain access to the sparse index for entries from A to D. The appropriate section of the sparse index is then scanned. Since CAMPBELL follows BROOKS but precedes CARSTEN, the CARSTEN pointer is used to gain access to the main file. A sequential scan starting at entry BROWN is then used to locate CAMPBELL.
Accessing the appropriate subsection of the ordered file (Figure I c) is faster than sequentially scanning the entire file. However, special precautions must be taken to maintain the file in alphabetical order as items are added and deleted.
In practice, the use of an ordered file and sparse index covering a single attribute type may be unduly restrictive. For example, one might want to access a file using a variety of objective attributes, such as customer name, age, address, or bank balance. Furthermore, a single query could also include several types of content identifiers. In principle, several copies of a file could be maintained. Each one would be ordered differently-by name, age, balance, and so on. As the number of attributes that are of interest grows, this solution becomes too expensive.

The alternative is to store a single copy of the main file but use multiple indexes or directories to cover the various attributes. Thus, one directory may contain pointers to the records for customers of a particular age; another to records for persons of a particular weight; a third to records for people with certain names, and so on. This organization is an inverted file; Figure 2 shows a typical example for two attribute types, age and weight.
In Figure 2, the main file is stored in some unspecified order, and dense indexes identify the location of all
records corresponding to each possible value of an at-
tribute. Retrieving the set of records corresponding to a combination of objective attributes or content identifiers involves
(1) retrieving the respective pointer lists from the directories,
(2) comparing the pointer lists to detect entries which meet the specifications of the query formulations, and
(3) retrieving the records from the main file which exhibit the proper pointer combination.
Consider, for example, a request to retrieve from the data base of Figure 2 the records of all persons of age 27 and weight 145. The directory list for the query term "age 27" contains pointers to the BROOKS and CAMPBELL records; the pointer list for the term "weight 145" identifies BROOKS and CARSTEN. A comparison ofthe two lists reveals one common pointer element-BROOKS. Hence, the BROOKS record is eventually retrieved from the main file. Figure 3 shows a simplified flowchart for the inverted file search process.
The main advantage of the inverted file search is the speed with which responses to search requests are obtained. Normally, no search is conducted in the main file; instead, the relevant records are located by manipulating the pointer lists in the directory. Furthermore, the unsorted main file is relatively easy to maintain. However, the size of the directory may be substantial, since pointer
lists are maintained for all possible index terms. This is
true especially for systems in which the terms attached to the items are weighted to reflect the term's importance, or in which information is included in the directory to specify the location of each occurrence of a term in a document. In many practical inverted file systems, the directory's size rivals that of the mnain file, and the need to maintain two large files presents substantial problems.
Consider now the queryformulation process. In most existing systems, the query-record comparison is an exact match process between the query terms and the corresponding keywords attached to the stored records and documents. The goal is identification of all records exhibiting a term combination identical to that in the query statements. Various methods are available for expressing combinations of query terms-boolean connectives (AND, OR, NOT) are the standard mechanisms. Typical query statements might request items dealing with topics "A and B," "A or B," "A and not B," or "(A and B) or C." These imply, respectively, that the documents to be retrieved must be identified by both term A and term B, by either term A or term B, by term A but not term B, or finally by either term C or the combination of terms A and B. Given an inverted file arrangement such as that of

42 COMPUTER

Figure 2. The inverted file utilizes multiple indexes to an unsorted file.

Figure 2, boolean queries can be answered by list intersections for the "AND"-type queries, and by list unions for the "OR" formulations.
Boolean connectives also are used in "free text" search systems, in which individual text words constitute the identifiers attached to the information items. One might request documents dealing with

(FILE AND ORGANIZATION) OR (INFORMATION AND RETRIEVAL).

In this situation, text location information might be added to the query statement, provided the relevant location information is included in the inverted directories. Typically, one might be able to request documents about

(FILE ADJACENT ORGANIZATION) WITHIN SENTENCE
(INFORMATION ADJACENT RETRIEVAL),

Figure 3. General procedure for searching an inverted file.

September 1980

43

implying a search for documents containing in the same enough extraneous ones rejected, tihe system operations

sentence the terms "FILE," "ORGANIZATION," are considered satisfactory.

"INFORMATION," and "RETRIEVAL," with the Whereas most basic informatiorn retrieval processes

added restriction that "FILE" and "OR- have remained unchanged for abouit 10 years, advances

GANIZATION" be adjacent in the sentence (and, in many secondary areas have led tco speedier operations

similarly, "INFORMATION" and "RETRIEVAL"). and more effective output productts. The remainder of

Most existing retriev-al.s.ystems also allow the use of ~~~~~~~r~~etphoisrt briefly describes these imnprovements.

truncated terms. One could request documents about

"INFORM* AND RETRIEV*", for example, where

the asterisk represents truncation. The search would then On*line information retrieval

beconducted foritems identified bv "information." "inform," "informer," or "informational," as well as by "retrieve," "retrieval," "retrieving," and so on.
In addition, weights may be attached to query terms and, occasionally, document identifiers. Instead of retrieving documents containing all the given query terms, one might be satisfied with documents for which a sum of the weights of the matching query terms exceeds a given threshold. The term weights can then be used to rank the retrieved documents in decreasing order according to the sum of the matching term weights. Consider, for example, a query including the four terms

A discussion of recent developments in information
retrieval cannot begin-without stressing the obvious connection between information dissemination and on-line search. Off-line batch processing systems, in which incoming user queries would be accumulated and then processed in a single pass through the main file, have been replaced almost completely by on-line systems offering interactive searching. Search requests are submitted to the system via a CRT or teletypewriter terminal, and retrieval output is quickly obtained.
Hundreds of different bibliographic data bases are now available for on-line searching; they comprise many tens

INFORMATION (2), RETRIEVAL (5), FILE (3), of millions of records, with many hundreds or thousands

ORGANIZATION (4),

of search operations performed on them every day. The

with term weights shown in parentheses. If the retrieval threshold is 7, the following ranked output would be obtained:
(1) items containing all four terms (sum of weights = 14),
(2) items containing the terms "retrieval," "file," and "organization" (sum of weights = 12),
(3) items containing the terms "retrieval," "organization," and "information" (sum of weights = I 1),
(4) items with "retrieval," "file," and "information" (sum of weights = 10),
(5) items with "organization," "file," and"information" (sum of weights = 9), and
(6) items containing only two matching terms, including "retrieval" and "organization" (weight = 9), "retrieval" and "file" (weight = 8), "organization" and "file" (weight = 7), and "retrieval" and "information" (weight = 7).
Items containing only a single matching term, or the combination of "file" and "information," would not be retrie4,ed since the sum of the weights does not reach the stated threshold of 7.

extensive coverage of these data bases in some subject areas, the relatively low cost of searching them (from $20 to $40 for most searches), and the chance to see some portion of the retrieved documents almost immediately following query submission have greatly enhanced the appeal of existing search systems.4,5 Even though the on-line approach does not alter the intellectual operations underlying most retrieval activities, its appeal does increase the perceived importance of search systems and, hence, their commercial viability.
Most existing on-line information retrieval systems use the inverted file organization and incorporate many of the query formulation techniques already outlined: boolean connectives between terms, term truncation, term location information, and term weights. Moreover, the online environment provides additional facilities for formulating better query statements and thus obtaining bet-
ter output. Displays of the system's search vocabulary are an ob-
vious possibility-the user can obtain lists ordered alphabetically or by subject, of all the terms in the inverted directories. Furthermore, lists of synonyms or
related terms may be useful in generating alternative

The retrieval operation proper involves displaying the query statements. Thus, if a user is interested in "file

identifications (i.e., displaying citations, titles, abstracts, organizations," the system might display additional

etc.) of records or documents responding to the query for- terms such as "sequential search," "inverted index

mulations. Most existing systems make provision for lists," and "indexed sequential access." The user could

query improvement or reformulation; normally this then incorporate these terms into an "expanded" query

operation utilizes vocabulary printouts or displays con- formulation.

sisting of terms related to those included in the original
query statements-. Such related terms may then serve to
"expand" query'formulations in the hope of retrieving
additional useful output.

Another possibility is a "browsing" facility that provides feedback for query refinement. By reading the displayed abstract of a previously retrieved document or by consulting the index terms attached to a document

Methods also exist for evaluating search output and retrieved in an earlier search, the user can identify new

often involve some sort of assessment of relevance by query terms. For example, when a previously retrieved

users. When enough "relevant" items are retrieved and document is especially relevant, the searcher can use its

44 COMPUTER

terms to replace those in his own query, in the hope of ob-

Table 1.

taining new documents just as relevant. Most on-line systems also make it possible to save

(adapteTdypfircoaml

text search statements in "Stairs VS-A Tool for the

Stairs
End User"6).

previous query statements and to create new statements by combining pieces of old ones. Thus, if query A covers the subject "informational retrieval" and query B covers "file organization," a new, more refined query can be stated simply as "A and B," covering the area "informa-

QUERY NUMBER

QUERY STATEMENT

0 HEALTH AND RESORT AND RHEUMATIC

EXPLANATION USE OF BOOLEAN CONNECTIVES

tion retrieval and file organization." Table I shows a typical sequence of increasingly detailed query statements of this kind and demonstrates some of the facilities included in the well-known Stairs retrieval system.6.7

®) HEALTH ADJACENT RESORT AND RHEUMAT USE OF TERM LOCATION INFORMATION AND OF TRUNCATED

The first statement uses boolean connectives between

TERMS

single terms. Statement two adds word location information: the terms "health" and "resort" are to be adjacent in the title or abstract of the document. The second statement also uses the truncated term RHEUMAT* to repre-

(E)

(©) AND HOTEL WITHIN SENTENCE QUIET

REFINEMENT OF AN EARLIER

QUERY

STATEMENT

sent the set of terms dealing with rheumatism. The third statement is made still more restrictive by
adding to statement two the phrase "quiet hotel," with the requirement that "quiet" and "hotel" be located in the same sentence of the document text. The fourth statement adds to the previous query a restriction based on the

(®) SELECT ®WITH FULL BOARD LESS
THAN 75

OUTPUT
RESTRICTION
BASED ON VALUE OF CERTAIN
OBJECTIVE

value of an objective attribute, namely, the cost of room

ATTRIBUTES

and board for each facility discussed in the document.

UNDERLINED WORDS ARE RESERVED BY SYSTEM

Thus, the fourth query requests items about health resorts

for patients with rheumatic diseases, but only if the

resorts are located in quiet surroundings with room and board not exceeding $75 per day. A number of retrieval systems combine bibliographic searching capabilities based on content terms and text matching with data base

ferent facilities. This unfriendly situation creates a need for intermediaries between user and system. These intermediaries are expected to become familiar with the intricacies of the various existing retrieval services.

management facilities using the values of objective at-
tributes such as cost, age, or weight.6-8

Because of the large sums invested in many systems, voluntary agreement on common formats and services is

not likely. However, methods can be devised to minimize

New developments

the incompatibilities among existing formats and services. For example, a new, standard system could be

Sophisticated user-system interfaces. The popularity of on-line retrieval services has generated interest in improv-

designed to take into account the features of existing
retrieval systems. Preprocessing routines could then convert the various input formats into the common format

ing and streamlining system operations. One area involves improving the user-system interface, i.e., making it

used by the new system.9 Alternatively, existing systems could be maintained unchanged, but a common front-

easier for the user to approach the system and manipulate its large files. The first problem confronting the user is the large number of different commercial retrieval services. In principle, these services all could use identical search and retrieval procedures and identical formats for representing bibliographic information, since they operate according to the same underlying principles. In practice,

end interface could be designed to handle user-system interactions in a standardized, user-friendly manner. Such an interface package could monitor the user-system dialog during retrieval operations and call on one of the existing retrieval services for internal search operations. A typical interface of this kind is Conit, the Connector for Networked Information Transfer. 10

most retrieval services are incompatible, since they use different command languages and offer somewhat dif-

The Conit system is represented in simplified form in Figure 4, and excerpts from a typical Conit dialog are in-

Figure 4. dardizes

By providing user-system

a front-end interface interactions.

shared

by

the

various

retrieval

services

(Dialog,

BRS,

Orbit,

etc.),

Conit

stan.

September 1980

45

+ + +. CONIT WELCOME TO CONIT. IF YOU MAKE A TYPING MISTAKE. STRIKE THE BREAK KEY. WAIT FOR USER CUE (+ + + + USER::), AND THEN RETYPE THE LINE. FOR MORE HELP ON HOW TO USE CONIT. TYPE
HELP FOLLOWED BY A CARRIAGE RETURN: OTHERWISE YOU MAY NOW TYPE ANY CONIT COMMAND. + + + +USER:: HELP + + + +CONIT:
THE NAME OF THE BASIC HELP COMMAND IS EXPLAINED.. FOR EXAMPLE. IF YOU TYPE EXPLAIN COMMANDS OR JUST E COMMANDS CONIT WILL LIST ALL THE BASIC COMMANDS YOU CAN USE AND A SHORT EXPLANATION OF THEM.

+.+ + + USER: E COMMANDS

+ + + +CONIT: EXPLANATION OF COMMANDS
THE BASIC COMMANDS YOU WILL BE GIVING ARE THESE (EITHER THE FULL NAME OR THE ABBREVIATION MAY BE TYPED):

NAME EXPLAIN PICK FIND SHOW COMBINE CLEAR SEND

ABBREV E P F S C

SHORT EXPLANATION

USED TO GET EXPLANATIONS ABOUT CONIT

USED TO PICK A DATABASE AND RETRIEVAL SYSTEM

USED USED

TO TO

FIND DOCUMENTS IN DATABASE DISPLAY INFORMATION ON DATABASES,

SEARCH

TERMS,

SEARCHES ALREADY DONE, DOCUMENTS FOUND

USED TO COMBINE SETS OF RETRIEVED DOCUMENTS

USED TO CLEAR RETRIEVED SETS TO PREPARE FOR NEW SEARCHES

USED TO SEND COMMAND IN NON-CONIT LANGUAGE

* . . . USER. E PICK + . + . CONIT:

DATABASE TO SEARCH IN. TO PICK A RE X IS THE NUMBER OR NAME OF THE

HOUVV U TO SWITCH FROM )

ID TO THE MEDLINE DATABASE FOR AN ON-LINE LIST OF THE ASE TO ANOTHER

+ + + +CONIT: IN ORDER TO CONNECT TO THE DATA BASE YOU PICKED: SCIENCE ABS (NUMBER 12), CONIT WILL CONNECT TO THE ORBIT SYSTEM. TO MAKE THIS CONNECTION CONIT WILL FIRST PHONE THE TELENET NETWORK. THE WHOLE CONNECTION PROCESS WILL TAKE ABOUT A MINUTE OR TWO. PLEASE WAIT FORTHEUSER CUE ( + + +USER::) BEFORE MAKINGANEWCOMMAND. PHONE CONNECTION MADE TO TELENET. TELENET RESPONDING. TELENET CONNECTION PROTOCOL IN PROGRESS. LOGGING ONTO SDC/ORBIT. SDC/ORBIT CONNECTION DATA: (05/30/79 1:30 P.M. PACIFIC TIME) RESPONSE NOT YET RECEIVED FROM RETRIEVAL SYSTEM. SHOULD CONIT WAIT FOR A RESPONSE ANY LONGER? (ANSWER YES OR NO)
RETRIEVAL SYSTEMS MAY BE SLOW IN RESPONDING AT TIMES. YOU SHOULD ANSWER YES TO THE ABOVE OUESTION ABOUT 3 SUCCESSIVE TIMES

1633.4 + . + .+USER:: E FIND

+ + + +CONIT:

EXPLANATION OF FIND COMMAND THE FIND COMMAND IS USED TO SEARCH FOR DOCUMENTS RELEVANT TO A

PARTICULAR TDPIC. TYPE FIND THAT SPECIFIES THE SUBJECT

X WHERE X IS A OF YOUR TOPIC:

ETDEGR.,M,

OR

SET

OF

TERMS,

FIND POLITICAL WDRLD MODELS

WILL SEARCH FOR DOCUMENTS THAT HAVE BEEN INDEXED UNDER EACH OF

TA'HPDOELOITCTHUIRCMESE'ENOGTRIWV'EOPNUOLLWIDOTIRBCDAESLFLYOO'RU,NWDEOTRCIF.DISAT NTWDHEAR'TEWOHIRANLVDDEE'XTDEHRDEU'SNWAODMREELRDSS'T'PEOOLMIR.TI'ICNWAOLTR'HLEODRLEYX'AMPLE ETC., AND'MODEL' OR'MODELS', ETC. INGENERAL. IT ISAGOOD IDEA TO

START WITH ONE WORD FOR EACH IMPORTANT CONCEPT IN YOUR TOPIC.

FOR ADDITIONAL EXPLANATIONS THAT MAY BE USEFUL FOR SEARCHING TYPE

(ABBREVIATIONS IN PARENTHESES):

EFIND MORE

(E FM)

EFIND FEWER

(E FF)

FOR WAYS TO FIND ADDITIONAL DOCUMENTS FOR WAYS OF AVOIDING IRRELEVANT DOCUMENTS

ESHOW INDEX

(E SI) FOR BROWSING THROUGH THE VALID INDEX TERMS

ECOMBINE EFIND AUTHOR EFIND CITED

(E C) (E FA) (E FC)

FOR COMBINING SETS OF RETRIEVED DOCUMENTS 'FOR SEARCHING BY AUTHOR NAME TO FIND DOCUMENTS THAT CITE A GIVEN DOCUMENT

AUTHOR

± 4+.+ USER:: FIND INFORMATION RETRIEVAL

+ ±+. CONIT:

YBOYUTROISNEGARCCOHMBHIANSEBEStEXN

NAMED AND S1

S1 WHICH WHERE

CONIT

WILL

GET

SSliAB

= =

FIND FIND

INFORM' RETRIEV'

RESPONSE NOT YET RECEIVED FROM RETRIEVAL SYSTEM

SHOULD CONIT WAIT FOR A RESPONSE ANY LONGER? (ANSWER YES OR NO)

+ . . +USER::

SEARCH

SlA (FIND INFORM') NOTE THAT CONIT

FOUND 15867 DOCUMENTS ORDINARILY SEARCHES EACH

WORD

IN

YOUR

SEARCH

SEPARATELY AS INDICATED BY THE COMBINE COMMAND FOR THE SEPARATE

SUB-SEARCHES.

WFUIOSTRUAHILNYLFOYO.URRMTNHASOITETSIAEORKANCILHNOSDNWOOOOTFRTHSDHAESETARARCTSOCNYHIIPINTENDSGOIRCOGDAFIITVNMEEADOSRRBITEYLHYETEXHSBAEEECSATTTRRCSURHENEEACSSRAUCTLFHITOIOSRNNGA,SLYLTMYTPBEEO.RLMS(I)BEGINNING

SR±EH+SO+FUOL+NDS+CEOUENNSIOEETTXRAWY:CAE:TITTRFEOCERIAVERDESFPROONMSEREATNRYIELVOANLGSEYRS?TE(MA.NSWER YES OR NO)

YES
SSTOEEAASRRECCEHHRSSEi1FBE(RC(EFONIMNCBDEISNREETTO1RAITEHAVEN')DFIF1RBOS)UTNF5DODU1NO4DC64U1M0DE9ON3CTUDSMOECTNYUTPMSEE.NTS
SHOW

1640.0 +++

+USER:w

S ALL D1

+ ± + +CONIT:

-T ACCESSION NUMBER TITLE AUTHORS ORGANIZATIONAL SOURCE SOURCE

AVAILABILITY DOCUMENT TYPE LANGUAGE CATEGORY CODES INDEX TERMS SUPPLEMENTARY TERMS

ABSTRACT

A79036851

STATISTICAL FEATURES OF PHASE SCREENS FROM SCATTERING DATA

ZDAEPPTD.ECDKEI,PHAY.S:.BAULNTIEVS..LAH.VPA.L,. EOD.UEBEC. CANADA

3IP-PN5.V14E50R5-S-0E8990,S2O11-U95R7,C8.ESP2PR4RI0ONBGREELFRE.-MVSERILNAOGP,TIBCESR.LIINS.BNGERMANY,

$24 80

CH (CHAPTER): GR (GENERAL/REVIEW)

ENGLISH

+3A4230: 3A4220: 3AO130R

OPTICAL INFORMATION PROCESSING: LIGHT SCATTERING:

REVIEWS: SPECKLE: PHOTON COUNTING PHASE SCREENS: SCATTERING DATA: STATISTICAL

FEATURES:

CPOARTTREERLNAST:IONNONFCUHNCATOITOINCS:SCPAHTOTTEORESDTARTAIDSITIACTSI:ONSPECKLE

REVIEWS THE RETRIEVAL OF STATISTICAL FEATURES OF

+ + ++CONIT: SEARCHES IN SCIENCE

ABS

DATA

BASE

ON

THE

ORBIT

SYSTEM:

S5 8 2 AND 3

S4 17 3AND1

S3 3913 CLUSTER

SSi2

364 INFORMATION RETRIEVAL 1093 1A AND 1B (INFORMATION RETRIEVAL)

SSiIAB

15867
1464

INFORM:
RETRIEV:

cluded in Figure 5. A gentle introduction to the system is provided; alternatives are offered and suggestions about reasonable ways of proceeding are made. Furthermore, the system informs the user about what is actually happening at each point in the search process. Thus, after the user chooses a particular data base (Figure 5d), the system explains that it will call a particular communications network (Telenet) to furnish connections to a commercial

processor for each subfile. Each such auxiliaryprocessor, operating in parallel with the other auxiliary processors, then performs the query-record comparisons for its subfile. In practice, a separate auxiliary processor might be
provided for each disk (or disk face) for a file stored on a
disk stack. Appropriate communication channels must also be implemented between the auxiliary parallel processors and the central processing unit which handles the

retrieval system (Orbit). When the system is unable to respond immediately, it informs the user and tells himn to relax and wait.,
The actual search process is illustrated in Figures 5e, 5f, and 5g. The search phrase "information retrieval" is interpreted as a request for documents containing the word stems INFORM* as well as RETRIEV*. The final excerpt (Figure 5h) summarizes a particular sequence of query statements and shows that.1093 documents satisfy the query INFORM* and RETRIEV*. However, only 364 items are obtained when the full phrase INFORMATION RETRIEVAL is used; the addition of a third search item such as CLUSTER*, to form INFORM* and RETRIEV* and CLUSTER*, furnishes only 17 items in response to the query.
Within a few years, retrieval services should be able to provide interaction facilities simple enough to permit the user direct access to stored data, thus making professional search intermediaries unnecessary.

user programs. Figure 6 shows a typical arrangement for parallel back-end processors.'3 '4
A second way to speed up file searching is to use an
associative memory,device. An associative memory of n
cells can store n different keywords, and all these keywords then can be matched in parallel against the contents of a sequentially scanned main file. Typically, the keywords included in a search request are stored in the cells of the associative memory, and then, in a single scan of the main file, all these keywords are compared against the record contents. A typical arrangement of this kind is shown in Figure 7.15,16,17 An incoming query is first broken down into its component parts (individual terms and boolean connectives); the distinct terms are then stored, and a comparator unit matches the identifying information from the documents against the query terms. The term comparator can be built to handle truncated terms (with missing prefixes as well as missing suffixes) and so-called "don't care" characters, i.e., ones defined

Rapid search facilities. Retrieval operations can also be improved by back-end changes, i.e., by providing more efficient methods for query-document comparison and keyword searches. Consider the normal situation where

as matching any arbitrary incoming character. When a match between a query and a document term is detected, a query resolver-which checks whether the complete query statement is fulfilled by the matching document terms-is notified.

search requests are processed as boolean combinations of keywords-for example, A or (B and C). A sequential

Auxiliary back-end search processors and associative memories can be combined to create a common search

scan of all records in the file can always identify the records containing either keyword A or else both keywords B and C. A more likely strategy uses inverted in-

and retrieval environment, thereby achieving potentially fast query-record matching.

dexes which, for each of the three keywords, contain lists

of the document references exhibiting the particular Advanced text matching systems

keyword. The search process for the sample query then

performs an intersection of the document reference lists When an inverted directory is used for storage and

corresponding to index terms B and C to identify items retrieval purposes, it is not necessary to search large files

appearing on both lists. The resulting list is then merged with the document reference list corresponding to term A

of natural language text. Indeed, the file that stores the actual documents need be accessed only after relevant

to obtain all items located either on the A list or on.the

combined B and C lists.

When the keyword lists are long, that is, when many

records are identified by a given key, the list intersection

and merging operations may be speeded up by using-an ar-

ray, or network, of comparator units. These operate in

parallel on different elements of the input lists. Thus, n

comparator units used in parallel can simultaneously per-

form pairwise comparisons among n different input

elements from each of two lists. If the multiple com-

parator units are then arranged into a network, and the

output from a given level of the network is fed to addi-

tional parallel comparator units on the next level of the

network, list merge operations can be performed much

faster than with ordinary processors.1"-2

When large files must be accessed, speed advantages can be obtained in one of two ways. The first-partition-
ing-divides the file into subfiles and provides 'a small

Figure 6. To speed up seirching, a large file fiies; each subflie can then be searched by is part of a back-end network.

can be partitioned into an auxiliary processor

sub. that

September 1980

47

Figure 7. Matching of queries against records via an associative memory.

documents have been identified by the index search. of length m against a text string of length n is of order

However, for full-text search environments-where each (m-n).

word in the text can act as a search term-the use of in- Fortunately, more sophisticated approaches to the text

verted file arrangements may not be the best strategy. The scanning problem exist. Algorithms have been devised

basic problems are the size of the inverted index, which that operate in linear or even in syblinear time-that is,

can equal, or even exceed, the size of the main document the number of character comparisons needed does not ex-

file, and the need to maintain two copies of the inverted ceed (and in fact may be substantially smaller than) the

index and main document file for file updating purposes. number of characters in the query and text strings (instead

Although inverted file arrangements are used in all ex- of the square of that number as in the earlier exam-

isting full-text search systems, the method is in fact ap- ple).20-23 These algorithms analyze the query pattern (that

propriate'8 only if

is, the query keywords) prior to the search operation and

(1) the vocabulary is homogeneous and standardized,

construct auxiliary tables indicating both the position at which each character occurs in the search pattern and

as in medicine and law, and relatively free of spelling er- possible character subsets within the patterns.

rors; One implementation of a linear/sublinear-time algo-

(2) contiguous word and word proximity processing (where the location of the search words in the text is important) is not necessary and hence extensive location information is not required;
(3) certain text words (rather than the full text) are used for search purposes and hence need to appear in the in-

rithm draws on automata theory and involves constructing a state transition diagram for the terms included in a query or query set. 20,21 Such a diagram consists of a graph structure in which the nodes are individual states and the branches between the nodes transitions between the states. A state transition diagram used for pattern matching purposes can be represented by a goto function, a

verted index;

failure function, and an output function. The goto func-

(4) the data base is not too large.

tion specifies the actual structure of the given diagram; the failure function designates a new state to be reached if

Where these conditions are not met, various other file an input symbol fails to match the transitions allowed to

organizations become attractive. 19 It is always possible to arise from a particular state; and the output function

compare query terms to document terms by sequentially identifies the various matches generated by the diagram.

scanning certain document excerpts. For example, the To recognize the occurrence of a query term in a docu-

standard and somewhat obvious string matching method ment, it is necessary to match the incoming text characters

begins by comparing the first characters of the query pat- against the entries in the state diagram. Transitions from a

tern to the text string, then the second characters (assum- state i to a state j are made when the input text character

ing that the first characters match), and so on down until matches the character attached to an arc pointing from

either a character mismatch occurs or the full pattern is state i to state j. A sample state transition diagram set up

correctly matched. When a mismatch between a pattern for the recognition of several query words (he, she, his,

and string character occurs, one must backtrack, shift the and hers) is shown in Figure 8, and the individual steps

pattern over by one place, and start again, comparing the needed to compare the input "harsher" against the transi-

initial pattern character with the second string character, tion diagram are exhibited in Table 2. The correct matching

and so on. Obviously, this process can become inor- output (he, she) is obtained after step six.

dinately expensive because of the backtracking and The automaton is assumed to be in state 0 at the begin-

restart operations. In the worst case, the number of ning of the comparison operation. Figure 8 shows that if

character comparisons needed to match a query pattern an "h" appears at the input, a transition from state 0 to I

48 COMPUTER

Table 2.
Processing the input "harsher" via the state transition diagram in Figure 8.

* GOTO FUNCTION MAPS (OLD STATE, INPUT SYMBOL) - NEW STATE
* FAILURE FUNCTION INDICATES NEW STATE TO GO TO IF INPUT SYMBOL FAILS TO MATCH

INPUT CHARACTER 1h 2a 3r 4s 5h 6e 7r

STATE TRANSITION O-1 1- 0 0-0 0- 3 3-4 4-5 5-2

OUTPUT she, he he

FAILURE FUNCTION FOR SAMPLE DIAGRAM 1 2345678
f(i) 0 0 0 1 2 0 3 0

9 3

in the text until a mismatch is detected. When a mismatch is found, the following rules apply:

* OUTPUT FUNCTION DESIGNATES OUTPUT GENERATED WHEN REACHING A GIVEN STATE

OUTPUT FUNCTION FOR SAMPLE

0(2) = {he)
0(5) = Ishe,he)

0(7) = {his}
0(9) = {hers}

(1) When the first (leftmost) pattern character does not match the current string character, the pattern is shifted to the right by one character position, and the leftmost pattern character is compared with the next string 'character;
(2) When a number of matching pattern characters are

Figure 8. A state transition diagram set up for the recognition of the query words "he," "she," "his," and "hers."

detected before a mismatch occurs, two possibilities arise: (a) The already matching subpattern contains a re-

peating part that could match the tail end of the matching

substring; if so, the pattern is shifted so that the repeating

occurs; if an "s" appears, the transition is from state O to state 3. If any character other than "h" or "s" is initially available, the automaton stays in state 0. If the input string is "harsher," a transition is made from state 0 to 1 when the "h" is found. The next input character is "a"; hence, there is no way to proceed to states 2 or 6 from state 1. The failure function indicates that a return to state 0 is in order. When the "sher" portion of "harsher" is scanned, successive transitions are made from state 0 to 3, 4, 5, and finally 2. The output function for state 5 indicates that the input matches query terms "she" and "he," and the output for state 2 once again identifies "he" as a matching term.
The example of Figure 8 and Table 2 demonstrates that it is not difficult to match an input text against a fixed query set represented by a transition diagram. Unfortunately, the need to build and maintain the transition structures for each incoming query renders the process questionable for general text matching purposes. On the other hand, in situations where a query set remains constant over long periods of time-such as in systems for selective dissemination of information-the state transition matching process is straightforward and efficient.
Two other rapid text matching methods that do not re-

portion coincides with the appropriate string characters; (b) The previous condition does not hold, in which
case the pattern is shifted so that the first (leftmost) pattern character is compared with the currently mismatched string character. As an example of case a of rule 2, consider the query word EPILEPSY and assume that the pattern character S represents the first mismatch. This indicates that the string contains the characters EPILEPX, where X * S. The pattern is then shifted by four positions to the right, because the subpattern EP in positions 1 and 2 of the pattern repeats the portion EP in positions 5 and 6, and hence the pattern characters EPI (positions 1-3) might match the string characters EPX (positions 5-7) for X * S. The next character comparison must then be made between the pattern character I in position 3 and the currently mismatched string character X.
The KMP pattern matching method is illustrated in Figure 9. The number of character comparisons needed to match a pattern of length m with a text of length n is of order (m + n). No backtracking is necessary; however, the query patterns must be preanalyzed to recognize recurring patterns in the query terms. 22
An alternative text matching method, the BM process

quire the construction of a state transition diagram have been proposed recently.22'23 The first one, the KMP method (for Knuth, Morris, and Pratt), performs a leftto-right, character-by-character scan of both the query and document texts and shifts the query characters to the right, by an appropriate amount, when a mismatch occurs.

(for Boyer and Moore), is even faster than the KMP strategy in that the expected number of character comparisons is of order n or less for a text string of n characters. The query patterns must again be preanalyzed to recognize recurring subpatterns. In addition, the BM method, unlike the KMP, may require some backtracking, which could entail extra disk accesses to retrieve the

Assuming a pattern p (the query) and a string s (the document text), consider the problem of finding in s a substring matching pattern p. The basic rule is to match one string character with one pattern character, starting with the leftmost characters, and to proceed left-to-right

text string. The BM algorithm proceeds by first comparing the
rightmost (rather than the leftmost) character in the pattern to a particular character in the string. If a match is found, a left shift is made, and the character to the left of

September 1980

49

I

(a)

STEP 1:

HNEONCMEA,TCSHHIWFITTPHATCTHEARRNACRTIEGRHT1

OF BY

PATTERN;
1.

(b) STEP 2: SMTIRSIMNAGTPCAHTATFETRNERaTbcHxRE(EFOCRHxA0RaA)CDTOEERSMNAOTTCHES; MATCH ANY OTHER SUBPATTERN OF abca; HENCE, ALIGN CURRENTLY MISMATCHED STRING CHARACTER WITH FIRST PATTERN CHARACTER.

(c) STEP 3 NO CHARACTER MATCH IN FIRST CHARACTER; SHIFT PATTERN RIGHT BY 1.

(d) STEP 4

MATCHING STRING PATTERN abcatcax FOR xoc;
SUBPATTERN abcab (CHARACTERS 1-5) COULD MATCH STRING CHARACTERS abcax (x*c); HENCE, SHIFT PATTERN BY THREE PLACES SO THAT CHARACTER 5 OF PATTERN IS NEXT COMPARED WITH THE MISMATCHED STRING CHARACTER.

(e) STEP 5: MATCHING STATUS AT END OF SAMPLE STRING s. Figure 9. Pattern matching using the KMP method.
the rightmost pattern character is treated. A string pointe.r designates the string character that must currently be matched with the given pattern character. This pointer iis moved left by one character position when a match occcurs; when a character mismatch occurs, it is moved to the right to designate the next string character to be compare d with the rightmost pattern character. Like- the KM]p method, the BM algorithm's principal complexity lies i n determining exactly the pointer shift (the number of string characters to be skipped) in the event of a mismatch.
Two principal rules specify the permissible pointer shif't
at each step of the algorithm: (a) When a mismatched string character is detected, ain
attempt is made to find that string character elsewhere iin the pattern and to determine the pattern shift necessary tio
achieve coincidence (known as the A, shift); should th e
string character not occur in the pattern at all, a shift by the whole length of the pattern is in order.
(b) When a portion of the pattern matches som e substring in the text, an attempt is made to find a

repeating occurrence in the pattern of the originally matching subpattern; the shift needed to make the new occurrence of the subpattern coincide with the matching substring is known as the A2 shift.

In order to detect a complete match between a query pattern and a portion of the text string, the rules above must both be satisfied, because a mismatched string character must eventually find a match in the pattern (hence the A, shift), and an already matching part of the pattern must again be matched following a pointer shift operation (hence the A2 shift). At each point in the matching process, it is appropriate to execute a shift equal to the maximum between A and A,2
Consider query pattern p and text string s as before:

1 23456789 p: c b a a b c a b c s: a b c d e f a b c a b c d e f a b c ...
t ,-,-,.,
After a successful comparison between the ninth (last), eighth, and seventh characters, a mismatch is found in the sixth character position. At this point, two pattern shifts are possible. Consider the A shift first: Since the mismatched string character "f" occurs nowhere in the pattern, the pattern can be shifted all the way beyond the "f" character position, producing the following situation:
p cbaabcabc
s: a b c d e f a b c a b c d e f a b c .. t
The A 2 shift is determined by finding a new occurrence of the matching subpattern "abc" in positions 7 to 9. Since the "abc" subpattern is repeated in pattern positions 4 to
6, a shift of three places will maintain the match with the originally matching substring:

p: c b a a b c a b c

s: a b c d e f a b c a b c d e f a b c

',,-'P

t

Since the largest possible pointer shift is the most advan-

tageous, the A,
the BM process

shift is executed. A complete is shown in Figure 10.

example

of

The number of required character matches between

strings. and patterns will obviously decrease as the dif-

ferences between the text string and query patterns in-

crease (that is, as fewer string characters occur in the pat-

tern) and as the pattern exhibits fewer repeating portions.

Normally, the number of character mismatches is much

larger than the number of matches. In that case, the

number of character comparisons will be substantially

less than the string length, and the BM process will be

maximally efficient.

Sophisticated retrieval models
The vector processing model. A great deal of work has been devoted to the construction of abstract models of retrieval processes. These models have been based on vector and fuzzy set theory as well as on probabilistic and decision theoretic considerations. 24 Here, we will briefly discuss some of the possibilities inherent in the vector processing and decision theoretic approaches.

50 COMPUTER

Consider a collection of documents and assume that

each is identified by a set of terms, or content identifiers.

The identifiers might be words extracted from-the text, or

descriptive phrases, or entries taken from a thesaurus.

The collection may then be represented in matrix form

(Figure 1 la), each row of the matrix representing a docu-
ment and an entry dj, representing the weight, or value, of
the jth identifier attached to document i. A query Q is

represented similarly by a term vector, qj representing the

value of thejth identifier in query Q. Each columm of the

matrix identifies the assignment of a specific term to the

items of the collection. This is indicated in Figure I lb by

the ith

respective vector forms, where dpcument, column Tk the kth

treorwm,DianiddenQtjiftihees

the jth

query.

A similarity measure s may be computed between pairs

of items as a function of the global similarity between

items. (Note that a global similarity measure makes it un-

necessary to insist on the presence or absence of a par-

ticular identifier, because the eventual similarity value

depends on the values of the complete collection of iden-

tifiers.) Typical similarity measures between two vectors

Xi =
might

be(xil,xi2,.-,xi,,)

and

Xj
n

=

(x,.,

xJ2,..xjn)

sl (XX,X1)

ik Xik

k= I

or

I

(a) T$A AND T DOES NOT OCCUR IN PATTERN; SHIFT BY PATTERN LENGTH.

I(b) L#A AND L DOES NOT OCCUR IN PATTERN: SHIFT BY PATTERN LENGTH.

(c)
I

NOA, NEXT

OBCUTCUNRROECNCCUERSININPAPTATTETRENR,N;A,TOSHMIAFTKE=N1.COINCIDE

WITH

(d) NA MATCHES NA, BUT - *A; NEXT OCCURRENCE OF NA IN PATTERN IS

IN POSITIONS 3 AND 4 OF PATTERN; TO MAKE MATCHING PARTS

COINCIDE, A2 SHIFT DOES NOT OCCUR IN Al SHIFT = 4.

= 2; SINCE NONMATCHING STRING CHARACTER PATTERN, CAN SHIFT PATTERN BEYOND -, THAT

-
IS,

n

E Xik Xjk k= 1

n nn

E (Xik)2 +

(Xjk)2 - = Xik Xjk

k=l k=1 k= I

The similarity computations between pairs of document vectors, pairs of term vectors, and a document and a particular query are illustrated in Figure I Ic.
One can represent a collection of items on a twodimensional map so that the similarity among items is inversely related to the distance between them. Figure I Id
shows this for three items, where the similarity between items A and B is clearly much greater than that between A
and C.

The vector processing model leads to a new understanding of the retrieval process and produces various enhancements of it, including improved automatic indexing techniques and advanced file organizations. 25,26 From a practical point of view, sophisticated query negotiation and reformulation methods provide the likeliest areas in which to obtain gains in retrieval effectiveness.

In existing retrieval systems, query reformulation is based on vocabulary displays showing synonymous terms and terms related to those included in an original query statement. Because on-line systems provide search results immediately, query reformulation can utilize information about previously retrieved documents. In general, one would like to rephrase a query so that the final statement is similar to documents previously retrieved and assumed to be relevant and yet different from those retrieved and known to be extraneous. The well-known relevance feedback method used in the Smart retrieval

(e) A MATCHES A, BUT RON AND R DOES NOT OCCUR IN PATTERN; A2 SHIFT = 2 TO REACH NEXT OCCURRENCE OF A IN PATTERN; Al SHIFTS = 5 TO SHIFT BEYOND R.
I(f) NOA; A, SHIFT = 1 TO REACH NEXT OCCURRENCE OF N IN PATTERN.
(g) ANA = ANA BUT BO; FOR NEXT OCCURRENCE OF ANA IN PATTERN, A2 SHIFT = 2; FOR NEXT OCCURRENCE OF NONMATCHING STRING
CHARACTER B, Al SHIFT = 2. I i')
Figure 10. Pattern matching using the BM process. system alters query statements automatically by increasing the weight of query terms included in the relevant items and decreasing the weight of terms found in the nonrelevant items.27,28 Relevance feedback is represented symbolically in Figure 12, where the distances between items are inversely related to the similarities among them. It can be shown formally that the best retrieval query is one which minimizes the average distance between the query and the set of relevant documents and maximizes

September 1980

51

Di ... ditd,
D2 d22 ... d2t

Q q, q2

qc

(a) term assignment array

DOCUMENT Dj = {dj,,dj2_.,di)

QUERY 0i = (qi,1qj2.'iqjl)

TERM

Tk = (dlk d2k. ldnk)

(b) document, query, and term vectors

s( Di D)

SIMILARITY COMPUTATION BETWEEN DOCUMENTS D.AND D.

s( Tk,'T)

SIMILARITY COMPUTATION BETWEEN
TERMS Tk AND T,

s(Qj, D)

QSIUMEIRLYAR0I,TAYNCDODMOPCUUTAMTEINOTNDiBETWEEN

(c) similarity computations

Figure 12. Reievance feedback.

Figure 13. Optimum query placement (minimum distance to relevant items and maximum distance from nonrelevant items).

x = INDIVIDUAL ITEMS
(d) (sspiamiclearrietyprIensveenrtsaetliyorneloaftseidmitloadriitsytamnecaesurements S(A,B)>S(A,C))
Figure 11. Term and document similArities.
the average distance to the nonrelevant items (Figure 13). Relevance feedback can be adapted easily to standard
retrieval environments. A system used by the documentation service of the European Community operates approximately as follows29:
(a) The term sets attached to previously retrieved items identified as relevant are examined. For each relevant document, a query statement is constructed consisting of the "anded" terms (for example [A.andB andC andD]).
(b) For each such term set, a broadened, partial query is constructed by removing one or more terms (for example, [A and B and Cl).
(c) These partial statements are used as new queries, and additional documents are retrieved.

(d) The relevance of the newly retrieved items is assessed. For each partial query, a query quality factor is computed, defined as the number of new relevant items retrieved divided by the number of new nonrelevant items retrieved.
(e) For partial queries with sufficiently high query quality factors, steps (a), (b), and (c) are repeated.
Many variations are possible for such a reformulation system. The method outlined above apparently produces substantial improvements in retrieval effectiveness. 29'30
Another approach to query refinement uses local term clustering for feedback purposes. It is well known that groups or clusters of terms can be generated automatically. The resulting "thesaurus" exhibits classes comprising terms with similar document assignments. Analogously, one can automatically produce document classes by grouping records with similar or related term assignments. 31,32 From a practical viewpoint, automatic classification methods-whether applied to terms or to documents-may be difficult to justify because of the expense involved in applying them on a large scale.33 However, these objections do not apply to local clustering, in which the procedure may be applied to a small subfile consisting preferably of documents (or their terms) retrieved in a previous search operation.

52 COMPUTER

A typical query reformulation based on local term clustering might operate as follows 34:
(a) Relevance assessments are obtained for certain documents retrieved in earlier search operations.
(b) Terms from the documents identified as relevant are ranked in decreasing order or relative frequency (frequency of occurrence in the documents divided by total frequency in the collection). Terms with large relative frequencies are used for query reformulation.
(c) Alternatively, or in addition, term similarity coefficients are obtained for pairs of terms occurring in the relevant documents, with the size of the coefficients dependent on common occurrence patterns in the respective documents or document sentences.
(d) Terms with large enough similarity coefficients are clustered, and each original query term is considered the kernel of a cluster of related terms to be used for query reformulation.
Once again, many procedures can be applied locally to previously retrieved documents or terms to improve the presentation of the' output and the effectiveness of retrieval.35 Local operations can be used to rank the retrieved documents in decreasing order of relevance. In one experimental system, the usual unranked output is first obtained, based on exact matching of document keywords with boolean search requests. A ranked output is then generated by computing the cosine similarity coefficient between each retrieved document D = (dl, d2,....
d,) and the corresponding query Q = (ql, q2,..., qn),
defined as

n
i=l diqi /

nn

i=l

d2 *
i=l

qi2 .

This renders possible the presentation of the output in

decreasing order of the cosine coefficient, that is, in

decreasing order of the global query-document

similarity. 36

The method used to superimpose the cosine computa-

tion on the normal processing of the inverted file consists

of storing in each inverted list of document references the

weights of the corresponding term in each document. A

typical inverted list for a term Tthus consists of pairs of

vhaalsuveasl(uDeiww1i,inDdiowcju,mDenktWkD,,etvca.l),ueinwdiciantiitnegmtDhiat,

term T and so

on. The computation of the numerator of the cosine

measure yd, q then becomes possible following consulta-
tion of the inverted lists of doc'ument references. A

separate "document length" file stores the length d2di for each document D. Since the query length Xq.2 iS

available directly, the cosine measure can be computed

without problems. Measures other than the cosine could

be used equally as well for document ranking and query

reformulation.

Even this somewhat cursory introduction to the vector

processing environment shows that substantial computa-

tion is required to carry out the distance finding and pat-

tern matching operations. This suggests that the en-

hanced computational facilities provided by array pro-

cessors may be helpful for vector manipulation. These

processors are special arithmetic processing units often

comprising adders and multipliers as well as dedicated

registers and storage areas. In general, a number of computations may be overlapped, or carried out in parallel. 37,38 For example, the inner product
n
I diqi i=l1 may be computed by overlapping the product computa-
tion PROD, = q, * di with the execution of the addition
SUM = SUM + PROD i,1 Simultaneously, the
boepefreatncdhsedfofrrsoumbsmeeqmuoernyt.opTehreatnioonrsma(lqis+eIqaunedncdei+ne1)edceadn
for the inner product-2n memory fetches, n multiplications, and n additions-might then be replaced by a total of n composite array processing operations. The usefulness of these techniques remains to be evaluated.

The decision theoretic model. A substantial literature deals with the application of probability and decision theory to information retrieval. 39,40 Here, let us consider
a vector X = (X1 ,X2 . Xv), where Xi represents ran-
dom variables. Let P(X) and R (X) represent the probability that a relevant, and a nonrelevant item, respectively, has vector representation X. That is,

P(X) = Pr{X/Xrelevant}.

Let the

a, and a2 represent loss
retrieval of a nonrelevant

parameters associated with item, and the nonretrieval of

a relevant item, respectively. The average probability of

error is minimized by retrieving item X whenever

P(X) * a2 >R(X) - ap,

(1 )

that is, whenever the loss incurred by nonretrieval of a

potentially relevant item exceeds the loss caused by

retrieval of a potentially nonrelevant one. The decision-

theoretic retrieval rule thus specifies retrieval when

P(X)IR(X) >, alla2'

This rule also implies that a decreasing P(X)/R(X) order of retrieval is preferred, because when P(X)/R(X) > P(Y)/R( Y) for two vectors Xand Y, Xexhibits a higher relevance probability than Y.
The foregoing retrieval rule is useless unless the probability distributions P(X) and R(X) are known for the vectors at hand. Various special cases have been studied, the best known being the binary independent model. This model makes the following assumptions.

(a) A record is an n-dimensional binary vector of terms (all vector elements equal to either 0 or 1).
(b) The terms occur independently of each other in the relevant records.
(c) The terms occur independently of each other in the nonrelevant records.

Assuming term independence and binary vectors, the conditional relevance and nonrelevance probabilities P(X) and R (X) can now be expressed as

n
P(Xj = n px(i (-pi)I-xixi = o,l
i=l1 and

September 1980

53

n
R(X) = n q~Xi(I-qj)l-Xi,
i=l

(2)

where pi and qi repsent the probabilities that an item in
the relevant class, and in the nonrelevant class, respectively, contains term i. Taking logarithms and substituting expression (2) for P(X) and R(X) in (1) above, the decisiontheoretic retrieval function for the binary independent case can be written as:

n
log P(X)/R(X) = E log[(pI/ l-pj-) (qi/(l-qi)]X; (3)
i=l
+ constants.
Expression (3) is in the -form of the standard innerproduct similarity function which determines the similarity between query vector Q and document vector D as
n
f(Q,D) = Ex wixi
i=l where wi, the weight of the ith query term, becomes
log{(pi/l -p) (qi/l - q)}. This development shows that the best query statement for the binary independent case has query weights corresponding to the ratio ofthe proportion of relevant items containing term i to the proportion of nonrelevant containing term i. This function is known as termprecision or term relevance-a number of formal results prove its effectiveness.41'42 The retrieval function of expression (3) and the corresponding query weighting system cannot be used unless
thepi and qivalues are known, of course. To estimate the
pi and qi values, one can assume that the terms are assigned to the document collection according to the wellknown normal or poisson distribution; alternatively, in interactive retrieval situations the usual relevance feed-
back process supplies approximations to the pi and qi
values for many terms contained in previously retrieved documents.
Consider the occurrence characteristics for term i across the set of relevant and nonrelevant documents shown in Table 3. Term i is present in ri relevant documents out of a total of R relevant items; term i also appears in n -ri nonrelevant items out of N-R nonrelevant ones. The optimal query term weighting system now produces the following values for term i:

Table 3. Occurrence characteristics for term i.

RELEVANT NONRELEVANT

TERM PRESENT
x =1

r,

ni -r

TERM ABSENT R-r, N-R-n +rj Xi =0

R N-R

n N-n,
N

wi = log{(pi/l-p,)3 (qi/l - q,)}
= log{(rj/R-r1) . (ni-ri/N-R-ni+r,3}.
When term assignment to documents is not independe'nt in the relevant and nonrelevant document classes,
the expressions for P(X) and R(X) becomne complicated.
Normally, approximations are used which account for only some of the term dependencies. For example, one can assume that

P(X) = P(X Is ...* ,Xn)

P(X0)P(X2/X0)P(X3/X2X0)

....P(XnlXn_ls ...,9XI)

or n

P(X) =

pi(1-P) - Xi [1 + A],

i=l

where A is an expression reflecting some of the term dependencies. 4
For the binary independent case, the foregoing development can be used to analyze search systems, indexing strategies, and relevance feedback operations. 4547 Furthermore, experimental evidence confirming the theoretical insights is easily obtained. 48,49 One can expect that realistic abstract retrieval models will shortly emerge to further clarify the retrieval process. In the meantime, the use of practical tools such as query reformulation and local clustering will improve retrieval effectiveness, as will new possibilities in retrieval software and hardware.

Superficially, it may seem that little has occurred in information retrieval in recent years. After all, inverted file organizations and boolean query statements go back to the punched card era and still prevail in most systems. A closer look, however, reveals that on-line systems have completely changed the established order-sophisticated user-system interfaces guide users through the intricacies of search environments; stepwise refinements transform tentative queries into perfect query statements; versatile browsing capabilities enable users to "navigate" data bases.
New hardware and software "back-end" processors, able to carry out parallel searches in several parts of the
data base, offer substantial speed advantages. New
algorithms substantially increase existing text search capabilities. Indeed, for some applications text scanning may successfully compete with the more conventional searches based on text inversion and auxiliary directories.
Finally, there have been substantial advances in the generation of information retrieval models and theories. The brief mention here of vector processing and decision theory models must suffice as an indication of future developments. -

Acknowledgment
The study on which this article is based was supported in part by the National Science Foundation under Grant DSI-77-04843.

54 COMPUTER

References
1. L. B. Doyle, Information Retrieval and Processing, Melville Pub. Co., Los Angeles, Calif., 1975.
2. F. W. Lancaster, Information RetrievalSystems-Characteristics, Testing and Evaluation, 2nd ed. Wiley, New York, 1978.
3. G. Salton, Dynamic Information and Library Processing, Prentice-Hall Inc., Englewood Cliffs, N. J., 1975.
4. M. E. Williams, "The Impact of Machine-Readable Data Bases on Library and Information Services," Information Processing and Management, Vol. 13, No. 2, 1977, pp. 95-107.
5. F. W. Lancaster and E. G. Fayen, Information Retrieval On-Line, Melville Pub. Co., Los Angeles, Calif., 1973.
6. "Stairs VS-A Tool for theEnd User," IBM Scientific and Cross Industry Center, IBM Netherlands, Uithoorn, June 1978.
7. "IBM System 370 (OS/VS) Storage and Information Retrieval System/Virtual Storage (Stairs/VS) Program Reference Manual," Report SH-12-5400-2, IBM Corp., 1976.
8. R. T. Dattola, "First-Flexible Information Retrieval Facility for Text," J. ASIS, Vol. 30, No. 1, Jan. 1979. pp. 9-14.
9. M. E. Williams, "Experiences of IIT Research Institute in Operating a Computerized Retrieval System for Searching a Variety of Data Bases," Information Storage and Retrieval, Vol. 8, No. 2, Apr. 1972, pp. 57-75.
10. R. S. Marcus and J. F. Reintjes, "Computer Interfaces for User Access to Heterogeneous Information Retrieval Systems," Report ESL-R-739, Electronics Systems Lab., MIT, Cambridge, Mass., Apr. 1977.

11. L. A. Hollaar, "Specialized Merge Processor Networks for Combining Sorted Lists, " A CM Trans. Database Systems, Vol. 3, No. 3, Sept. 1978, pp. 272-284.
12. L. A. Hollaar and W. H. Stellhorn, "A Specialized Architecture for Textual Information Retrieval," AFIPS Conf. Proc., Vol. 46,1977 NCC, pp. 697-702.
13. E. Ozkarahan, S. Schuster, and K. Smith, "A Data Base Processor," Report CSRG-43, Computer Systems Research Group, Univ. of Toronto, Sept. 1974.
14. C. Lin, D. Smith, and J. Smith, "The Design of a Rotating Associative Memory for Relational Database Applications," ACM Trans. Database Systems, Mar. 1976, Vol. I, No. 1, p.53.
15. E. S. Davis, "STARAN Parallel Processor System Software," AFIPS Conf. Proc., Vol. 43,1974NCC, pp. 16-22.
16. J. A. Rudolph, "A Production Implementation of an Associative Array Processor-STARAN,"AFIPS Conf. Proc., Vol. 41, Part 1, 1972 FJCC, pp. 229-241.
17. J. Minker, "Associative Memories and Processors-A Description and Appraisal," Report TR-195, Computer Science Dept., Univ. of Maryland, July 1972.
18. R. M. Bird, J. B. Newsbaum, and J. L. Trefftzs, "Text File Inversion: An Evaluation," Fourth Workshop Computer ArchitectureforNonnumeric Processing, ACM, 1978, pp.
42-50. 19. G. Salton, "Dynamic Document Processing," Comm.
ACM, Vol. 15, No. 7, July 1972, pp. 658-668. 20. A. V. Aho and M. J. Corasick, "Efficient String Match-
ing-An Aid to Bibliographic Search," Comm. ACM, Vol. 18, No. 6, June 1975, pp. 333-340. 21. L. A. Hollaar, "Text Retrieval Computers," Computer, Vol. 12, No. 3, Mar. 1979, pp. 40-50.

HIGH RESOLUTION VIDEO DIGITIZING

Colorado Video's Model 270A-2 is a state-of-the-art TV to computer input instrument designed for use with high resolution TV cameras. Features of the 270A-2 include:

* Computer controllable sampling patterns allowing fast feature identification.

* 1024 x 1024 pixel resolution (optional 512 x 2048) with 8-bit grayscale.

S4500.

colorado video

For specifications and applications material, call or write COLORADO VIDEO, 303/444-3972, Box 928, Boulder, CO 80306 U.S.A.

O 15 Years of Innovative Video Instruments for Data Acquisition, Processing, Transmission, and Display.

Reader Service Number g

22. D. E. Knuth, J. H. Morris, Jr., and V. R. Pratt, "Fast Pattern Matching in Strings," SIAM J. Computing, Vol. 6, No. 2, June 1977, pp. 323-350.
23. R. S. Boyer and J. S. Moore, "A Fast String Searching Algorithm," Comm. ACM, Vol. 20, No. 10, Oct. 1977, pp. 762-772.
24. G. Salton, "Mathematics and Information Retrieval," J. Documentation, Vol. 35, No. 1, Mar. 1979, pp. 1-29.
25. G. Salton, ed., The Smart System-Experiments in Automatic Document Processing, Prentice-Hall Inc., Englewood Cliffs, N. J., 1971.
26. G. Salton, Automatic Information Organization and Retrieval, McGraw-Hill, New York, 1968.
27. J. J. Rocchio, Jr., "Relevance Feedback in Information Retrieval," in The Smart System-Experiments in AutomaticDocumentProcessing, G. Salton, ed., PrenticeHall Inc., Englewood Cliffs, N. J., 1971, chap. 14.
28. E. Ide and G. Salton, "Interactive Search Strategies and Dynamic File Organization," in The Smart System-Experiments in Automatic Document Processing, G. Salton, ed., Prentice-Hall Inc., Englewood Cliffs, N.J., 1971, chap. 16.
29. C. Vernimb, "Automatic Query Adjustment in Document Retrieval," Information Processing and Management,
Vol. 13, No. 6, 1977, pp. 339-353.
30. R. N. Oddy, "Information Retrieval through ManMachine Dialogue," J. Documentation, Vol. 33, No. 1, Mar. 1977, pp. 1-14.
31. G. Salton, "Generation and Search of Clustered Files," ACM Trans. Database Systems, Vol. 3, No. 4, Dec. 1978, pp. 321-346.
32. K. Sparck Jones, Automatic Keyword Classification, Butterworths, London, 1971.

v* SOFTWARE l MANAGEMENT > - COURSES 3

PRESENTED IN COOPERATION WITH

SE

AMERICAN SOCIETY FOR QUALITY CONTROL

(Wash., D.C. and Los Angeles Sections)

SOFTWARE CONFIGURATION MANAGEMENT
29 Sept. - 3 Oct., Los Angeies
SOFTWARE ACQUISITIONIDEVELOPMENT MANAGEMENT
20 - 23 October, Los Angeles
SOFTWARE QUALITY ASSURANCE & RELIABILITY
27 - 30 October, Wash., D.C.
ATTENDEES' SPECIAL PROBLEMS, WORKSHOPS, LECTURES GUEST LECTURER FROM GOVERNMENT MONITORING AGENCY
DETAILED "HOW-TO" COURSES - 3 0 CEUs EACH
Software Enterprises Corporation 10th Anniversary
2239 Townsgate Road, Westlake Village, CA 91361 (213) 889-7814 or (805) 495-6439
Consulting Services & In-Plant Courses

33. W. C. Croft, "Clustering Large Files of Documents Using the Single Link Method," J. ASIS, Vol. 28, No. 6, Nov. 1977, pp. 341-344.

34. L. Attar and A. S. Fraenkel, "Local Feedback in Full-Text Retrieval Systems," J. ACM, Vol. 24, No. 3, July 1977, pp. 397-417.

35.

Tti.onEa.ryDofsozrkOonc-sL,in"eASIeDar-cAhinngA,s"soOcni-atLiivnee

Interactive DicReview, Vol. 2,

No. 2, 1978, pp. 163-173.

36. T. Noreault, M. Koll, and M. McGill, "Automatic Ranked Output from Boolean Searches in SIRE," J. ASIS, Vol. 28, No. 6, Nov. 1977, pp. 333-339.

37. A. L. Robinson, "Array Processors: Maxi Number Crunching for a Mini Price," Science, Vol. 203, No. 4376, Jan. 12, 1979, pp. 156-160.

38. "Software Development Package Manuals," Floating Point Systems, New York, 1976.

39. D. H. Kraft and A. Bookstein, "Evaluation of Information Retrieval Systems: A Decision Theory Approach," J. ASIS, Vol. 29, No. 1, Jan. 1978, pp. 31-40.

40. C. T. Yu, W. S. Luk, and M. K. Siu, "On Models of Information Retrieval Processes," Information Systems, Vol. 4, No. 3, 1979, pp. 205-218.

41. C. T. Yu and G. Salton, "Precision Weighting-An Effective Automatic Indexing Method," J. ACM, Vol. 23, No. 1, Jan. 1976, pp. 76-88.

42. S. E. Robertson and K. Sparck Jones, "Relevance Weighting of Search Terms," J. ASIS, Vol. 23, No. 3, May-June 1976, pp. 129-146.

43. C. J. Van Rijsbergen, "A Theoretical Basis for the Use of Co-Occurrence Data in Information Retrieval," J. Documentation, Vol. 33, No. 2, June 1977, pp. 106-119.

44. D. J. Harper and C. J. Van Rijsbergen, "An Evaluation of Feedback in Document Retrieval Using Co-Occurrence Data," J. Documentation, Vol. 34, No. 3, Sept. 1978, pp. 189-216.

45. C. T. Yu, G. Salton, and M. K. Siu, "Effective Automatic Indexing Using Term Addition and Deletion," J. ACM,. Vol. 25, No. 2, Apr. 1978, pp. 210-225.

46. C. T. Yu, W. S. Luk, and T. Y. Cheung, "A Statistical Model for Relevance Feedback in Information Retrieval," J. ACM, Vol. 23, No. 2, Apr. 1976, pp. 273-286.

47. C. T. Yu, W. S. Luk, and M. K. Siu, "On the Estimation of the Number of Desired Records with Respect to a Given Query," ACM Trans. Database Systems, Vol. 3, No. 1, Mar. 1978, pp. 41-56.

48. G. Salton and R. K. Waldstein, "Term Relevance Weights in On-Line Information Retrieval," Information Processing and Management, Vol. 14, No. 1, 1978, pp. 29-35.

49. K. Sparck Jones, "Search Term Relevance Weighting Given Little Relevance Information," J. Documentation, Vol. 35, No. 1, Mar. 1979, pp. 39-48.

Gerard Salton is a professor of computer
science at Cornell University. He has worked on a number of non-numeric g computer applications, including, in particular, automatic information retrieval.
From 1965 to 1968, he was editor-in-chief
of the Communications of the ACM, and from 1969 to 1970, of the Journal of the
. Salton received a PhD in applied mathematics from Harvard University in 1958 and was on the applied mathematics faculty at Harvard from 1958 to 1965. He is the author of several books, the most recent being Dynamic Information and Library Processing.

Reader Service Number 10

COMPUTER

