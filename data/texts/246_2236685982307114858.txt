Guest Editors' Introduction

Services Mashups
The New Generation of Web Applications

T he Internet and related tech nologies have created an inter connected world in which we can exchange information easily, process tasks collaboratively, and form commu nities among users with similar inter ests to achieve efficiency and improve performance. Web services are emerg ing as a major technology for deploying automated interactions between distrib uted and heterogeneous applications, and for connecting business processes, which might span companies' bound aries.1 Various standards support this deployment, including, for enterpris es, the Web Services Description Lan guage (WSDL), UDDI, and SOAP. These standards support the definition of Web services and their advertisement to the potential user community, binding for invocation purposes, and reuse. At the same time, use of "lighter-weight" ap proaches to services, especially for Web applications, is increasing. Here, the Web APIs and RESTful (Representa tional State Transfer) reign supreme.
Service Mashups
Recently, in the context of the Web,

the mashup concept has emerged, and researchers have developed a huge number of Web 2.0 applications. But what exactly does mashup mean? It simply indicates a way to create new Web applications by combining exist ing Web resources utilizing data and Web APIs. Mashups are about informa tion sharing and aggregation to support content publishing for a new generation of Web applications. By extension, serv ice mashups -- the theme of this special issue -- aim to design and develop nov el and modern Web applications based on easy-to-accomplish end-user service compositions. Combining Web service technologies with fresh content, col laborative approaches (such as Web 2.0 technologies, tags, and microformats), and possibly Web data management and semantic technologies (RSS, RDFa, Gleaning Resource Descriptions from Dialects of Languages, and the Sparql Protocol and RDF Query Language) is an exciting challenge for both aca demic and industrial researchers build ing a new generation of Web-based applications. Researchers have created different mashup tools and platforms,

Djamal Benslimane Lyon University
Schahram Dustdar Vienna University of Technology
Amit Sheth Wright State University

SEPTEMBER/OCTOBER 2008

1089-7801/08/$25.00 © 2008 IEEE

Published by the IEEE Computer Society 13

Service Mashups

letting developers and end-users access and compose various data that Web applications can provide. IBM's QEDWiki (http://services. alphaworks.ibm.com/qedwiki/), Yahoo Pipes (http://pipes.yahoo.com), Google Mashup Editor (http://code.google.com/gme/), and Microsoft's Popfly (www.popfly.com) are some well-known examples of mashup platforms that users have largely adopted. Yet these platforms and as sociated tools represent only early and limited sets of capabilities that are sure to be followed by more powerful and flexible alternatives.
Key Research Issues in Service Mashups
Although many have already adopted the (serv ice) mashup concept and recognized its value, realizing the concept is still challenging, and
Mashup tools must move further to use semantics approaches to deal with service interoperability and integration.
much work remains before we'll see mashup ap plications in a mature stage. Let's briefly discuss some key issues we must consider in the future to improve sharing (registration and publica tion), finding (search and discovery), reusing (invocation), and integrating (mediation and composition) services.
The first key challenge is that of semantic heterogeneity. Compared to data, services can present a broader form of heterogeneity. Corre spondingly, the Web services research commu nity has identified a broader form of semantics -- data (I/O), functional (behavioral), nonfunc tional (quality of service, policy), and execution (runtime, infrastructure, exceptions).2  Several research projects have looked at semantics for traditional (WSDL or SOAP) Web services to help address heterogeneity and mediation challenges, and the community took a step to ward supporting semantics for Web services by adopting Semantic Annotation for WSDL (SAW SDL ) as a W3C recommendation in August 2003 (www.w3.org/2002/ws/sawsdl/). Now, attention has shifted to using semantics for communitycreated content, as with the Semantic Media Wiki,3 and for WebAPIs and RESTful services,

such as hRESTS,4 SA-REST (Semantic Annota tion of RESTful Services), and smart mashups.5 We believe that existing mashup approaches and tools must move one step further in order to use semantics approaches to deal with serv ice interoperability and integration (including mediatability6). To do so, we must have an open eye on how we might build new solutions upon existing semantic Web technologies using ap propriate Web 2.0 and Semantic Web approaches and technologies that complement each other.7
Most service mashup solutions assume that the needed services are known and available somewhere on the Web. Programmableweb.com and APIHut8 are current approaches develop ers can use to share, find, and reuse Web APIs. These approaches are building a nice ecosystem in which people can reuse Web APIs and build mashups. For complex applications to meet en terprise needs, we must also develop advanced capabilities leading to dynamic configuration and composition.
In this Issue
The four articles in this issue address some of the challenges inherent in developing mashupservices-based advanced Web applications.
In "Mashing Up Search Services," Daniele Braga, Stefano Ceri, Florian Daniel, and Davide Martinenghi propose a visual service mashup language for graphically composing and auto matically executing queries over search servic es. They define search services as services with a variable number of ranked data. The proposed language lets users declaratively specify a que ry and mash up registered services in a dragand-drop fashion to compose that query. The authors build service compositions as directed acyclic graphs whose nodes are service invoca tions and whose arcs are connections between services. The authors propose a physical service access plan for the Web service composition's execution needs, such as generating a sched ule of series or parallel service invocations, or chestrating such invocations, and joining data from different services into a ranked output. They argue that their language enables interest ing runtime environments capable of deriving different executable service invocation strate gies. Researchers are still working to meet other challenges, such as mastering more complex dependencies among services and supporting reliable and transactional Web services.

14 

www.computer.org/internet/

IEEE INTERNET COMPUTING

Guest Editors' Introduction

In "Composing RESTful Services and Collab orative Workflows: A Lightweight Approach," Florian Rosenberg, Francisco Curbera, Mat thew J. Duftler, and Rania Khalaf propose the extensible Bite language based on a lightweight process composition model for both Web datadriven applications and Web workflow compo sition. Bite combines SOA process composition principles with REST architectural require ments and workflow functionalities. It lets us ers implement RESTful service composition and interactive workflows.
In "An Online Platform for Web APIs and Service Mashups," E. Michael Maximilien, Ajith Ranabahu, and Karthik Gomadam propose an online mashup platform that enables the con struction, reuse, sharing, deployment, and man agement of Web APIs and service mashups. The proposed platform's main characteristic resides in its domain-specific language, which is intro duced to explicitly represent the activities that a mashup designer must fulfill, such as data mediation and service protocol mediation. The authors have deployed the IBM sharable code platform on IBM alpha works services.
Finally, in "Understanding Mashup Develop ment," Jin Yu, Boualem Benatallah, Fabio Casati, and Florian Daniel provide an overview of some popular and representative mashup development tools and frameworks. Mashup in this article re fers to Web applications comprising data, appli cation logic, and UIs of existing applications or services. The authors compare and discuss these tools and frameworks by considering four di mensions: the component model, which describes the mashup components' characteristic prop erties; the composition model, which specifies how components are glued to create a mashup application; the development environment, and the runtime environment. In their discussion, the authors conclude that mashup tools' main characteristics are simplicity, usability, and ease of access. They also identify some perspectives that could improve mashup tools, such as de scribing user interfaces as components that can be reused and integrated like services.
S ervice mashups are becoming very impor tant as Web applications and Web data grow. Efforts are still needed before we'll be able to easily semantically connect existing Web ap plications, and we must take into account the

challenges we've discussed here. We're con vinced that the research community will soon provide new solutions and tools that have real commercial impact.
References 1. M.P. Papazoglou and D. Georgakopoulos, "Service Ori
ented Computing," Comm. ACM, vol. 46, no. 10, 2003, pp. 24­28. 2. K. Sivashanmugam et al., "Adding Semantics to Web Services Standards," Proc. Int'l Conf. Web Services (ICWS), CSREA Press, 2003, pp. 395­401. 3. M. Krötzsch, D. Vrandecic, and M. Völkel, "Seman tic Mediawiki," Proc. Int'l Semantic Web Conf., 2006, Springer, pp. 935­942. 4. J. Kopecky, K. Gomadam, and T. Vitvar, hRESTS: An HTML Microformat for Describing RESTful Web Services, Kno.e.sis tech. report, Wright State Univ., 2008; http://knoesis.org/research/srl/hRESTs/. 5. A.P. Sheth, K. Gomadam, and J. Lathem, "SA-REST: Semantically Interoperable and Easier-to-Use Services and Mashups," IEEE Internet Computing, vol. 11, no. 6, 2007, pp. 91­94. 6. K. Gomadam et al., "Mediatability: Estimating the Degree of Human Involvement in XML Schema Me diation," to appear in Proc. IEEE Int'l Conf. Semantic Computing, IEEE Press, 2008. 7. A. Ankolekar et al., "The Two Cultures: Mashing up Web 2.0 and the Semantic Web," Proc. Int'l Conf. World Wide Web, ACM Press, 2007, pp. 825­834. 8. K. Gomadam et al., "A Faceted Classification-Based Approach to Search and Rank Web APIs," to appear in Proc. IEEE Int'l Conf. Web Services, IEEE Press, 2008.
Djamal Benslimane is a full professor of computer science at Lyon University, France, and a member of the LIRIS (Laboratoire d'InfoRmatique en Image et Système d'information) research laboratory. He has a PhD in computer science from Blaise Pascal University. Con tact him at djamal.benslimane@liris.cnrs.fr; www710. univ-lyon1.fr/~dbenslim/.
Schahram Dustdar is a full professor of computer science with a focus on Internet technologies heading the D istributed Systems Group at the Vienna University of Technology. He is also director of the Vita Lab. Contact him at dustdar@infosys.tuwien.ac.at; www.infosys. tuwien.ac.at/staff/sd/.
Amit Sheth is the LexisNexis Ohio Eminent Scholar and the director of the Kno.e.sis Center at Wright State Univer sity. He is a fellow of the IEEE. Contact him via http:// knoesis.wright.edu/amit.

SEPTEMBER/OCTOBER 2008

15

