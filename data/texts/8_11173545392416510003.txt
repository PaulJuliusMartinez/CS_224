Tutorial 5: Programming Graphics Hardware

Introduction to
Introduction to

the Hardware Graphics Pipeline
the Hardware Graphics Pipeline

Cyril Zeller

Overview of the Tutorial: Morning

8:30

9:30

10:15
10:45

Introduction to the Hardware Graphics Pipeline
Cyril Zeller

Controlling the GPU from the CPU: the 3D API 
Cyril Zeller
Break
Programming the GPU: High-level Shading Languages
Randy Fernando

12:00

Lunch

Tutorial 5: Programming Graphics Hardware

Overview of the Tutorial: Afternoon

12:00
14:00

14:45

15:45
16:15

Lunch
Optimizing the Graphics Pipeline
Matthias Wloka
Advanced Rendering Techniques
Matthias Wloka

Break
General-Purpose Computation Using Graphics Hardware
Mark Harris

17:30

End

Overview

Concepts:

Real-time rendering
Hardware graphics pipeline

Evolution of the PC hardware graphics pipeline:

1995-1998: Texture mapping and z-buffer
1998: Multitexturing
1999-2000: Transform and lighting
2001: Programmable vertex shader
2002-2003: Programmable pixel shader
2004: Shader model 3.0 and 64-bit color support

PC graphics software architecture
Performance numbers

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

Real-Time Rendering

Hardware Graphics Pipeline

Graphics hardware enables real-time rendering
Real-time means display rate at more than 10 images per second

Application

Stage

3D Triangles

Geometry

Stage

2D Triangles

Rasterization

Stage

Pixels

3D Scene =
Collection of

3D primitives (triangles, lines, points)

Image =

Array of pixels

For each

triangle vertex:

Transform

3D position

into

screen position

Compute

attributes

For each
triangle:

Rasterize
triangle

Interpolate
vertex attributes
across triangle

Shade
pixels

Resolve
visibility

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

1

PC Architecture

1995-1998: Texture Mapping and Z-Buffer

Motherboard

Central Processor Unit (CPU)

System Memory

Bus Port (PCI, AGP, PCIe)

Video Memory

Graphics Processor Unit (GPU)

Video Board

CPU
Application / Geometry Stage

GPU

Rasterization Stage

Rasterizer

Texture

Unit

Raster

Operations

Unit

2D Triangles

Textures

Bus
(PCI)

2D Triangles

Textures

Frame
Buffer

System Memory

Video Memory
PCI: Peripheral Component Interconnect
3dfx’s Voodoo

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

Texture Mapping

Texture Mapping: Texture Coordinates Interpolation

Triangle Mesh

textured with

Base Texture

Screen Space

Texture Space

+

=

x

y

(x0, y0)

(x1, y1)

(x, y)

u

v

(u1, v1)

(x2, y2)

(u0, v0)

(u, v)

(u2, v2)

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

Texture Mapping: Perspective-Correct Interpolation

Texture Mapping: Magnification

Screen Space

Texture Space

x

y

u

v

Perspective-Incorrect

Perspective-Correct

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

or

Nearest-Point Sampling

Bilinear Filtering

2

Texture Mapping: Minification

Texture Mapping: Mipmapping

Screen Space

Texture Space

x

y

u

v

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

or

Bilinear Filtering

Trilinear Filtering

Texture Mapping: Anisotropic Filtering

Texture Mapping: Addressing Modes

or

Bilinear Filtering

Trilinear Filtering

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

Wrap

Mirror

Texture Mapping: Addressing Modes

Raster Operations Unit (ROP)

Rasterizer

Texture

Unit

Fragments

Scissor Test

Raster

Operations

Unit

stencil buffer value

at (x, y)

tested against
reference value

Clamp

Border

Fragment

Screen Position (x, y)

Alpha Value a

Depth z

Color (r, g, b)

tested against

scissor rectangle

tested against
reference value

tested against

z-buffer value at (x, y)

(visibility test)

blended with

color buffer value at (x, y):
Ksrc * Colorsrc + Kdst * Colorsrc

(src = fragment
dst = color buffer)

Alpha Test

Frame Buffer

Stencil Test

Stencil Buffer

Z Test

Alpha Blending

Z-Buffer

Color Buffer

Pixels

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

3

1998: Multitexturing

CPU
Application / Geometry Stage

GPU

Rasterization Stage

Rasterizer

Multitexture

Unit

Raster

Operations

Unit

2D Triangles

Textures

Bus
(AGP)

2D Triangles

Textures

Frame
Buffer

System Memory

Video Memory

AGP: Accelerated Graphics Port
NVIDIA’s TNT, ATI’s Rage

AGP
PCI uses a parallel connection
AGP uses a serial connection

→ Less pins, simpler protocol → Cheaper, more scalable

PCI uses a shared-bus protocol
AGP uses a point-to-point protocol

→ Bandwidth is not shared among devices

AGP uses a dedicated system memory called AGP memory or 
non-local video memory

The GPU can lookup textures that resides in AGP memory

Bandwidth: AGP = 2 x PCI (AGP2x = 2 x AGP, etc.)

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

Multitexturing

Base Texture

modulated by

Light Map

X

=

1999-2000: Transform and Lighting

CPU
Application
Stage

GPU         “Fixed Function Pipeline”
Geometry Stage

Rasterization Stage

Transform

and

Lighting

Unit

Rasterizer

Register
Combiner

Texture

Unit

Textures

Raster

Operations

Unit

Frame
Buffer

from UT2004 (c)
Epic Games Inc.

Used with permission

3D Triangles

Textures

System
Memory

Bus
(AGP)

3D Triangles

Video Memory

Register Combiner: Offers many more texture/color combinations
NVIDIA’s GeForce 256 and GeForce2, ATI’s Radeon 7500, S3’s Savage3D

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

Transform and Lighting Unit (TnL)

Transform and Lighting Unit

Transform

Model

or

Object
Space

Lighting

World
Matrix

World
Space

View
Matrix

Model-View

Matrix

Camera

or
Eye
Space

Projection

Matrix

Projection

or
Clip
Space

Perspective

Division

and

Viewport
Matrix

Screen

or

Window
Space

Material Properties

Light Properties

Vertex Color

Vertex

Diffuse and Specular Color

Bump Mapping
Bump mapping is about fetching the normal from a texture (called a 
normal map) instead of using the interpolated normal to compute 
lighting at a given pixel

Diffuse light without bump

Diffuse light with bumps

Normal Map

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

4

Cube Texture Mapping

Projective Texture Mapping

Cubemap
(covering

the six faces
of a cube)

z

y

(x,y,z)
x

Environment Mapping
(the reflection vector

is used to lookup

the cubemap)

Projected Texture

(x, y, z, w)

(x/w, y/w)

Texture Projection

Cubemap lookup

(with direction (x, y, z))

Tutorial 5: Programming Graphics Hardware

Projective Texture lookup

Tutorial 5: Programming Graphics Hardware

2001: Programmable Vertex Shader

CPU
Application
Stage

GPU
Geometry Stage

Rasterization Stage

Vertex Shader
(no flow control)

Rasterizer
(with Z-Cull)

Register
Combiner

Raster

Operations

Unit

Vertex Shader
A programming processor for any per-vertex computation

void VertexShader(

// Input per vertex

in float4 positionInModelSpace,
in float2 textureCoordinates,
in float3 normal,

3D Triangles

Textures

System
Memory

Bus
(AGP)

3D Triangles

Video Memory

Texture
Shader

Textures

Frame
Buffer

Z-Cull: Predicts which fragments will fail the Z test and discards them
Texture Shader: Offers more texture addressing and operations
NVIDIA’s GeForce3 and GeForce4 Ti, ATI’s Radeon 8500

// Input per batch of triangles

uniform float4x4 modelToProjection,
uniform float3 lightDirection,

// Output per vertex

out float4 positionInProjectionSpace,
out float2 textureCoordinatesOutput,
out float3 color

// Vertex transformation
positionInProjectionSpace = mul(modelToProjection, positionInModelSpace);
// Texture coordinates copy
textureCoordinatesOutput = textureCoordinates;
// Vertex color computation
color = dot(lightDirection, normal);

)
{

}

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

Volume Texture Mapping

Hardware Shadow Mapping

Shadow Map Computation

The shadow map contains
the depth z/w of the 3D points visible
from the light’s point of view:

z/w

Spot
light

(x, y, z, w)

(x/w, y/w)

(x,y,z)

z

x

y

Noise Perturbation

Volume Texture

(3D Noise)

Volume Texture lookup
(with position (x, y, z))

Tutorial 5: Programming Graphics Hardware

Shadow Rendering

A 3D point (x, y, z, w) is in shadow if:
z/w < value of shadow map at (x/w, y/w)
A hardware shadow map lookup
returns the value of this comparison
between 0 and 1

shadow

map
value

Spot
light

(x/w, y/w)

(x, y, z, w)

Tutorial 5: Programming Graphics Hardware

5

Antialiasing: Definition

Aliasing: Undesirable visual artifacts due to 
insufficient sampling of:

Primitives (triangles, lines, etc.) → jagged edges
Textures or shaders → pixelation, moiré patterns

Those artifacts are even more noticeable on animated 
images.
Antialiasing: Method to reduce aliasing

Texture antialiasing is largely handled by proper 
mipmapping and anisotropic filtering
Shader antialiasing can be tricky (especially with 
conditionals)

Antialiasing: Supersampling and Multisampling
Supersampling:
Compute color and Z at 
higher resolution and 
display averaged color to 
smooth out the visual 
artifacts

Pixel Center

Sample

Multisampling:
Same thing except only Z 
is computed at higher 
resolution

Multisampling performs 
antialiasing on primitive 
edges only

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

2002-2003: Programmable Pixel Shader

CPU
Application
Stage

GPU
Geometry Stage

Vertex Shader
(static and dynamic 

flow control)

Rasterization Stage

Rasterizer
(with Z-Cull)

Texture

Unit

Pixel Shader

(static

flow control only)

Raster

Operations

Unit

3D Triangles

Textures

System
Memory

Bus
(AGP)

3D Triangles

Textures

Frame
Buffer

Video Memory

MRT: Multiple Render Target
NVIDIA’s GeForce FX, ATI’s Radeon 9600 to 9800

Pixel Shader
A programming processor for any per-pixel computation

void PixelShader(

// Input per pixel

in float2 textureCoordinates,
in float3 normal,

// Input per batch of triangles

uniform sampler2D baseTexture,
uniform float3 lightDirection,

// Output per pixel

out float3 color

// Texture lookup
float3 baseColor = tex2D(baseTexture, textureCoordinates);
// Light computation
float light = dot(lightDirection, normal);
// Pixel color computation
color = baseColor * light;

)
{

}

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

Shader: Static vs. Dynamic Flow Control

2004: Shader Model 3.0 and 64-Bit Color Support

void Shader(

...

// Input per vertex or per pixel

in float3 normal,

Static Flow Control

(condition varies

per batch of triangles)

Dynamic Flow Control

(condition varies
per vertex or pixel)

)
{

}

// Input per batch of triangles

uniform float3 lightDirection,
uniform bool computeLight,

...

...
if (computeLight) {

...
if (dot(lightDirection, normal)) {
}
...

...

}
...

CPU
Application
Stage

GPU
Geometry Stage

Vertex Shader
(static and dynamic 

flow control)

Rasterization Stage

Rasterizer
(with Z-Cull)

Texture

Unit

Pixel Shader
(static and dynamic 

flow control)

64-Bit
Color

Raster

Operations

Unit

3D Triangles

Textures

System
Memory

Bus
(PCIe)

3D Triangles

Textures

Video Memory

Frame
Buffer

PCIe: Peripheral Component Interconnect Express
NVIDIA’s GeForce 6800

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

6

PCIe

Like AGP:

Uses a serial connection → Cheap, scalable
Uses a point-to-point protocol → No shared bandwidth

Unlike AGP:

General-purpose (not only for graphics)
Dual-channels: Bandwidth is available in both direction

Bandwidth: PCIe = 2 x AGPx8

Shader Model 3.0

Shader Model 3.0 means:

Longer shaders → More complex shading
Pixel shader:

Dynamic flow control → Better performance
Derivative instructions → Shader antialiasing
Support for 32-bit floating-point precision → Fewer artifacts
Face register → Faster two-sided lighting

Vertex shader:

Texture access → Simulation on GPU, displacement mapping

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

64-Bit Color Support
64-bit color means one 16-bit floating-point value per 
channel (R, G, B, A)

Alpha blending works with 64-bit color buffer
(as opposed to 32-bit fixed-point color buffer only)
Texture filtering works with 64-bit textures
(as opposed to 32-bit fixed-point textures only)

Applications:

High-precision image compositing
High dynamic range imagery

Tutorial 5: Programming Graphics Hardware

High Dynamic Range Imagery

The dynamic range of a scene is the ratio of the highest 
to the lowest luminance
Real-life scenes can have high dynamic ranges of 
several millions
Display and print devices have a low dynamic range of 
around 100
Tone mapping is the process of displaying high dynamic 
range images on those low dynamic range devices
High dynamic range images use floating-point colors
OpenEXR is a high dynamic range image format that is 
compatible with NVIDIA’s 64-bit color format

Tutorial 5: Programming Graphics Hardware

Real-Time Tone Mapping

PC Graphics Software Architecture

The image is entirely computed in 64-bit color 
and tone-mapped for display

CPU

Application

3D API

(OpenGL or DirectX)

Driver

System Memory

GPU

Vertex 
Program

Pixel

Program

Vertex 
Shader

Pixel 
Shader

Video Memory

BUS

Commands

Programs

Geometry
(triangles,
vertices,
normals,

etc...)

Textures

From low to high exposure image of the same scene

The application, 3D API and driver are written in C or C++
The vertex and pixel programs are written in a high-level shading language
(Cg, DirectX HLSL, OpenGL Shading Language)
Pushbuffer: Contains the commands to be executed on the GPU

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

7

Evolution of Performance

The Future

10 000

1000

100

10

1995

1996

1997

1998

1999

2000

2001

2002

2003

2004

PCI

(133 MB/s)

4 MB

OpenGL 1.1

AGP

AGP2x

AGP4x

(266 MB/s)

(533 MB/s)

(1.06 GB/s)

AGP8x

(2.1 GB/s)

PCIe

(4 GB/s)

32 MB

64 MB

128 MB

256 MB

512 MB

OpenGL 1.2

DirectX 6

DirectX 7

DirectX 8
OpenGL 1.3

OpenGL 1.4

DirectX 9
OpenGL 1.5

Mpixels/s

Mvertices/s

Mtransistors

Unified general programming model at primitive, 
vertex and pixel levels
Scary amounts of:

Floating point horsepower
Video memory
Bandwidth between system and video memory

Lower chip costs and power requirements to make 
3D graphics hardware ubiquitous:

Automotive (gaming, navigation, heads-up displays)
Home (remotes, media center, automation)
Mobile (PDAs, cell phones)

Tutorial 5: Programming Graphics Hardware

Tutorial 5: Programming Graphics Hardware

More Information

www.realtimerendering.com
developer.nvidia.com

Questions: czeller@nvidia.com

Tutorial 5: Programming Graphics Hardware

8

