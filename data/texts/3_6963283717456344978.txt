Matrix Exponentiated Gradient Updates for On-line Learning and Bregman Projection
Koji Tsuda, Gunnar Ra¨tsch and Manfred K. Warmuth§ Max Planck Institute for Biological Cybernetics Spemannstr. 38, 72076 Tu¨bingen, Germany
AIST CBRC, 2-43 Aomi, Koto-ku, Tokyo, 135-0064, Japan Fraunhofer FIRST, Kekule´str. 7, 12489 Berlin, Germany §University of California at Santa Cruz
{koji.tsuda,gunnar.raetsch}@tuebingen.mpg.de, manfred@cse.ucsc.edu
Abstract
We address the problem of learning a symmetric positive definite matrix. The central issue is to design parameter updates that preserve positive definiteness. Our updates are motivated with the von Neumann divergence. Rather than treating the most general case, we focus on two key applications that exemplify our methods: On-line learning with a simple square loss and finding a symmetric positive definite matrix subject to symmetric linear constraints. The updates generalize the Exponentiated Gradient (EG) update and AdaBoost, respectively: the parameter is now a symmetric positive definite matrix of trace one instead of a probability vector (which in this context is a diagonal positive definite matrix with trace one). The generalized updates use matrix logarithms and exponentials to preserve positive definiteness. Most importantly, we show how the analysis of each algorithm generalizes to the non-diagonal case. We apply both new algorithms, called the Matrix Exponentiated Gradient (MEG) update and DefiniteBoost, to learn a kernel matrix from distance measurements.
1 Introduction
Most learning algorithms have been developed to learn a vector of parameters from data. However, an increasing number of papers are now dealing with more structured parameters. More specifically, when learning a similarity or a distance function among objects, the parameters are defined as a symmetric positive definite matrix that serves as a kernel (e.g. [14, 11, 13]). Learning is typically formulated as a parameter updating procedure to optimize a loss function. The gradient descent update [6] is one of the most commonly used algorithms, but it is not appropriate when the parameters form a positive definite matrix, because the updated parameter is not necessarily positive definite. Xing et al. [14] solved this problem by always correcting the updated matrix to be positive. However no bound has been proven for this update-and-correction approach. In this paper, we introduce the Matrix Exponentiated Gradient update which works as follows: First, the matrix logarithm of the current parameter matrix is computed. Then a step is taken in the direction of the steepest descent. Finally, the parameter matrix is updated to the exponential of the modified log-matrix. Our update preserves symmetry and positive definiteness because the matrix exponential maps any symmetric matrix to a positive definite matrix.

Bregman divergences play a central role in the motivation and the analysis of on-line learning algorithms [5]. A learning problem is essentially defined by a loss function, and a divergence that measures the discrepancy between parameters. More precisely, the updates are motivated by minimizing the sum of the loss function and the Bregman divergence, where the loss function is multiplied by a positive learning rate. Different divergences lead to radically different updates [6]. For example, the gradient descent is derived from the squared Euclidean distance, and the exponentiated gradient from the Kullback-Leibler divergence. We use the von Neumann divergence (also called quantum relative entropy) for measuring the discrepancy between two positive definite matrices [8]. We derive a new Matrix Exponentiated Gradient update from this divergence (which is a Bregman divergence for positive definite matrices). Finally we prove relative loss bounds using the von Neumann divergence as a measure of progress.
Also the following related key problem has received a lot of attention recently [14, 11, 13]: Find a symmetric positive definite matrix that satisfies a number of symmetric linear inequality constraints. The new DefiniteBoost algorithm greedily chooses the most violated constraint and performs an approximated Bregman projection. In the diagonal case, we recover AdaBoost [9]. We also show how the convergence proof of AdaBoost generalizes to the non-diagonal case.

2 von Neumann Divergence or Quantum Relative Entropy

If F is a real convex differentiable function on the parameter domain (symmetric d × d positive definite matrices) and f (W) := F(W), then the Bregman divergence between
two parameters W and W is defined as

F(W, W) = F(W) - F(W) - tr[(W - W)f (W)].
When choosing F(W) = tr(W log W - W), then f (W) = log W and the corresponding Bregman divergence becomes the von Neumann divergence [8]:

F(W, W) = tr(W log W - W log W - W + W).

(1)

In this paper, we are primarily interested in the normalized case (when tr(W) = 1). In this case, the positive symmetric definite matrices are related to density matrices commonly

used in Statistical Physics and the divergence simplifies to F(W, W) = tr(W log W - W log W).

If W = i ivivi is our notation for the eigenvalue decomposition, then we can rewrite the normalized divergence as
F(W, W) = ~i ln ~i + ~i ln j(v~i vj)2.
i i,j
So this divergence quantifies the difference in the eigenvalues as well as the eigenvectors.

3 On-line Learning
In this section, we present a natural extension of the Exponentiated Gradient (EG) update [6] to an update for symmetric positive definite matrices.
At the t-th trial, the algorithm receives a symmetric instance matrix Xt  Rd×d. It then produces a prediction y^t = tr(WtXt) based on the algorithm's current symmetric positive definite parameter matrix Wt. Finally it incurs for instance1 a quadratic loss (y^t - yt)2,
1For the sake of simplicity, we use the simple quadratic loss: Lt(W) = (tr(XtW) - yt)2. For the general update, the gradient Lt(Wt) is exponentiated in the update (4) and this gradient must be symmetric. Following [5], more general loss functions (based on Bregman divergences) are amenable to our techniques.

and updates its parameter matrix Wt. In the update we aim to solve the following problem:

Wt+1 = argminW F(W, Wt) + (tr(WXt) - yt)2 ,

(2)

where the convex function F defines the Bregman divergence. Setting the derivative with

respect to W to zero, we have

f (Wt+1) - f (Wt) + [(tr(Wt+1Xt) - yt)2] = 0.

(3)

The update rule is derived by solving (3) with respect to Wt+1, but it is not solvable in closed form. A common way to avoid this problem is to approximate tr(Wt+1Xt) by tr(WtXt) [5]. Then, we have the following update:

Wt+1 = f -1(f (Wt) - 2(y^t - yt)Xt).

In our case, F(W) = tr(W log W - W) and thus f (W) = log W and f -1(W) = exp W. We also augment (2) with the constraint tr(W) = 1, leading to the following
Matrix Exponential Gradient (MEG) Update:

Wt+1

=

1 Zt

exp(log Wt

-

2(y^t

-

yt)Xt),

(4)

where the normalization factor Zt is tr[exp(log Wt - 2(y^t - yt)Xt)]. Note that in the above update, the exponent log Wt - 2(y^t - yt)Xt is an arbitrary symmetric matrix and the matrix exponential converts this matrix back into a symmetric positive definite matrix.
A numerically stable version of the MEG update is given in Section 3.2.

3.1 Relative Loss Bounds

We now begin with the definitions needed for the relative loss bounds. Let S =

(X1, y1), . . . , (XT , yT ) denote a sequence of examples, where the instance matrices Xt 

Rd×d are symmetric and the labels yt  R. For any symmetric positive semi-definite ma-

trix U with tr(U) = 1, define its total loss as LU(S) =

T t=1

(tr(UXt

)

-

yt

)2

.

The

total

loss of the on-line algorithm is LMEG(S) = Tt=1(tr(WtXt) - yt)2. We prove a bound on the relative loss LMEG(S) - LU(S) that holds for any U. The proof generalizes a sim-

ilar bound for the Exponentiated Gradient update (Lemmas 5.8 and 5.9 of [6]). The relative

loss bound is derived in two steps: Lemma 3.1 bounds the relative loss for an individual

trial and Lemma 3.2 for a whole sequence (Proofs are given in the full paper).

Lemma 3.1 Let Wt be any symmetric positive definite matrix. Let Xt be any symmetric matrix whose smallest and largest eigenvalues satisfy max - min  r. Assume Wt+1 is produced from Wt by the MEG update and let U be any symmetric positive semi-definite matrix. Then for any constants a and b such that 0 < a  2b/(2 + r2b) and any learning rate  = 2b/(2 + r2b), we have

a(yt - tr(WtXt))2 - b(yt - tr(UXt))2  (U, Wt) - (U, Wt+1)

(5)

In the proof, we use the Golden-Thompson inequality [3], i.e., tr[exp(A + B)]  tr[exp(A) exp(B)] for symmetric matrices A and B. We also needed to prove the following generalization of Jensen's inequality to matrices: exp(1A + 2(I - A))  exp(1)A + exp(2)(I - A) for finite 1, 2  R and any symmetric matrix A with 0 < A  I. These two key inequalities will also be essential for the analysis of Definite-
Boost in the next section.

Lemma 3.2 Let W1 and U be arbitrary symmetric positive definite initial and comparison matrices, respectively. Then for any c such that  = 2c/(r2(2 + c)),

LMEG(S) 

1

+

c 2

LU(S) +

1 2

+

1 c

r2(U, W1).

(6)

Proof For the maximum tightness of (5), a should be chosen as a =  = 2b/(2 + r2b). Let b = c/r2, and thus a = 2c/(r2(2 + c)). Then (5) is rewritten as

2c 2+

c (yt

-

tr(WtXt))2

-

c(yt

-

tr(UXt))2



r2((U,

Wt)

-

(U,

Wt+1))

Adding the bounds for t = 1, · · · , T , we get

2

2c +

c

LM E G (S )

-

cLU(S)



r2((U,

W1)

-

(U,

Wt+1))



r2(U,

W1),

which is equivalent to (6).

Assuming LU(S r 2dmax/ max.

) Then

max and we have

(U, W1)  dmax, thebound (6) is LMEG(S) - LU(S)  r 2 maxdmax

tightest when c =

+

r2 2

(U, W1).

3.2 Numerically stable MEG update

The MEG update is numerically unstable when the eigenvalues of Wt are around zero. However we can "unwrap" Wt+1 as follows:

Wt+1

=

1 Z~t

exp(ctI + log W1

-

2

t
(y^s
s=1

- ys)Xs),

(7)

where the constant Z~t normalizes the trace of Wt+1 to one. As long as the eigen values of W1 are not too small then the computation of log Wt is stable. Note that the update is independent of the choice of ct  R. We incrementally maintain an eigenvalue decomposition of the matrix in the exponent (O(n3) per iteration):

t
VttVtT = ctI + log W1 - 2 (y^s - ys)Xs),
s=1
where the constant ct is chosen so that the maximum eigenvalue of the above is zero. Now Wt+1 = Vt exp(t)VtT /tr(exp(t)).

4 Bregman Projection and DefiniteBoost
In this section, we address the following Bregman projection problem2
W = argminW F (W, W1), tr(W) = 1, tr(WCj )  0, for j = 1, . . . , n, (8)
where the symmetric positive definite matrix W1 of trace one is the initial parameter matrix, and C1, . . . , Cn are arbitrary symmetric matrices. Prior knowledge about W is encoded in the constraints, and the matrix closest to W1 is chosen among the matrices satisfying all constraints. Tsuda and Noble [13] employed this approach for learning a kernel matrix among graph nodes, and this method can be potentially applied to learn a kernel matrix in other settings (e.g. [14, 11]).
The problem (8) is a projection of W1 to the intersection of convex regions defined by the constraints. It is well known that the Bregman projection into the intersection of convex regions can be solved by sequential projections to each region [1]. In the original papers only asymptotic convergence was shown. More recently a connection [4, 7] was made to the AdaBoost algorithm which has an improved convergence analysis [2, 9]. We generalize the latter algorithm and its analysis to symmetric positive definite matrices and call the new algorithm DefiniteBoost. As in the original setting, only approximate projections (Figure 1) are required to show fast convergence.

2Note that if  is large then the on-line update (2) becomes a Bregman projection subject to a single equality constraint tr(WXt) = yt.

Approximate Projection

Exact Projection

Figure 1: In (exact) Bregman projections, the intersection of convex sets (i.e., two lines here) is found by iterating projections to each set. We project only approximately, so the projected point does not satisfy the current constraint. Nevertheless, global convergence to the optimal solution is guaranteed via our proofs.

Before presenting the algorithm, let us derive the dual problem of (8) by means of Lagrange

multipliers ,





n

 = argmin log tr exp(log W1 - jCj) , j  0.

(9)

j=1

See [13] for a detailed derivation of the dual problem. When (8) is feasible, the opti-

mal solution is described as W

=

1 Z(  )

exp(log

W1

-

n j=1

jCj

),

where

Z(  )

=

tr[exp(log W1 -

n j=1

j

Cj

)].

4.1 Exact Bregman Projections

First, let us present the exact Bregman projection algorithm to solve (8). We start from
the initial parameter W1. At the t-th step, the most unsatisfied constraint is chosen, jt = argmaxj=1,··· ,n tr(WtCj). Let us use Ct as the short notation for Cjt . Then, the following Bregman projection with respect to the chosen constraint is solved.

Wt+1 = argminW (W, Wt), tr(W) = 1, tr(WCt)  0. By means of a Lagrange multiplier , the dual problem is described as

(10)

t = argmin tr[exp(log Wt - Ct)],   0.

(11)

Using the solution of the dual problem, Wt is updated as

Wt+1

=

1 Zt(t)

exp(log Wt

- tCt)

(12)

where the normalization factor is Zt(t) = tr[exp(log Wt - tCt)]. Note that we can use the same numerically stable update as in the previous section.

4.2 Approximate Bregman Projections

The solution of (11) cannot be obtained in closed form. However, one can use the following approximate solution:

t

=

tmax

1 - mt in

log

1 + rt/mt ax 1 + rt/mt in

,

(13)

when the eigenvalues of Ct lie in the interval [mt in, mt ax] and rt = tr(WtCt). Since the most unsatisfied constraint is chosen, rt  0 and thus t  0. Although the projection is done only approximately,3 the convergence of the dual objective (9) can be shown using the following upper bound.

3The approximate Bregman projection (with t as in (13) can also be motivated as an online algorithm based on an entropic loss and learning rate one (following Section 3 and [4]).

Theorem 4.1 The dual objective (9) is bounded as 
nT
tr exp log W1 - jCj  (rt)

j=1

t=1

where (rt) =

1

-

rt mt ax

tmax mt ax-mt in

1

-

rt mt in

-mt in
.mt ax-tmin

(14)

The dual objective is monotonically decreasing, because (rt)  1. Also, since rt corresponds to the maximum value among all constraint violations {rj}jn=1, we have (rt) = 1 only if rt = 0. Thus the dual objective continues to decrease until all constraints are satisfied.

4.3 Relation to Boosting

When all matrices are diagonal, the DefiniteBoost degenerates to AdaBoost [9]: Let

{xi, yi}id=1 be the training samples, where xi  Rm and yi  {-1, 1}. Let h1(x), . . . , hn(x)  [-1, 1] be the weak hypotheses. For the j-th hypothesis hj(x), let

us define Cj = diag(y1hj(x1), . . . , ydhj(xd)). Since |yhj(x)|  1, tmax / min = ±1 for

any

t.

Setting

W1

=

I/d,

the

dual

objective 

(14)

is

rewritten 

as

1 d

d

exp -yi

n

jhj(xi) ,

i=1 j=1

which is equivalent to the exponential loss function used in AdaBoost. Since Cj and W1

are diagonal, the matrix Wt stays diagonal after the update. If wti = [Wt]ii, the updating

formula (12) becomes the AdaBoost update: wt+1,i = wti exp(-tyiht(xi))/Zt(t). The

approximate solution

of

t

(13)

is

described

as

t

=

1 2

log

1+rt 1-rt

,

where

rt

is

the

weighted

training error of the t-th hypothesis, i.e. rt =

d i=1

wti

yi

ht(xi).

5 Experiments on Learning Kernels

In this section, our technique is applied to learning a kernel matrix from a set of distance measurements. This application is not on-line per se, but it shows nevertheless that the theoretical bounds can be reasonably tight on natural data.

When K is a d × d kernel matrix among d objects, then the Kij characterizes the similarity between objects i and j. In the feature space, Kij corresponds to the inner product between object i and j, and thus the Euclidean distance can be computed from the entries of the
kernel matrix [10]. In some cases, the kernel matrix is not given explicitly, but only a set
of distance measurements is available. The data are represented either as (i) quantitative distance values (e.g., the distance between i and j is 0.75), or (ii) qualitative evaluations (e.g., the distance between i and j is small) [14, 13]. Our task is to obtain a positive definite
kernel matrix which fits well to the given distance data.

On-line kernel learning In the first experiment, we consider the on-line learning scenario in which only one distance example is shown to the learner at each time step. The distance example at time t is described as {at, bt, yt}, which indicates that the squared Euclidean distance between objects at and bt is yt. Let us define a time-developing sequence of kernel matrices as {Wt}Tt=1, and the corresponding points in the feature space as {xti}di=1 (i.e. [Wt]ab = xtaxtb). Then, the total loss incurred by this sequence is
TT
xtat - xtbt 2 - yt 2 = (tr(WtXt) - yt)2,
t=1 t=1

Total Loss Classification Error

1.8 0.45
1.6 0.4 1.4
0.35 1.2
0.3 1
0.25 0.8
0.6 0.2
0.4 0.15

0.2 0.1

0 0 0.5 1 1.5 2 2.5 3

Iterations

x 105

0.05 0 0.5 1 1.5 2 2.5 3

Iterations

x 105

Figure 2: Numerical results of on-line learning. (Left) total loss against the number of iterations. The dashed line shows the loss bound. (Right) classification error of the nearest neighbor classifier using the learned kernel. The dashed line shows the error by the target kernel.

where Xt is a symmetric matrix whose (at, at) and (bt, bt) elements are 0.5, (at, bt) and (bt, at) elements are -0.5, and all the other elements are zero. We consider a controlled experiment in which the distance examples are created from a known target kernel matrix. We used a 52 × 52 kernel matrix among gyrB proteins of bacteria (d = 52). This data
contains three bacteria species (see [12] for details). Each distance example is created
by randomly choosing one element of the target kernel. The initial parameter was set as W1 = I/d. When the comparison matrix U is set to the target matrix, LU (S) = 0 and max = 0, because all the distance examples are derived from the target matrix. Therefore we choose learning rate  = 2, which minimizes the relative loss bound of Lemma 3.2. The total loss of the kernel matrix sequence obtained by the matrix exponential update is
shown in Figure 2 (left). In the plot, we have also shown the relative loss bound. The
bound seems to give a reasonably tight performance guarantee--it is about twice the actual
total loss. To evaluate the learned kernel matrix, the prediction accuracy of bacteria species
by the nearest neighbor classifier is calculated (Figure 2, right), where the 52 proteins are
randomly divided into 50% training and 50% testing data. The value shown in the plot
is the test error averaged over 10 different divisions. It took a large number of iterations ( 2 × 105) for the error rate to converge to the level of the target kernel. In practice one can often increase the learning rate for faster convergence, but here we chose the small rate
suggested by our analysis to check the tightness of the bound.

Kernel learning by Bregman projection Next, let us consider a batch learning sce-
nario where we have a set of qualitative distance evaluations (i.e. inequality constraints). Given n pairs of similar objects {aj, bj}nj=1, the inequality constraints are constructed as xaj - xbj  , j = 1, . . . , n, where  is a predetermined constant. If Xj is defined as in the previous section and Cj = Xj - I, the inequalities are then rewritten as tr(WCj)  0, j = 1, . . . , n. The largest and smallest eigenvalues of any Cj are 1 -  and -, respectively. As in the previous section, distance examples are generated from the target kernel matrix between gyrB proteins. Setting  = 0.2/d, we collected all object pairs whose distance in the feature space is less than  to yield 980 inequalities (n = 980).
Figure 3 (left) shows the convergence of the dual objective function as proven in Theo-
rem 4.1. The convergence was much faster than the previous experiment, because, in the
batch setting, one can choose the most unsatisfied constraint, and optimize the step size as
well. Figure 3 (right) shows the classification error of the nearest neighbor classifier. As
opposed to the previous experiment, the error rate is higher than that of the target kernel
matrix, because substantial amount of information is lost by the conversion to inequality
constraints.

55 0.8 50 0.7 45 0.6 40 0.5

Dual Obj Classification Error

35 0.4

30 0.3

25 0.2

20 0.1

15 0 50 100 150 200 250 300 Iterations

0 0 50 100 150 200 250 300
Iterations

Figure 3: Numerical results of Bregman projection. (Left) convergence of the dual objective function. (Right) classification error of the nearest neighbor classifier using the learned kernel.
6 Conclusion

We motivated and analyzed a new update for symmetric positive matrices using the von Neumann divergence. We showed that the standard bounds for on-line learning and Boosting generalize to the case when the parameters are a symmetric positive definite matrix (of trace one) instead of a probability vector. As in quantum physics, the eigenvalues act as probabilities.

Acknowledgment We would like to thank B. Scho¨lkopf, M. Kawanabe, J. Liao and W.S. Noble for fruitful discussions. M.W. was supported by NSF grant CCR 9821087 and UC Discovery grant LSIT02-10110. K.T. and G.R. gratefully acknowledge partial support from the PASCAL Network of Excellence (EU #506778). Part of this work was done while all three authors were visiting the National ICT Australia in Canberra.

References
[1] L.M. Bregman. Finding the common point of convex sets by the method of successive projections. Dokl. Akad. Nauk SSSR, 165:487­490, 1965.
[2] Y. Freund and R.E. Schapire. A decision-theoretic generalization of on-line learning and an application to boosting. Journal of Computer and System Sciences, 55(1):119­139, 1997.
[3] S. Golden. Lower bounds for the Helmholtz function. Phys. Rev., 137:B1127­B1128, 1965. [4] J. Kivinen and M. K. Warmuth. Boosting as entropy projection. In Proc. 12th Annu. Conference
on Comput. Learning Theory, pages 134­144. ACM Press, New York, NY, 1999. [5] J. Kivinen and M. K. Warmuth. Relative loss bounds for multidimensional regression problems.
Machine Learning, 45(3):301­329, 2001. [6] J. Kivinen and M.K. Warmuth. Exponentiated gradient versus gradient descent for linear pre-
dictors. Information and Computation, 132(1):1­63, 1997. [7] J. Lafferty. Additive models, boosting, and inference for generalized divergences. In Proc. 12th
Annu. Conf. on Comput. Learning Theory, pages 125­133, New York, NY, 1999. ACM Press. [8] M.A. Nielsen and I.L. Chuang. Quantum Computation and Quantum Information. Cambridge
University Press, 2000. [9] R.E. Schapire and Y. Singer. Improved boosting algorithms using confidence-rated predictions.
Machine Learning, 37:297­336, 1999. [10] B. Scho¨lkopf and A. J. Smola. Learning with Kernels. MIT Press, Cambridge, MA, 2002. [11] I.W. Tsang and J.T. Kwok. Distance metric learning with kernels. In Proceedings of the Inter-
national Conference on Artificial Neural Networks (ICANN'03), pages 126­129, 2003. [12] K. Tsuda, S. Akaho, and K. Asai. The em algorithm for kernel matrix completion with auxiliary
data. Journal of Machine Learning Research, 4:67­81, May 2003. [13] K. Tsuda and W.S. Noble. Learning kernels from biological networks by maximizing entropy.
Bioinformatics, 2004. to appear. [14] E.P. Xing, A.Y. Ng, M.I. Jordan, and S. Russell. Distance metric learning with application to
clustering with side-information. In S. Thrun S. Becker and K. Obermayer, editors, Advances in Neural Information Processing Systems 15, pages 505­512. MIT Press, Cambridge, MA, 2003.

