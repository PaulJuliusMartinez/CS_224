Strategies for Memory Accounting of Cooperating Pi-Calculus Processes
Matej Kos´ik and Jir´i Safar´ik kosik@fiit.stuba.sk
Faculty of Informatics and Information Technology Slovak University of Technology in Bratislava

November 15, 2008

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 1 / 23

Contents
1 Context 2 Indication of the problem(s) I am trying to solve 3 Indication of the solution

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 2 / 23

Topics of interest

Randy Pausch's Last Lecture: "Fundamentals, fundamentals, fundamentals. You've got to get fundamentals down because otherwise the fancy stuff isn't going to work."

Properties: robustness how not to trade security for functionality (and vice versa)
Techniques: microkernel architecture [4] object-capability programming languages [2, 3]
Applications: kernel-space (mainly) user-space (also)

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 3 / 23

Minix--operating system designed as a microkernel

Layer 4

Init

User process

User process

User process

···

Process File

Info Network

3 manager system server

server

···

Disk TTY Ethernet 2 driver driver driver

···

System Clock

1 Kernel

task task

User processes
Server processes
Device drivers
Kernel

User mode
Kernel mode

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 4 / 23

Backwater--kernel written in an object-capability language

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 5 / 23

Two approaches compared

communication primitives TCB size
memory management CPU management

µ-kernel approach
some X LOC
solid solid

object-capability approach
excellent X/10 LOC
missing missing

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 6 / 23

Object-capability security paradigm

the only way how a subject can get a capability on some object is by:

initial conditions

introduction

parenthood

endowment

access control design patterns:

Caretaker

(David D. Redell)

Powerbox !!!

(Mark Miller, Marc Stiegler, . . . )

Membrane

(Mark Miller)

Horton

(Mark Miller)

Security policies here are expressed as programs (algorithms or processes), not as as a tuple of values we can set via some configuration options.

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 7 / 23

Object-capability security paradigm

the only way how a subject can get a capability on some object is by:

initial conditions

introduction

parenthood

endowment

access control design patterns:

Caretaker

(David D. Redell)

Powerbox !!!

(Mark Miller, Marc Stiegler, . . . )

Membrane

(Mark Miller)

Horton

(Mark Miller)

Security policies here are expressed as programs (algorithms or processes), not as as a tuple of values we can set via some configuration options.

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 7 / 23

Contents
1 Context 2 Indication of the problem(s) I am trying to solve 3 Indication of the solution

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 8 / 23

Cancer
def cancer [] = ( cancer![] | cancer![] )
cancer![]

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 9 / 23

Cancer
def cancer [] = ( cancer![] | cancer![] )
( cancer![] | cancer![] )

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 10 / 23

Cancer
def cancer [] = ( cancer![] | cancer![] )
( cancer![] | cancer![] | cancer![] | cancer![] )

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 11 / 23

Cancer
def cancer [] = ( cancer![] | cancer![] )
( cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] )

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 12 / 23

Cancer
def cancer [] = ( cancer![] | cancer![] )
( cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] )

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 13 / 23

Cancer

def cancer [] = ( cancer![] | cancer![] )
( cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] | cancer![] )

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 14 / 23

Cancer
... ... ...

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 15 / 23

Cancer
STOP

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 16 / 23

Contents
1 Context 2 Indication of the problem(s) I am trying to solve 3 Indication of the solution

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 17 / 23

Instead of:

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 18 / 23

we would like to have something like:

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 19 / 23

The plan
enhance original Pict programming language then I decided to define sufficiently interesting subset of the Pict programming language and enhance this subset the chosen subset (I call it Sahara [1]) is based on the -calculus with i/o-types and then add proper new constructs to it

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 20 / 23

How can that be achieved [1]
new syntactic constructs (for domains) update the type system; add new type operators (for specifying ownership policy) update the operational semantics of the language (it should capture changing colors of existing objects and determining color of new objects)

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 21 / 23

References
Matej Kos´ik. Sahara programming language web page, 2007. http://altair.sk/mediawiki/index.php/Sahara, Accessed 23.10.2008. Mark Samuel Miller. Robust Composition: Towards a Unified Approach to Access Control and Concurrency Control. PhD thesis, Johns Hopkins University, Baltimore, Maryland, USA, May 2006. Marc Stiegler. Emily: A high performance language for enabling secure cooperation. In C5, pages 163­169. IEEE Computer Society, 2007. Andrew S. Tanenbaum and Albert S. Woodhull. Operating Systems: Design and Implementation. Pearson Prentice Hall, 2006.

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 22 / 23

OK
Thank you.

Matej Kos´ik and Jir´i Safar´ik (FIIT STU)

Strategies for Memory Accounting . . .

November 15, 2008 23 / 23

