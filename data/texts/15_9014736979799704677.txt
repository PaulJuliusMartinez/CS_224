Embedded Systems Design ­ Scientific Challenges and Work Directions
Brussels, June 18, 2009
Joseph Sifakis VERIMAG Laboratory & ArtistDesign NoE

The Evolution of Computer Science

Scientific Computing ­ Defence Applications

 Convergence between Computing and Telecommunications
 Graphic Interfaces, Mouse
WEB ­ Information Society

Multi-core Systems

1945

1980

1990

2010

1936

1970

Foundations Alan Turing, Kurt Gödel

2000
Embedded Systems: Computing + Physicality  Seamless revolution  95% of chips are embedded

2015

 Information Systems: Commercial Applications
 Integrated circuits

The Internet of Things:
Convergence between Embedded Systems and
Internet

Informatics is a young discipline, driven by exponential growth of components and their applications.

 Embedded Systems

 System Design

 Achieving Correctness

 Research Challenges

 Marry Physicality and Computation

 Encompass Heterogeneity - Components

O  Cope with Complexity - Constructivity

V E

 Cope with Uncertainty ­ Predictability

R

V I

 Embedded Systems Design

E W  Discussion

3

Embedded Systems are Everywhere
Electronic components integrate software and hardware jointly and specifically designed to provide given functionalities, which are often critical.
4

Embedded Systems are Everywhere - Moore's Law

Price of 1 MB of memory

76 000  6 000 

1973

1977

450  1981

120  1984

30  1987

Density doubles every 18 months

4.5  1990

0.46  1995

0.06  0.004 
2000 2005

Embedded Systems are Everywhere

40 chips elsewhere
ATM, cell phone, PDA,

80 chips in home appliances
TV, DVD player, phone, games, washer, dryer, dishwasher, etc.

40 chips at work
printers, scanners, PC, phone systems, etc.

Each person uses about 250 chips
each day

1 billion transistors used per person each day (2008)

70 chips in the car
door opener, ABS, airbag, GPS, radio, engine control, etc.

Embedded systems ­ Trends

Embedded systems break with traditional Computing Systems Engineering. It is hard to jointly meet technical requirements such as:
 Reactivity: responding within known and guaranteed delay Ex : flight controller
 Autonomy: provide continuous service without human intervention Ex : no manual start, optimal power management
 Robustness: guaranteed minimal service in any case Ex : attacks, hardware failures, software execution errors
 Scalability: at runtime or evolutionary growth (linear performance increase with resources) Ex : reconfiguration, scalable services
...and also take into account economic requirements for optimal cost/quality

Technological challenge : Capacity to build systems of guaranteed functionality and quality, at an acceptable cost

7

 Embedded Systems

 System Design

 Achieving Correctness

 Research Challenges

 Marry Physicality and Computation

 Encompass Heterogeneity - Components

O  Cope with Complexity - Constructivity

V E

 Cope with Uncertainty ­ Predictability

R

V I

 Embedded Systems Design

E W  Discussion

8

TODAY

System Design ­ State-of-the Art
We master ­ at a high cost two types of systems which are difficult to integrate:
 Critical systems of low complexity
 Flight controller
 Complex « best effort » systems
 Telecommunication systems
We need  Affordable critical systems Ex : active safety, health, autonomous robotic devices  Successful integration of heterogeneous systems of systems
 Internet of Things  Automated Transport Systems  Smart Grids  « Ambient Intelligence»

TOMORROW

Air Traffic Control ­ the Next Generation Is it ... attainable ?
10

System design
Physics

Computer Science

Theory for building artifacts with predictable behavior

Lack of results allowing constructivity

Suggested by T. Henzinger: T. Henzinger, J. Sifakis "The Embedded Systems Design Challenge" FM06

System Design ­ a long way to go
Design of Large IT systems Designing microprocessors, mobile telecommunication platforms, web application platforms is a risky undertaking, mobilizing hundreds of engineers over several years.
Difficulties  Complexity ­ mainly for building systems by reusing existing components  Requirements are often incomplete, and ambiguous (specified in natural language)  Design approaches  are empirical and based on the expertise and experience of teams  reuse/extend/improve solutions that have proved to be efficient and robust
Consequences  Large IT projects are often over budget, over time, and deliver poor quality.  Of these, 40% fail, 30% partially succeed, 30% succeed.

System Design ­ a long way to go
There is an (increasing) gap between:  Our technological capabilities for treating
and transmitting information  Our know-how in computing systems
engineering
"It has long been my personal view that the separation of practical and theoretical work is artificial and injurious. Much of the practical work done in computing, both in software and in hardware design, is unsound and clumsy because the people who do it have not any clear understanding of the fundamental design principles of their work. Most of the abstract mathematical and theoretical work is sterile because it has no point of contact with real computing. Christopher Strachey (1916-1975)

System design ­ Types of Systems

n

fact

fact(n)

Transformational systems

 Compute a function (must terminate)

thermostat


on,off

room heater

Reactive systems
 Continuously interact with an environment e.g. real-time controllers, protocols, games
 Compute outputs - reactions to inputs depending on their state

Systems must meet given requirements e.g.
 For all integer n the program terminates and delivers fact(n)
 The temperature  is always between 18° and 22°

System Design ­ Requirements
Functional requirements characterize the services ensured for potential users. These are independent of the resources of the execution platform, e.g.:
 The program terminates and computes fact(n)  The temperature is always between 18° and 20°  When train crosses the gate is down  When the lift is moving the door is closed
Extra-functional requirements characterize the quality of the services. These take into account the resources of the execution platform:
 Performance  Throughput is not less than 100 Mb/s (for a network)  Power needed is less than 2mW (for a circuit)  Image quality is optimal (for an encoder)
 Security: Resistance to attacks (for a cryptographic protocol)  Safety: Resistance to failures (for a flight controller)

System design ­ Simplified View
Design is the process of deriving from given requirements, an executable model from which a system can be generated (more or less automatically).

Requirements

The expected behavior of the system to be designed with respect to its potential users
and its environment

Program

Executable model meeting the requirements

SW System composed of HW
HW and SW ­ the HW platform
may be given

System Design ­ Essential Properties
Correctness  Design methodology ensuring correct implementation from a system
model
Productivity  Reuse, separate compilation,  Support for heterogeneous programming models, DSL  Natural expression of data parallelism and functional parallelism
Performance  Optimal use of physical resources
Parsimony  Design choices are only implied by requirements ­ no superfluous
constraints  Use degrees of freedom in the design process, e.g. parallelism or non-
determinism, for choosing the "best" implementation
17

 Embedded Systems

 System Design

 Achieving Correctness

 Research Challenges

 Marry Physicality and Computation

 Encompass Heterogeneity - Components

O  Cope with Complexity - Constructivity

V E

 Cope with Uncertainty ­ Predictability

R

V I

 Embedded Systems Design

E W  Discussion

18

Achieving Correctness
Correctness: a system is correct if it meets its requirements

CorfroercFtBnryeecseosnstruction:
algorithms, architectures

Achieving correctness By Checking

Physical prototypes
e.g. testing

Models
(Virtual SW Prototypes)

Ad hoc models
e.g. SystemC simulation

Formal models ­ VEerxifhicaatuiosntivity

Achieving Correctness

Model

Requirements

Should be:
 faithful e.g. whatever property is satisfied for the model holds for the real system
 generated automatically from system descriptions

Verification Method
YES, NO, DON'T KNOW

Should be:
 consistent e.g. there exists some model satisfying them
 complete e.g. they tightly characterize the system's behavior

 As a rule, for infinite state models all non trivial properties are undecidable e.g. bounded memory
 Intrinsically high complexity for finite state models (state explosion problem)

Achieving Correctness - Models

The meaning of a system (HW, SW, HW/SW) is a model defined as a transition relation on states (valuations of state variables):
reset

x=0 +1 x=1

+1 x=2 +1

+1 x=3
Modulo 4 counter

=18 15 min =22 turnoff =22 45min
ON ON OFF

=18 OFF

turnoff

Thermostat (partial model)

A model is characterized by its set of execution sequences

Achieving Correctness - Requirements Specification

For a given model, requirements are formulas of a temporal logic defined by:  atomic formulas are state predicates e.g. 0x 4, 1822,  f, fg, fg are formulas if f, g are formulas  possible(f), inevitable(f), always(f) are formulas, if f is a formula

Meaning of modalities for a given model with a state s

 s satisfies possible(f) if  sequence

 s satisfies inevitable(f), if  sequence

 s satisfies always(f)

if  sequence

 state s'  state s'  state s'

s' satisfies f s' satisfies f s' satisfies f

s satisfies
s  possible(green)
 inevitable(blue)  always(blackbluegreen)

Achieving Correctness - Requirements Specification

Thermostat · always (18  22) ·   inevitable ()

Lift · always  (door_open  moving) · always (request_for[i]  inevitable (elevator_at[i]) )

forall i

Mutual exclusion · always  (write(a,m)  write(b,m))

Deadlock-freedom

deadlock=not enough resources for allowing the progress of all tasks

· always possible (exec(a))

Starvation-freedom

starvation=the resource allocation policy is not fair

· always inevitable(exec(a))

Factorial · y=n  z=1  always (y=0  z=fact(n)) · y=n  z=1  inevitable (y=0  z=fact(n))

Achieving Correctness - Building Models

For hardware, it is easy to get faithful logical finite state models represented as systems of boolean equations

HW
vx z
y u

semantics

MODEL
v= ... u= .. x= ... y= ... z= xy

Achieving Correctness - Building Models
For software this may be much harder ....

if.... while valid do
if x<0 then z:=x else z:=-x;
while ...

semantics

valid
x<0 x>=0 z:=x z:=-x

valid
SEMANTIC MODEL
abstraction valid

PROGRAM

ABSTRACT MODEL

 valid
b b z:=b z:=  b

Achieving Correctness - Building Models
For mixed Software / Hardware systems:  there are no faithful modeling techniques as we have a poor understanding of how software and the underlying platform interact,  validation by testing physical prototypes or by simulation of ad hoc models.

APPLICATION SW
EXECUTION PLATFORM

Tasks

Command Handlers

Event Handlers

Task Scheduler

Event Scheduler

Sensors Timers Antenna

Achieving Correctness ­ Verification Methods

Deductive verification
 Based on sets of inference rules for reasoning on the structure of the systems
 General and interactive, targeting verification of infinite state systems, assisted by theorem provers
 Frameworks for the development of deductive proofs ex. Coq

Algorithmic verification
 Based on the analysis of global models obtained by flattening system structure e.g. transition systems
 Emphasis on automation rather than generality
 Main representatives:  model checking and  abstract interpretation

Achieving Correctness ­ Algorithmic Verification
on
2 states
off
22 states 23 states
~2300 states

 Embedded Systems

 System Design

 Achieving Correctness

 Research Challenges

 Marry Physicality and Computation

 Encompass Heterogeneity - Components

O  Cope with Complexity - Constructivity

V E

 Cope with Uncertainty ­ Predictability

R

V I

 Embedded Systems Design

E W  Discussion

29

Marry Physicality and Computation

Execution constraints · CPU speed · memory · power · failure rates

Environment constraints
 Performance (deadlines, jitter, throughput)
 Robustness (security, safety, availability)

EMBEDDED SYSTEM

Computing · algorithms · protocols · architectures
30

Marry Physicality and Computation

Execution constraints · CPU speed · memory · power · failure rates
Environment constraints  Performance (deadlines, jitter, throughput)  Robustness (security, safety, availability)

Embedded System Design is
generalized Hardware Design

EMBEDDED SYSTEM

Computing · algorithms · protocols · architectures

31

Marry Physicality and Computation

Execution constraints · CPU speed · memory · power · failure rates
Environment constraints  Performance (deadlines, jitter, throughput)  Robustness (security, safety, availability)

EMBEDDED SYSTEM

Computing · algorithms · protocols · architectures

Embedded System Design is
generalized Control Design
32

Marry Physicality and Computation
Embedded System Design coherently integrates all these.

Execution constraints · CPU speed · memory · power · failure rates

Environment constraints
 Performance (deadlines, jitter, throughput)
 Robustness (security, safety, availability)

EMBEDDED SYSTEM

Computing · algorithms · protocols · architectures

We need to revisit and revise the most basic computing paradigms to include methods from EE and Control

33

Marry Physicality and Computation

Physics Studies the laws governing energy, matter and their relationships Studies a given « reality » Physical systems ­ Analytic models Continuous mathematics
Differential equations Estimation theory robustness Constructivity, Predictability
Mature

Computer Science Studies foundations of information and computation
Studies created universes Computing systems ­ Machines
Discrete mathematics - Logic
Automata, Algorithms and Complexity Theory

Verification, Test

Promising

34

Marry Physicality and Computation

Physical Systems Engineering
Analytic Models
· Component: transfer function · Composition: parallel · Connection: data flow
f1 f2

Computing Systems Engineering
Computational Models
· Component: subroutine · Composition: sequential · Connection: control flow

inst1; inst2 ....... instn; ....

instx; insty; ....... Instz; ....

insta; instb; ....... Inste; ....

35

Marry Physicality and Computation
Matlab/Simulink Model
36

Marry Physicality and Computation
UML Model
(Rational Rose)

 Embedded Systems

 System Design

 Achieving Correctness

 Research Challenges

 Marry Physicality and Computation

 Encompass Heterogeneity - Components

O  Cope with Complexity - Constructivity

V E

 Cope with Uncertainty ­ Predictability

R

V I

 Embedded Systems Design

E W  Discussion

38

Encompass Heterogeneity - Components
Build complex systems by composing components (simpler systems). This confers numerous advantages such as productivity and correctness
 SW Component frameworks:  Coordination languages extensions of programming languages e.g. BPEL, Javaspaces, TSpaces, Concurrent Fortran, NesC  Middleware e.g. Corba, Javabeans, .NET  Software development environments: PCTE, SWbus, Softbench, Eclipse
 System modeling languages: Statecharts, SysML, Matlab/Simulink, AADL, Ptolemy
 Hardware description languages: Verilog, VHDL, SystemC
Heterogeneity: Embedded systems are built from components with different characteristics
 Execution: synchronous and asynchronous components  Interaction: function call, broadcast, rendezvous, monitors  Abstraction levels: hardware, execution platform, application software

Encompass Heterogeneity - Components

Thread-based programming

Actor-based programming

Software Engineering

Systems Engineering

Encompass Heterogeneity - Components
Build a component C satisfying given requirements f, from  C0 a set of atomic components described by their behavior  GL ={gl1, ..., gli, ...} a set of glue operators on components

gl12

gl1 gl2

c1 c'1

c2 c'2

satisfies f

Move from single low-level composition operators e.g. automata-based to families of high-level composition operators e.g. protocols, controllers
We need a unified composition paradigm for describing and analyzing the coordination between components to formulate system designs in terms of tangible, well-founded and organized concepts

 Embedded Systems

 System Design

 Achieving Correctness

 Research Challenges

 Marry Physicality and Computation

 Encompass Heterogeneity - Components

O  Cope with Complexity - Constructivity

V E

 Cope with Uncertainty ­ Predictability

R

V I

 Embedded Systems Design

E W  Discussion

42

Cope with Complexity ­ Constructivity
Today, a posteriori verification at high development costs limited to medium complexity systems Tomorrow, correct-by-construction results should advantageously take into account architectures and their features.
There is a large space to be explored, between full constructivity and a posteriori verification. Develop correct-by-construction results
 For particular  architectures (e.g. client-server, star-like, time triggered)  programming models (e.g. synchronous, data-flow)  execution models (e.g. event triggered preemptable tasks)
 For specific classes of properties such as deadlock-freedom, mutual exclusion, timeliness
43

Constructivity ­ Compositionality

Build correct systems from correct components: rules for proving global properties from properties of individual components

gl


ci sat Pi implies gl g~l

c1 gl cn sat g~l(P1, ..,Pn)

We need compositionality results for the preservation of progress properties such as deadlock-freedom and liveness as well as extra-functional properties

Constructivity ­ Compositionality

Build correct systems from correct components: rules for proving global properties from properties of individual components

gl


ci sat Pi implies gl g~l

c1 gl cn sat g~l(P1, ..,Pn)

We need compositionality results for the preservation of progress properties such as deadlock-freedom and liveness as well as extra-functional properties

Constructivity ­ Composability

Essential properties of components are preserved when they are integrated

gl


gl sat P and
c1 cn

gl' sat P'
c1 cn

implies

gl  gl'

sat PP'

c1 cn

Property stability phenomena are poorly understood. We need composability results e.g. non interaction of features in middleware, composability of scheduling algorithms, of Web services, of aspects

Constructivity ­ Composability

Essential properties of components are preserved when they are integrated

gl

gl sat P and
c1 cn

gl' sat P'
c1 cn

implies

gl  gl'

sat PP'

c1 cn

Property stability phenomena are poorly understood. We need composability results e.g. non interaction of features in middleware, composability of scheduling algorithms, of Web services, of aspects

Cope with Complexity ­ Compositionality

 Embedded Systems

 System Design

 Achieving Correctness

 Research Challenges

 Marry Physicality and Computation

 Encompass Heterogeneity ­ Components

O  Cope with Complexity ­ Constructivity

V E

 Cope with Uncertainty ­ Predictability

R

V I

 Embedded Systems Design

E W  Discussion

49

Cope with Uncertainty - Predictability
Systems must provide a service meeting given requirements in interaction with uncertain and unpredictable environments
Uncertainty is characterized as the difference between average and worst-case system behavior. It is drastically increasing uncertainty, due to:
 Interaction with complex, non-deterministic, possibly hostile external environments
 Execution platforms with sophisticated HW/SW architectures (layering, caches, speculative execution, ...)
Two types of uncertainty:  Intrinsic uncertainty, due to non determinism or abstraction hiding details at
execution level;  Estimated uncertainty, due to approximations necessary for coping with non
computability of exact bounds.

Cope with Uncertainty - Predictability

Distribution of ET

Lower Bound

BCET

WCET

Upper Bound

Execution times Possible ET Estimated ET

For simple operations WCET may be 300  BCET

Cope with Uncertainty - Predictability

Increasing uncertainty gives rise to 2 diverging design paradigms

BAD STATES

ERROR STATES


 

 

Critical systems engineering based on worst-case analysis and static resource reservation e.g. hard realtime approaches, massive redundancy

Best effort engineering based on average case analysis e.g. soft real-time for optimization of speed, memory, bandwidth, power

Cope with Uncertainty ­ Predictability
The separation between critical and best effort engineering implies increasing costs and reduced hardware reliability, e.g. increasing number of ECUs in cars.
We are moving from federated to integrated architectures (both critical and non critical functions on one chip) while striving for predictability by
 Reducing intrinsic and estimated uncertainty through
 Simplification of architectures, predictable cache replacement policies
 Determinization of the observable behavior e.g. time triggered systems
 Developing adaptive control techniques combining the two paradigms:
 Satisfaction of critical properties
 Efficiency by optimal use of the globally available resources (processor, memory, power).

Cope with Uncertainty: Adaptive System
Adaptive Controller
Learning

Strategies for Managing Objectives

choices

Tactics for achieving objectives
Controlled System

states

Cope with Uncertainty: Adaptive System
Learning
Movie would have been better ...
Managing Conflicting Objectives
Go to: 1) Stadium 2) Movie 3) Restaurant
Planning
55

Cope with Uncertainty ­ Adaptive System
Challenge: Develop holistic adaptive design techniques combining the two paradigms: satisfaction of critical properties and efficiency by optimal use of the globally available resources (processor, memory, power).
56

 Embedded Systems

 System Design

 Achieving Correctness

 Research Challenges

 Marry Physicality and Computation

 Encompass Heterogeneity - Components

O  Cope with Complexity - Constructivity

V E

 Cope with Uncertainty ­ Predictability

R

V I

 Embedded Systems Design

E W  Discussion

57

Model-based Design - Principle

Programming Model
Compiler

Extension of an existing language with concepts and primitives for concurrency and resource management
Implements a mapping from the PM to the EM - correctness-by construction

Execution Model Execution Platform

Abstract machine encompassing mechanisms for efficient and dependable execution

Model-based Design ­ Synchronous Computation

Programming Model
Compiler

Synchronous programming languages such as Lustre, Matlab/Simulink
Theory for checking correctness of the code generation process e.g. confluence and deadlockfreedom

Execution Model Execution Infrastructure

Monolithic execution model e.g. single task

Model-based Design ­ Event-driven Computation

Programming Model
Compiler

ADA with preemtable tasks and static priorities
Scheduling theory e.g. RMA

Execution Model Execution Infrastructure

Dedicated runtime for multitasking

Model-based Design ­ A more detailed View

SW Productivity

Application SW

Programming Model

Environment Model

Requirements

Code Generation
Implementation

Compiler
System Model

Correctness Analysis Diagnostics

Correctness

Performance &Correctness

Resource-aware Compilation

Application SW

Architecture model

Timing QoS

CompCileormpiler Compiler

Security

Scheduler

Event Handler

Task1

Task2

Task3

Task4

Synchronization and resource management
Platform

62

Operating Systems
Operating systems are often:  Far more complex than necessary  Undependable  With hidden functionality  Difficult to manage and use efficiently

Move towards standards dedicated to specific domains
Ex: OSEK, ARINC, JavaCard, TinyOS

 Minimal architectures, reconfigurable, adaptive, with features for safety and security
 Give up control to the application ­ move resource management outside the kernel
 Supply and allow adaptive scheduling policies which take into account the environmental context (ex: availability of critical resources such as energy).

63

Control for Embedded Systems
Automation applications are of paramount importance ­ their design and implementation raise difficult problems
Hybrid Systems ­ active research area
 Combination of continuous and discrete control techniques
 Multi-disciplinary integration aspects (control, numerical analysis, computing)
 Modeling and Verification
 Distributed and fault-tolerant implementations (influence communication delays, clock drift, aperiodic sampling)

 Use of control-based techniques for adaptivity

64

Dependability
 Traditional techniques based on massive redundancy are of limited value  Dependability should be a guiding concern from the very start of system
development. This applies to programming style, traceability, validation techniques, fault-tolerance mechanisms, ...
Work Directions :
 Methodologies for domain-specific standards, such as : - DO-178B Process Control Software Safety Certification - Integrated Modular Avionics; Autosar - Common Criteria for Information Technology Security Evaluation
 Certification methods and tools
 Architectures, protocols and algorithms for fault-tolerance and security taking into account QoS requirements (real-time, availabability)
65

Networked Embedded Systems

Networked Embedded Systems
1. An unmanned plane (UAV) deploys motes

Zzz...

Sentry

3.Sensor network detects vehicles and wakes up the sensor nodes

2. Motes establish an sensor network with power management

Networked Embedded Systems
Adaptive distributed real-time systems, inherently dynamic, must adapt to accommodate workload changes and to counter uncertainties in the system and its environment
 Clock synchronization, parameter settings
 Specific routing algorithms
 Location discovery, neighbor discovery
 Group management (dormant, active-role assignment)
 Self-organization : backbone creation, leader election, collaboration to provide a service
 Power management : turn-off of dormant nodes, periodical rotation of active nodes to balance energy
68

Integration of Methods and Tools

MO SystemC

Matlab/Simulink SDL

UML

AADL

PR VHDL Lustre-Esterel ADA

RT-Java

C C++ MW
Autosar ed

C# Java .NET Jini

NW CTToPrba CAN SafeBus

Bluetooth WiFi

OS OSEK ARINC Ravenscar JavaCard Symbian TinyOS

VxWorks

POSIX WinCE

HW controller DSP FPGA SoC NoC

69

 Embedded Systems

 System Design

 Achieving Correctness

 Research Challenges

 Marry Physicality and Computation

 Encompass Heterogeneity - Components

O  Cope with Complexity - Constructivity

V E

 Cope with Uncertainty ­ Predictability

R

V I

 Embedded Systems Design

E W  Discussion

70

Discussion
Embedded Systems  break with traditional Systems Engineering. They need new design
techniques guaranteeing both functionality and quality (performance and dependability) and taking into account market constraints  are an opportunity for reinvigorating and extending Computer Science with new paradigms from Electrical Engineering and Control Theory. This requires basic research effort for meeting four challenges
 Combining analytic and computational models  Component-based construction of heterogeneous systems  Constructivity at design time  Adaptivity as a means for ensuring predictability

In addition to meeting the research challenges, the development of System Design as a Discipline requires formalization of the design process as a sequence of correct-by-construction component-based
model transformations

71

THANK YOU
72

