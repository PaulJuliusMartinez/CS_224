Constrained Dynamics
Andrew Witkin
Carnegie Mellon University

SIGGRAPH '97 COURSE NOTES

SF1

PHYSICALLY BASED MODELING

Beyond Points and Springs
· You can make just about anything out of point masses and springs, in principle.
· In practice, you can make anything you want as long as it's jello.
· Constraints will buy us:
­ Rigid links instead of goopy springs. ­ Ways to make interesting contraptions.

SIGGRAPH '97 COURSE NOTES

SF2

PHYSICALLY BASED MODELING

A bead on a wire
· Desired Behavior:
­ The bead can slide freely along the circle.
­ It can never come off, however hard we pull.
· Question:
­ How does the bead move under applied forces?

SIGGRAPH '97 COURSE NOTES

SF3

PHYSICALLY BASED MODELING

Penalty Constraints
· Why not use a spring to hold the bead on the wire?
· Problem:
­ Weak springs  goopy constraints
­ Strong springs  neptune express!
· A classic stiff system.

SIGGRAPH '97 COURSE NOTES

SF4

PHYSICALLY BASED MODELING

The basic trick (f = mv version)

N f · 1st order world. fc · Legal velocity: tangent to f' circle (N·v = 0). · Project applied force f onto tangent: f' = f + fc
· Added normal-direction force fc: constraint force.
· No tug-of-war, no stiffness.

fc =

-

f N NN

N

f = f + fc

SIGGRAPH '97 COURSE NOTES

SF5

PHYSICALLY BASED MODELING

f = ma
Nf v
f' fc 

· Same idea, but...
· Curvature () has to match. ·  depends on both a and v:
­ the faster you're going, the faster you have to turn.
· Calculate fc to yield a legal combination of a and v.
· Blechh!

SIGGRAPH '97 COURSE NOTES

SF6

PHYSICALLY BASED MODELING

Now for the Algebra ...
· Fortunately, there's a general recipe for calculating the constraint force.
· First, a single constrained particle. · Then, generalize to constrained
particle systems.

SIGGRAPH '97 COURSE NOTES

SF7

PHYSICALLY BASED MODELING

Representing Constraints

I. Implicit:
C(x) = x - r = 0

Point-on-circle

II. Parametric:
x = r cos ,sin 

SIGGRAPH '97 COURSE NOTES

SF8

PHYSICALLY BASED MODELING

Maintaining Constraints Differentially

C=0

C=0

· Start with legal position and velocity.
· Use constraint forces to ensure legal curvature.

C=0

C = 0 legal position C = 0 legal velocity C = 0 legal curvature

SIGGRAPH '97 COURSE NOTES

SF9

PHYSICALLY BASED MODELING

N

=

C x

Constraint Gradient
Implicit:
C(x) = x - r = 0

Point-on-circle

Differentiating C gives a normal vector.
This is the direction our constraint force will point in.

SIGGRAPH '97 COURSE NOTES

SF10

PHYSICALLY BASED MODELING

Constraint Forces

fc = N
Point-on-circle

Constraint force: gradient vector times a scalar, .
Just one unknown to solve for.
Assumption: constraint is passive--no energy gain or loss.

SIGGRAPH '97 COURSE NOTES

SF11

PHYSICALLY BASED MODELING

C(x(t))

Constraint Force Derivation
fc = N

C=Nx

C

=

 t

Nx

=Nx+Nx

x

=

f

+ fc m

Set C¨ = 0, solve for :



=

-mNNNx

-

Nf NN

Notation:

N = Cx ,

N

=

2C xt

Constraint force is N.

SIGGRAPH '97 COURSE NOTES

SF12

PHYSICALLY BASED MODELING

Example: Point-on-circle

C= x -r

N

=

C x

=

x x

N

=

2C xt

=

1 x

x - xxxxx

Write down the constraint equation.
Take the derivatives.
Substitute into generic template, simplify.

 = -mNNNx

-

Nf NN

=

m(xxxx)2

- m(xx)

- xf

1 x

SIGGRAPH '97 COURSE NOTES

SF13

PHYSICALLY BASED MODELING

Drift and Feedback

· In principle, clamping C at zero is enough. · Two problems:
­ Constraints might not be met initially. ­ Numerical errors can accumulate.
· A feedback term handles both problems:

C = - C - C, instead of

C=0

 and  are magic constants.

SIGGRAPH '97 COURSE NOTES

SF14

PHYSICALLY BASED MODELING

Tinkertoys
· Now we know how to simulate a bead on a wire.
· Next: a constrained particle system.
­ E.g. constrain particle/particle distance to make rigid links.
· Same idea, but...

SIGGRAPH '97 COURSE NOTES

SF15

PHYSICALLY BASED MODELING

Constrained particle systems
· Particle system: a point in state space. · Multiple constraints:
­ each is a function Ci(x1,x2,...)
­ Legal state: Ci= 0,  i. ­ Simultaneous projection. ­ Constraint force: linear combination of
constraint gradients.
· Matrix equation.

SIGGRAPH '97 COURSE NOTES

SF16

PHYSICALLY BASED MODELING

Compact Particle System Notation

q = WQ
q: 3n-long state vector. Q: 3n-long force vector. M: 3n x 3n diagonal mass
matrix. W: M-inverse (element-
wise reciprocal)

q = x1,x2, ,xn

Q = f 1,f 2, ,f n

M=

m1 m1 m1

mn mn mn

W = M-1

SIGGRAPH '97 COURSE NOTES

SF17

PHYSICALLY BASED MODELING

Particle System Constraint Equations

Matrix equation for 
JWJT  = -Jq - JW Q
Constrained Acceleration
q = W Q + JT
Derivation: just like bead-on-wire.

More Notation

C = C1,C2,

 = 1,2,

J

=

C q

J = 2C qt

,Cm ,m

SIGGRAPH '97 COURSE NOTES

SF18

PHYSICALLY BASED MODELING

How do you implement all this?
· We have a global matrix equation. · We want to build models on the fly, just like
masses and springs. · Approach:
­ Each constraint adds its own piece to the equation.

SIGGRAPH '97 COURSE NOTES

SF19

PHYSICALLY BASED MODELING

Matrix Block Structure

C
C x i
C x j

xi xj

J

· Each constraint contributes one or more blocks to the matrix.
· Sparsity: many empty blocks.
· Modularity: let each constraint compute its own blocks.
· Constraint and particle indices determine block locations.

SIGGRAPH '97 COURSE NOTES

SF20

PHYSICALLY BASED MODELING

J
C
C Global Stuff

J

Global and Local

fc x

v f
m

x v

f

m

Constraint

SIGGRAPH '97 COURSE NOTES

SF21

PHYSICALLY BASED MODELING

Constraint Structure

Each constraint must know how to compute these C

C

C x 1

,

C x 2

2C , 2C x1t x2t

x vx fv mf
m

p1 Distance Constraint
p2 C = x1 - x2 - r

SIGGRAPH '97 COURSE NOTES

SF22

PHYSICALLY BASED MODELING

Constrained Particle Systems
particles n time forces nforces consts nconsts

xx x

...v v v
ff f

mm

m

F F F ...F CCC ... C
Added Stuff

SIGGRAPH '97 COURSE NOTES

SF23

PHYSICALLY BASED MODELING

...x x
vv

x v

1

ff f

mm

m

Clear Force

Accumulators

xx x

...v v v
ff f

mm

m

4

Return to solver

Modified Deriv Eval Loop
2 F F F ...F
Apply forces
Added Step
CCC ... C
3
Compute and apply Constraint Forces

SIGGRAPH '97 COURSE NOTES

SF24

PHYSICALLY BASED MODELING

Constraint Force Eval
· After computing ordinary forces:
­ Loop over constraints, assemble global matrices and vectors.
­ Call matrix solver to get , multiply by JT to get constraint force.
­ Add constraint force to particle force accumulators.

SIGGRAPH '97 COURSE NOTES

SF25

PHYSICALLY BASED MODELING

Impress your Friends
· The requirement that constraints not add or remove energy is called the Principle of Virtual Work.
· The 's are called Lagrange Multipliers. · The derivative matrix, J, is called the
Jacobian Matrix.

SIGGRAPH '97 COURSE NOTES

SF26

PHYSICALLY BASED MODELING

A whole other way to do it.

x 
Point-on-circle

I. Implicit:
C(x) = x - r = 0
II. Parametric:
x = r cos ,sin 

SIGGRAPH '97 COURSE NOTES

SF27

PHYSICALLY BASED MODELING

Parametric Constraints

x 
Point-on-circle

Parametric:
x = r cos ,sin 
· Constraint is always met exactly.
· One DOF: . · Solve for .

SIGGRAPH '97 COURSE NOTES

SF28

PHYSICALLY BASED MODELING

Parametric bead-on-wire (f = mv)

Nf

x is not an independent variable.

T

fc

T

=

x 

First step--get rid of it:

x

=

f

+ fc m

f = mv (constrained)

x = T

chain rule

T

=

f

+ fc m

combine

SIGGRAPH '97 COURSE NOTES

SF29

PHYSICALLY BASED MODELING

For our next trick...

Nf T
fc

T

=

x 

As before, assume fc points in the normal direction, so
Tfc = 0
We can nuke fc by dotting T into both sides:

T

=

f

+ fc m

from last slide

TT

=

Tf

+Tfc m

blam!



=

1 m

Tf TT

rearrange.

SIGGRAPH '97 COURSE NOTES

SF30

PHYSICALLY BASED MODELING

Parametric Constraints: Summary
· Generalizations: f = ma, particle systems
­ Like implicit case (see notes.)
· Big advantages:
­ Fewer DOF's. ­ Constraints are always met.
· Big disadvantages:
­ Hard to formulate constraints. ­ No easy way to combine constraints.
· Offical name: Lagrangian dynamics.

SIGGRAPH '97 COURSE NOTES

SF31

PHYSICALLY BASED MODELING

Things to try at home:
· A bead on a wire (implicit, parametric) · A double pendulum. · A triple pendulum. · Simple interactive tinkertoys.

SIGGRAPH '97 COURSE NOTES

SF32

PHYSICALLY BASED MODELING

