Automatic Inductive Programming

Ricardo Aler Mur

Universidad Carlos III de Madrid

http://www.uc3m.es/uc3m/dpto/INF/aler

http://et.evannai.inf.uc3m.es 

Contents

Introduction to AIP

1.
2. Genetic Algorithms for AIP (Genetic 

Programming)
Estimation of Distribution Algorithms for AIP 
(Probabilistic Incremental Program
Evolution)
Iterative Deepening for AIP (Automatic
Discovery of Algorithms through Evolution)

3.

4.

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Aims of the Tutorial
1. Survey of AIP: Automatic Inductive 
Programming is a fragmented field
(ILP, GP, Program Synthesis, ...)

2. To understand AIP as an extension to 

Machine Learning

3. Focus on search-based techniques
(mostly evolutionary techniques) 

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

INTRODUCTION TO AIP. A 
SURVEY

(cid:132)Introduction
(cid:132)Deductive Automatic 
Programming
(cid:132)Synthesis of Functional Programs
(cid:132)ILP for Program Synthesis

Automatic Programming
(cid:132) Automatic Generation of Programs
(cid:132) The user says what to do, the computer 

builds a program that does it

(cid:132) Saying what to do must be easier than 

writing the program by hand

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Related Fields

(cid:132) Universal Planning 
(cid:132) Production Rule Systems (PRS)
(cid:132) Reinforcement Learning (learning general 

strategies)

(cid:132) Recurrent Neural Networks (sequences of

executions)

(cid:132) Learning classifier system (rule-based systems. 

Pittsburgh and Michigan approaches)

(cid:132) Inductive Logic Programming (powerful 

relational language)

(cid:132) ...

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Importance of AIP
(cid:132) From a scientific point of view: 

(cid:132) A program is the most general structure 

that another program can learn (well 
beyond propositional Machine Learning)

(cid:132) From a practical point of view:

(cid:132) There are problems whose solution is a 
computer program and not some other 
Machine Learning propositional structure 
(decision trees, neural networks, ...) 

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Propositional Machine 
Learning. Input

Sky
Sun
Sun
Clouds
Rain
Rain
Clouds
Sun
Sun
Rain
Sun
Clouds

Temperature
85
80
83
70
68
64
72
69
75
75
72

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

humidity
85
90
86
96
80
65
95
70
80
70
90

Wind
No
Yes
No
No
No
Yes
No
No
No
Yes
Yes

Tennis
No
No
Yes
No
Yes
Yes
No
Yes
Yes
Yes
Yes

Propositional Machine 
Learning. Output
Decision trees

Rules

Sky

sun

clouds

rain

Humidity

YES

Wind

<=75 > 75

yes

no

YES NO

NO

YES

IF Sky = sun

Humidity <= 75 THEN Play = yes

ELSE IF Sky = sun

Humidity > 75  THEN Play = no
ELSE IF Sky = clouds  THEN Play = yes
ELSE IF Sky = rain 

Wind = Si      THEN Play = yes

ELSE Play = no

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Automatic Programming. 
Input (specification)

(cid:132) Input/output pairs: (list sorting) 

(cid:132) ([2,1], [1,2]); ([2,3,1], [1,2,3]); 
(cid:132) ([3,5,4], [3,4,5]); ([],[]); ...

(cid:132) Primitives:

(cid:132) (dobl start end work): for loop 
(cid:132) (wismaller x y): return smaller
(cid:132) (wibigger x y): return bigger
(cid:132) (swap x y)
(cid:132) (e1+ x) (e1- x) (e- x y) : increase, decrease, substract

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Automatic Programming. 
Output

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Equivalente to (kind of 
“bubble sort”)

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

AIP as an Extension to 
Propositional Machine Learning

(cid:132) Variable input size
(cid:132) Use of conditionals (if-then-else, case)
(cid:132) Reuse:

(cid:132) Use of variables (reuse of computations)
(cid:132) Use of subroutines (reuse of code)
(cid:132) Use of loops and recursivity (reuse of code)

(cid:132) Turing-complete languages

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

For What Kind of Problems?
(cid:132) Complex domains where human beings 

find difficult to write programs

(cid:132) And, full algorithms are required (with 

conditionals, subroutines, loops, ...)

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

For What Kind of Problems?
(cid:132) Programming quantum computers
(cid:132) Programming parallel computers
(cid:132) Machine Conde Programming
(cid:132) Programming agents in complex domains (ej: 

Robosoccer)

(cid:132) Programming text transformations from user 

supplied examples (web pages, ...)

(cid:132) Behavioral cloning
(cid:132) Etc.

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Behavioral Cloning (Extracting 
Operational Knowledge)

Agent to be cloned

Outputs / 
Actions

Inputs  / 
sensors

Observer Agent

Clon Agent
Model (computer program)

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Types of AIP
(cid:132) Deductive: to generate a program 

from a high-level description

(cid:132) Inductive: to generate a program 

from a set of instances

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Deductive Automatic 
Programming

(cid:132) Artificial Intelligence + Software 

Engineering

(cid:132) Main goal: generate a program from a 

high-level description, easier (and shorter) 
to write than the actual program.

(cid:132) However, this field includes compiler 

techniques for the optimisation of 
programs, tools for helping programmers, 
etc.

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Deductive Automatic 
Programming Techniques
(cid:132) Program analysis, transformation, and

optimisation (compilers techniques)
(cid:132) Memoization, sentence ordering, tail

recursivity, rewriting rules (* ?x 1) → ?x, ...

(cid:132) Programming assistants (Apprentice)
(cid:132) Scientific program generation (Kant)
(cid:132) High-Level languages (SML, SETL –set 

theory based-)

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Deductive Automatic 
Programming Tools
(cid:132) Automatic Programming Server: 

http://www.cs.utexas.edu/users/novak/cgi/ap
demo.cgi
(cid:132) Generating procedures for specialized types from

abstract types

(cid:132) Type conversion

(cid:132) Graphical Programming System: 

http://www.cs.utexas.edu/users/novak/cgi/gp
server.cgi

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Deductive Automatic 
Programming

(cid:132) Transformational and Deductive Systems 

(Refine, KIDS; Manna & Waldinger 92)

(cid:132) Specifications are written by means of formal 

languages

(cid:132) An specification is a theorem to prove
(cid:132) An Automatic Theorem Prover constructs the 

program

(cid:132) Specification -> theorem -> proof -> program

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Example: Amphion [Stickel, 95]
(cid:132) “Deductive Composition of Astronomical 

Software from Subroutine Libraries”
(cid:132) Astronomical domain (solar system)
(cid:132) Example: generate a program that tells where 

the shadow of Io is on Jupiter at a particular 
time

(cid:132) The program is made of calls to astronomical 

subroutines from the SPICE library

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Where is the shadow of Io?

Photon-Io-Jupiter

Shadow-point

Photon-sun-Io

Ray-Sun-to-Io

Photon-Jupiter-Voyager2

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Amphion. Shadow of Io 
Theorem

(cid:132) Is there a shadow-point, that is at the 

intersection of Ray-Sun-to-Ioand Júpiter-
Ellipsoid?

(cid:132) (exists sp?) in-ray(Sun,Io,Jupiter, Voyager, 

sp) & in-elipsoid(Jupiter, sp)

(cid:132) This theorem is represented in graphical form
(cid:132) Then converted to predicate logic
(cid:132) Then a constructive proof is obtained by the 

SNARK theorem prover

(cid:132) Then, a FORTRAN program is generated

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Graphical 
specification of 
theorem

Output

1

Sun

Io

Júpiter

2

3

Voyager

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Input

Theorem (first order logic)

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

FORTRAN PROGRAM

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Amphion

(cid:132) Advantages:

(cid:132) Easy to use (after 1h training) 

(cid:132) Experts: from 30m to 5m
(cid:132) Non-experts: from several days to 30m

(cid:132) Lmitations: 

(cid:132) Programs made of calls to subroutines, no 

conditionals, no loops, no recursivity

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Pros/Cons of Deductive AP

(cid:132) +: Generated programs are guaranteed to 

be correct

(cid:132) - : In general, it is difficult to write

correct and complete formal 
especifications, specially if the problem 
is not well-defined

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Automatic Inductive 
Programming
(cid:132) Goal: to generate computer programs from 

instances

(cid:132) This is usually achieved by a heuristic search

in the space of computer programs

(cid:132) Pros/Cons:

(cid:132) +: Specifications are easier to write
(cid:132) -: Specifications are not complete -> It is not 
guaranteed that the generated program will be 
absolutelly correct 

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

AIP specifications
(cid:132) Specifications are composed of:

(cid:132) Language: primitives to be used by the 

AIP system to construct the solution 
program

(cid:132) Heuristic: evaluates candidate solutions

(programs). There are basically, two types:
(cid:132) Input / Output pairs
(cid:132) Performance measure
(cid:132) (or combinations of both) 

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Input / Output specification

(cid:132) Example: create a sorting program
(cid:132) Input / output pairs: 

(cid:132) ([2,1], [1,2]); ([2,3,1], [1,2,3]); 
(cid:132) ([3,5,4], [3,4,5]); ([],[]); ...

(cid:132) Primitives:

(cid:132) (dobl start end work) (wismaller x y)
(cid:132) (swap x y) (wibigger x y)
(cid:132) (e1+ x) (e- x y) (e1- x)

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Performance Measure 
Specification

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Performance measure 
specification

(cid:132) Performance measure:

(cid:132) Count how many dots the Pacman ate in 

one game
(cid:132) Primitives:

(cid:132) if-obstacle, if-dot, if-big-dot, if-phantom, 
(cid:132) Forward, turn-left, turn-right

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Example of strategy for 
Pacman

if-phantom then {

turn-left;
turn-left;
go-forward;}
else if-big-dot { 
go-forward; 
girar-derecha;}

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Types of Automatic Inductive 
Programming
(cid:132) Synthesis-based: the program is built piece

by piece, never actually executed
(cid:132) Synthesis of Functional Programs
(cid:132) Synthesis of Logic Programs

(cid:132) Search-based: 

(cid:132) A search technique (genetic algorithms, ...) is 

used to search in the space of computer 
programs

(cid:132) Basically it is “iterated generate and test”
(cid:132) Candidate programs are executed (run) to 

determine how well they perform

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

LISP Program Synthesis

(cid:132) Seminal work: Summers P. 1977. "A 

Methodology for LISP Program Construction 
from Examples," Journal of theACM

(cid:132) Smith, D. 1984. “The Synthesis of LISP 

Programs from examples. A survey”. Mac 
Millan Publishing.

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Two Steps in LISP Program 
Synthesis
1. Traces (computations) are created for

individual input/output pairs

2. Then, patterns (like recurrence / 

recursivity) are identified in the traces

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

LISP Program Synthesis

(cid:132) Idea: “For some classes of programs, a few well-
chosen input/output pairs, determine the general 
program”

(cid:132) Example (last): [(A),A]; [(A B), B]; [(A B C), C]

(cid:132) T1: A=first((A))
(cid:132) T2: B=first(rest ((A B)))
(cid:132) T3: C=first(rest (rest ((A B C))))
(cid:132) TK: last=first(rest ... rest (list))

(cid:132) General pattern (program): “Apply k-1 times rest, 

then apply first”

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

LISP Program Synthesis
(cid:132) T1: A=first((A))
(cid:132) T2: B=first(rest ((A B))) =

(cid:132) T2 = T1(rest((A B)))

(cid:132) T3: C=first(rest (rest ((A B C))))

(cid:132) T3 = T2(rest((A B C)))

(cid:132) TK: last=first(rest ... rest (list))

(cid:132) Tk = Tk-1(rest(list))

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

LISP Program Synthesis
• That is, traces are obtained from input/output 

pairs, and then the general pattern is 
identified

• Actually, recursive programs are synthesized

by applying Summers’ Basic Synthesis
Theorem

last(x) =

Case singleton?(x) 

Yes: return first(x)
No: return last(rest(x))

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Structure of (Recursive) 
Learned Programs

(cid:132) G(x) = F(x, constant)
(cid:132) F(x,z) = 
Case

p1(x): f1(x,z)
...
pk(x): fk(x,z)
Else H(x, F(b(x), G(x,z)))

X is the main variable, Z is a secondary variable

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Examples of Programs

(but-last x) =
(cond 

((atom (cdr x)) nil)
(T (cons (car x) 

(but-last (cdr

x)))))

(last x) =
(cond 

((atom (cdr x)) 

(car x))

(T (last (cdr x)))))

(reverse x) = (rev x ‘())
(rev x z) = 

(cond  ((atom x) z)

(T (rev (cdr x) (cons (car x) z))))

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Assumption on Input/Output 
Pairs

(cid:132)x/y are sorted from simple to complex
(cid:132)No atom (element) appears twice in x
(cid:132)All atoms (elements) in yare also in x 
(selfcontained). 
(cid:132)If all this happens, each input/output pair has a 
unique trace
(cid:132)Traces can be found by enumeration

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

LISP sublanguage

(cid:132) Language: 

(cid:132) Car: (car ‘(a b c)) = a
(cid:132) Cdr: (cdr ‘(a b c)) = (b c) 
(cid:132) Cons:  (cons ‘a ‘(b c)) = (a b c)
(cid:132) Atom: (atom ‘a) = T
(cid:132) Cond: conditional

(cid:132) Operates only with lists (no numbers)

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Obtaining traces
For every input/output pair (x,y), find fsuch that: 
(cid:132) y = f(x)

(cid:132)

1. By enumeration of compositions of carand cdr, 

2.

try to find a direct relation between xand y: 
(cid:132) Ej: trace[(A),A] : y = (car x)
If that fails, then divide and conquer: find traces 
f1and f2such that:
(cid:132) (car y) = f1(x)
(cid:132) (cdr y) = f2(x)
(cid:132) Trace[x,y]= (cons f1(x) f2(x))

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Obtaining Traces (Divide and 
Conquer)

Trace[x, y]
Trace[x, (car-y . cdr-y)]

Cons

f1:Trace[x, car-y]

f2: Trace[x, cdr-y]

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Obtaining Traces

(cid:132) No direct relation for Trace [(A B), (B)]
(cid:132) X = (A B); Y = (B); (car Y) = B; (cdr Y) = ()
(cid:132) Divide and conquer:

(cid:132) f1: (car Y)  =  B   = (car (cdr X)
(cid:132) f2: (cdr Y)  = ()   = ()
(cid:132) Trace[(A B), (B)] = (cons f1(X) f2(X)) =        

(cons (car (cdr X)) ())   

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Recurrence Detection (Basic 
Synthesis Theorem)

(cid:132) Let traces be:

(cid:132) y1 = f1(x1)
(cid:132) y2 = f2(x2)
(cid:132) ...

(cid:132) If:∀i  fi+1(x) = H(fi(b(x)),x)

(cid:132) fi(b(x)) appears just once in H (b made of car/cdr, H made of 

cons/car/cdr)

(cid:132) This means that, for instance, f2 is embedded in f1
(cid:132) Pattern matching algorithms

(cid:132) Then: F(x) = case

p1(x) : f1(x)
Else:H(F(b(x)),x)

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Conclusions. Synthesis of LISP 
programs

(cid:132) [Summers, 77] Identifies recursivity by detecting a 

trace being embedded in another trace

(cid:132) It works because:

(cid:132) Restricts input/output (x,y)pairs so that trace f is 

unique in y = f(x)

(cid:132) It restricts the target to be learned (one-argument 

recursive functions)

(cid:132) It works only on structural tasks on lists. Structural: the 
task only depends on the structure of the list, not on its 
content. Sorting is beyond its scope.

(cid:132) Trace generation is domain dependent! (lists)

(cid:132) Good idea: using traces

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Applications of Program 
Synthesis
(cid:132) Learning by Demostration / Learning by 

Example

(cid:132) Teacher – Student paradigm
(cid:132) Computation traces come from users, 
working through graphical interactive 
interfaces 

(cid:132) Example: TELS learns text-editing macros 
from the user and generalizes them with 
loops and conditionals [Witten et al. 93]

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

References
(cid:132) “Watch What I do. Programming by 

Demonstration” [Cypher, 93]
(cid:132) “Your Wish is My Command. 

Programming by Example” [Lieberman, 
01]

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Extensions. Synthesis of
Functional Programs

(cid:132) Schmidt, U. and Wysotzki, F. (1998). “Induction 

of Recursive Program Schemes”. ECML’98

(cid:132) Kitzelmann, E., Schmidt, U., Mühlpfordt, M., and 

Wysotzki, F. 2002. “Inductive Synthesis of 
Functional Programs”. Artificial Intelligence, 
Automated Reasoning, and Symbolic Computation, 
Joint International Conference

(cid:132) E. Kitzelmann, U. Schmid. 2005. “An Explanation 
Based Generalization Approach to Inductive 
Synthesis of Functional Programs”. ICML’05 

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Schmidt Approach
(cid:132) It goes well beyond Summer’s
(cid:132) Language independent
(cid:132) Multiple recursion
(cid:132) Multiple arguments
(cid:132) Linear, tail, and tree recursion
(cid:132) Mostly, structural tasks (lists, trees, ...)
(cid:132) Learning recursive programs is basically 

equivalent to learning some kind of grammars

(cid:132) Application: XSL transformations (traces 

generated by Genetic Programming)

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Some results (EBG paper)

Total time

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Types of Automatic Inductive 
Programming
(cid:132) Synthesis-based:

(cid:132) Synthesis of Functional Programs
(cid:132) Synthesis of Logic Programs:

(cid:132) Without schemes
(cid:132) With schemes

(cid:132) Search-based

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Inductive Logic
Programming (ILP)

(cid:132) Machine Learning framework for learning first-order

logic expressions (horn clauses)

(cid:132) ILP language is more expressive than typical 

propositional ML languages 

(cid:132) Actually, it is basically Turing-complete (computer 
programs can be written in it with recursivity and
“subroutines”)

(cid:132) However, it is mostly used for relational concept 

learning, not for program synthesis

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

ILP Example

Learned Knowlege:

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

General to Specific (top-down) 
Search (FOIL)

(cid:132)Also:

(cid:132)Bottom-up: GOLEM, 
CIGOL
(cid:132)Proposicional: LINUS

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

ILP Allows for Recursivity

Obtained knowledge:

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

ILP for Program Synthesis

Positive and negative instances

Background knowledge: select(a, [2,a,3,4], [2,3,4])

Obtained program

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Types of Synthesizers

(cid:132) No schemes: TIM, MARKUS, SPECTRE, MERLIN, 

WIM, FILP, ...

(cid:132) With schemes: SYNAPSE, DIALOG, 

METAINDUCE, CRUSTACEAN, CLIP, FORCE2, 
SIERES, ...

(cid:132) Pierre Flener, Serap Yilmaz. 1999. Inductive 
Synthesis of Recursive Logic Programs: 
Achievements and Prospects. Journal of Logic 
Programming 

(cid:132) Flener et al 1994. ILP and Automatic 

Programming: Towards Three Approaches. 
4th International Workshop on ILP

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

WIM (top-down, no schemes) 
[Popelinsky, 95]

5 seconds to 5 minutes

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

WIM. Results (1 query, 
interactive)

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Quicksort Code

But 
partition 
and 
append are 
primitives!

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

SYNAPSE (With Schemes) 
[Flener, 95]
(cid:132) Critique: instances are weak specifications
(cid:132) Goal: 

(cid:132) Compress ([a,a,b,b,a,c,c,c], [a,2,b,2,a,1,c,3])

(cid:132) From instances:
(cid:132) Compress ([],[])
(cid:132) Compress ([a], [a,1])
(cid:132) Compress ([b,b], [b,2])
(cid:132) Compress ([c,d], [c,1,d,1])
(cid:132) Compress ([e,e,e], [e,3])
(cid:132) Compress ([f,f,g], [f,2,g,1]
(cid:132) Compress ([j,k,l], [j,1,k,1,l,1])

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

SYNAPSE. Properties
(cid:132) In addition to instances, it adds

background knowledge in the form of
properties:
(cid:132) Compress ([X], [X,1])
(cid:132) X=Y -> Compress([X,Y], [X,2])
(cid:132) X <> Y -> Compress([X,Y], [X,1,Y,1]

(cid:132) Interactive

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

SYNAPSE. Schemes
(cid:132) Divide and conquer:
(cid:132) R(X,Y) iff Minimal(X), Solve(Y)
(cid:132) R(X,Y) ifff 

(cid:132) 1<= k <= c
(cid:132) Non-Minimal(X)
(cid:132) Decompose(X, HX, TX)
(cid:132) Discriminatek(HX,TX,Y)
(cid:132) R(TX,TY)
(cid:132) Processk(HX,HY)
(cid:132) Composek(HY,TY,Y)

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

SYNAPSE. Schemes
(cid:132) (Divide and conquer simplified wrt [Flener, 

95])

(cid:132) R(X,Y) iff Minimal(X), Solve(Y)
(cid:132) R(X,Y) ifff 

(cid:132) Non-Minimal(X)
(cid:132) Decompose X => Head + Tail
(cid:132) Solve(Head) => HY
(cid:132) Solve(Tail) => TY
(cid:132) Solution Y = HY + HX

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

SYNAPSE. Algorithm
(cid:132) Expansion phase:

(cid:132) Create a first approximation
(cid:132) Synthesis of Minimaland Non-Minimal
(cid:132) Synthesis of Decompose
(cid:132) Insertion of recursive atoms

(cid:132) Reduction phase:

(cid:132) Synthesis of Solve
(cid:132) Synthesis of Processkand Composek

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

SYNAPSE. Other Solved 
Problems
(cid:132) Delete (E,L,R)[6 instances, 3 

properties]

(cid:132) Sort (L,S)[10 instances, 1 property, 

split,partition]. Three programs: 
(cid:132) insertion-sortO(N2), 
(cid:132) merge-sort  O(N log(N)), 
(cid:132) quicksortO(N log(N)) were obtained by 

backtracking 

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

ILP for Program Synthesis. 
Conclusions
(cid:132) First order logic seems a very natural 

framework for learning programs
(recursivity, “subroutines”, ...)

(cid:132) Formal approach
(cid:132) Good idea: General-to-specific and 

specific-to-general search

(cid:132) Good idea: schemes
(cid:132) Simple programs can be learned

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Other results on ILP for 
program synthesis

(cid:132) J. Stahl. 1993. “Predicate Invention in 

ILP – An Overview”. ECML

(cid:132) Hernández-Orallo, Ramírez-Quintana.
1999. “Inductive Functional Logic 
Programming”, 8th International Workshop 
on Functional and Logic Programming

(cid:132) Rao. 2005. “Learning Recursive Prolog 

Programs with Local Variables from 
Examples”. ICML(one-recursive)

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Search Based AIP. General 
Idea
(cid:132) Incremental Search in the space of 
computer programs. Generate and Test

Fac(n) = if () 
then {}
Else {}

Fac(n) = if (n=0) 
then {1} 
Else {n}

Fac(n) = if (n=0) 
then {1}
Else {n*fac(n-1)}

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Issues
(cid:132) 1: Search space is vast 
(cid:132) 2: Programs are “fragile”. Recursive or

iterative programs are even more fragile 
(cid:132) => How to transform programs?

(cid:132) 3: An iterative or recursive program may 

never end (or take a long time)
(cid:132) => How to handle unlimited time?

(cid:132) 4: No guarantee that the learned program is 

completely correct (induction)
(cid:132) => How to handle many i/o pairs or long 

tests?

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

Search-Based AIP
(Mostly, functional/procedural languages)
(cid:132) Genetic Search (Genetic Programming):

(cid:132) Tree-based
(cid:132) Grammar-based

(cid:132) Estimation of Distribution Algorithms:

(cid:132) Tree-based
(cid:132) Grammar-based

(cid:132) Iterative Deepening: ADATE
(cid:132) Other: Levin Search, Ant Colony Optimisation, 

...

More general than synthesis-based but require a high 
computational effort!!

Ricardo Aler. ICML’06 Automatic Inductive Programming Tutorial

